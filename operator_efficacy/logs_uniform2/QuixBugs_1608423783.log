2020-12-20 01:23:03,293	[INFO]	Path to the temporal program variants: ./.pyggi/tmp_variants/QuixBugs/1608423783
2020-12-20 01:23:03,293	[INFO]	========== EXPERIMENT FOR ['java_programs/SHORTEST_PATH_LENGTH.java.xml']  ==========
2020-12-20 01:23:03,293	[INFO]	modification points:
 ['./decl_stmt[1]', './decl_stmt[2]', './decl_stmt[3]', './expr_stmt[1]', './while[1]', './while[1]/decl_stmt[1]', './while[1]/decl_stmt[2]', './while[1]/expr_stmt[1]', './while[1]/if[1]', './while[1]/if[1]/operator_comp[1]', './while[1]/if[1]/return[1]', './while[1]/expr_stmt[2]', './while[1]/for[1]', './while[1]/for[1]/if[1]', './while[1]/for[1]/if[1]/continue[1]', './while[1]/for[1]/if[2]', './while[1]/for[1]/if[2]/operator_comp[1]', './while[1]/for[1]/if[2]/expr_stmt[1]', './while[1]/for[1]/expr_stmt[1]', './return[1]', './decl_stmt[4]', './decl_stmt[5]', './for[1]', './for[1]/decl_stmt[1]', './for[1]/if[1]', './for[1]/if[1]/operator_comp[1]', './for[1]/if[1]/expr_stmt[1]', './for[1]/if[1]/expr_stmt[2]', './return[2]']
2020-12-20 01:23:03,293	[INFO]	number of statements and comparisons: 26, 3
2020-12-20 01:23:03,294	[INFO]	========== EPOCH 1 ==========
2020-12-20 01:23:03,294	[INFO]	==== WARMUP ====
2020-12-20 01:23:06,361	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:23:06,361	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:23:09,428	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:23:09,428	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:23:12,849	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:23:12,850	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:23:16,084	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 01:23:16,084	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:23:16,084	[INFO]	==== START ====
2020-12-20 01:23:17,052	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:23:17,053	[INFO]	2	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:23:17,054	[DEBUG]	
2020-12-20 01:23:17,955	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:23:17,956	[INFO]	4	SUCCESS	+2.0	
2020-12-20 01:23:17,956	[DEBUG]	
2020-12-20 01:23:18,877	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:23:19,831	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:23:20,733	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:23:21,641	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:23:21,642	[INFO]	9	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-20 01:23:21,643	[DEBUG]	
2020-12-20 01:23:21,643	[INFO]	10	SUCCESS	+2.0	
2020-12-20 01:23:21,643	[DEBUG]	
2020-12-20 01:23:22,544	[INFO]	11	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-20 01:23:23,470	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:23:24,416	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:23:25,274	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:23:26,216	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:23:29,126	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:23:29,128	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 01:23:30,052	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:23:33,039	[INFO]	18	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:23:33,040	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,31 ****
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             unvisitedNodes.remove(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 01:23:36,325	[INFO]	19	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:23:36,327	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:23:36,329	[INFO]	20	SUCCESS	+2.0	
2020-12-20 01:23:36,329	[DEBUG]	
2020-12-20 01:23:39,836	[INFO]	21	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:23:39,837	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 01:23:39,838	[INFO]	22	SUCCESS	+2.0	
2020-12-20 01:23:39,838	[DEBUG]	
2020-12-20 01:23:40,808	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:23:41,891	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:23:42,908	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:23:43,923	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:23:43,925	[INFO]	27	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:23:43,925	[DEBUG]	
2020-12-20 01:23:44,949	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:23:44,951	[INFO]	29	SUCCESS	+2.0	
2020-12-20 01:23:44,951	[DEBUG]	
2020-12-20 01:23:48,361	[INFO]	30	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:23:49,368	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:23:52,823	[INFO]	32	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:23:52,824	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-20 01:23:53,825	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:23:53,828	[INFO]	34	SUCCESS	+2.0	
2020-12-20 01:23:53,829	[DEBUG]	
2020-12-20 01:23:54,870	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:23:55,922	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:23:57,019	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:24:00,594	[INFO]	38	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:24:01,694	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:24:02,770	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:24:03,891	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:24:04,970	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:24:06,025	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:24:07,079	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:24:08,148	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:24:09,194	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:24:10,277	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:24:11,348	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:24:14,760	[INFO]	49	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:24:14,761	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-20 01:24:15,779	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:24:15,781	[INFO]	51	SUCCESS	+2.0	
2020-12-20 01:24:15,781	[DEBUG]	
2020-12-20 01:24:16,794	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:24:20,142	[INFO]	53	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:24:20,143	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 01:24:20,144	[INFO]	54	SUCCESS	+2.0	
2020-12-20 01:24:20,144	[DEBUG]	
2020-12-20 01:24:21,150	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:24:22,169	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:24:23,223	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:24:24,262	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:24:27,634	[INFO]	59	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:24:27,635	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 01:24:30,856	[INFO]	60	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:24:30,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,42 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 20,33 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             unvisitedNodes.remove(node);
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:24:30,858	[INFO]	61	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:24:30,859	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 01:24:30,860	[INFO]	62	SUCCESS	+2.0	
2020-12-20 01:24:30,860	[DEBUG]	
2020-12-20 01:24:31,859	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:24:35,228	[INFO]	64	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:24:35,229	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:24:36,234	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:24:39,885	[INFO]	66	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:24:39,886	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,33 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:24:39,888	[INFO]	67	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:24:39,888	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:24:39,889	[INFO]	68	SUCCESS	+2.0	
2020-12-20 01:24:39,889	[DEBUG]	
2020-12-20 01:24:40,937	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:24:42,053	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:24:45,505	[INFO]	71	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:24:45,506	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 01:24:46,503	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:24:46,505	[INFO]	73	SUCCESS	+2.0	
2020-12-20 01:24:46,505	[DEBUG]	
2020-12-20 01:24:50,069	[INFO]	74	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:24:50,069	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:24:51,005	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:24:52,021	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 01:24:53,045	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:24:54,092	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:24:57,454	[INFO]	79	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:24:57,455	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:24:58,491	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:25:01,917	[INFO]	81	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:25:01,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,42 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 01:25:05,286	[INFO]	82	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:25:05,287	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
-                 if (unvisitedNodes.get(nextnode) == null) {
-                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
-                 }
- 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,39 ----
                      continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 01:25:05,288	[INFO]	83	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:25:05,288	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:25:06,273	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:25:09,709	[INFO]	85	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:25:09,710	[INFO]	86	SUCCESS	+2.0	
2020-12-20 01:25:09,710	[DEBUG]	
2020-12-20 01:25:13,116	[INFO]	87	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:25:13,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 01:25:14,155	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:25:14,158	[INFO]	89	SUCCESS	+2.0	
2020-12-20 01:25:14,158	[DEBUG]	
2020-12-20 01:25:15,169	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:25:16,185	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:25:16,187	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:25:16,188	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:25:19,495	[INFO]	94	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:25:19,496	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:25:19,496	[INFO]	95	SUCCESS	+2.0	
2020-12-20 01:25:19,497	[DEBUG]	
2020-12-20 01:25:22,830	[INFO]	96	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:25:22,831	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 01:25:23,867	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:25:24,900	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:25:24,903	[INFO]	99	SUCCESS	+2.0	
2020-12-20 01:25:24,904	[DEBUG]	
2020-12-20 01:25:25,911	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:25:26,959	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:25:28,026	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:25:29,017	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:25:30,014	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:25:33,307	[INFO]	105	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:25:36,898	[INFO]	106	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:25:36,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 01:25:37,903	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:25:37,906	[INFO]	108	SUCCESS	+2.0	
2020-12-20 01:25:37,906	[DEBUG]	
2020-12-20 01:25:38,946	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:25:39,967	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:25:41,007	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:25:42,045	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:25:43,042	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:25:44,083	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:25:45,133	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:25:46,129	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:25:47,190	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:25:48,214	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:26:03,276	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:26:04,181	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:26:05,100	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:26:05,104	[INFO]	122	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:26:05,105	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 01:26:05,107	[INFO]	123	SUCCESS	+2.0	
2020-12-20 01:26:05,108	[DEBUG]	
2020-12-20 01:26:05,991	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:26:09,066	[INFO]	125	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:26:10,082	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:26:11,072	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:26:12,127	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:26:13,081	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:26:14,139	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:26:17,604	[INFO]	131	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:26:17,605	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:26:18,556	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:26:18,557	[INFO]	133	SUCCESS	+2.0	
2020-12-20 01:26:18,557	[DEBUG]	
2020-12-20 01:26:19,562	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:26:20,597	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:26:21,620	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:26:36,694	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:26:39,753	[INFO]	138	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:26:39,754	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:26:40,722	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:26:41,753	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:26:41,755	[INFO]	141	SUCCESS	+2.0	
2020-12-20 01:26:41,756	[DEBUG]	
2020-12-20 01:26:45,080	[INFO]	142	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:26:45,081	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:26:46,173	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:26:46,176	[INFO]	144	SUCCESS	+2.0	
2020-12-20 01:26:46,176	[DEBUG]	
2020-12-20 01:26:47,235	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:26:48,258	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:26:49,292	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:26:50,325	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:26:51,380	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:26:52,418	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:26:53,416	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:26:56,824	[INFO]	152	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:26:57,789	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:26:58,816	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:26:59,862	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:27:00,911	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:27:01,927	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:27:02,916	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:27:04,197	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:27:05,224	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:27:08,607	[INFO]	161	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:27:08,608	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 01:27:08,608	[INFO]	162	SUCCESS	+2.0	
2020-12-20 01:27:08,609	[DEBUG]	
2020-12-20 01:27:09,616	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:27:10,644	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:27:11,660	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:27:12,657	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:27:13,695	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:27:14,709	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:27:15,723	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:27:19,163	[INFO]	170	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:27:19,164	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 01:27:19,165	[INFO]	171	SUCCESS	+2.0	
2020-12-20 01:27:19,165	[DEBUG]	
2020-12-20 01:27:20,142	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:27:21,155	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:27:22,215	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:27:23,239	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:27:24,256	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:27:25,312	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:27:26,343	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:27:27,390	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:27:28,448	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:27:31,786	[INFO]	181	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:27:31,787	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:27:31,787	[INFO]	182	SUCCESS	+2.0	
2020-12-20 01:27:31,788	[DEBUG]	
2020-12-20 01:27:32,792	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:27:33,833	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:27:34,852	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:27:38,218	[INFO]	186	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:27:38,219	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 01:27:39,251	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:27:40,309	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:27:41,353	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:27:44,724	[INFO]	190	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:27:45,744	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:27:46,686	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:27:46,687	[INFO]	193	SUCCESS	+2.0	
2020-12-20 01:27:46,688	[DEBUG]	
2020-12-20 01:27:50,487	[INFO]	194	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:27:50,488	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:28:05,561	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:28:06,471	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:28:06,474	[INFO]	197	SUCCESS	+2.0	
2020-12-20 01:28:06,474	[DEBUG]	
2020-12-20 01:28:07,383	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:28:08,317	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:28:09,210	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:28:10,167	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:28:11,166	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:28:12,186	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:28:13,204	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:28:14,220	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:28:15,209	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:28:16,195	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:28:19,567	[INFO]	208	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:28:19,568	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:28:19,569	[INFO]	209	SUCCESS	+2.0	
2020-12-20 01:28:19,570	[DEBUG]	
2020-12-20 01:28:20,548	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:28:21,562	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:28:22,603	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:28:23,608	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:28:24,588	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:28:25,621	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:28:26,574	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:28:27,614	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:28:28,617	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:28:29,622	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:28:30,616	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:28:34,123	[INFO]	221	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:28:34,124	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 01:28:34,124	[INFO]	222	SUCCESS	+2.0	
2020-12-20 01:28:34,125	[DEBUG]	
2020-12-20 01:28:35,131	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:28:38,560	[INFO]	224	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:28:38,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:28:38,562	[INFO]	225	SUCCESS	+2.0	
2020-12-20 01:28:38,562	[DEBUG]	
2020-12-20 01:28:39,563	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:28:42,955	[INFO]	227	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:28:42,956	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  

2020-12-20 01:28:43,992	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:28:43,994	[INFO]	229	SUCCESS	+2.0	
2020-12-20 01:28:43,995	[DEBUG]	
2020-12-20 01:28:45,010	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:28:46,019	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:28:47,086	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:28:48,107	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:28:49,168	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:28:50,172	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:28:51,182	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:29:06,260	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:29:07,134	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:29:10,170	[INFO]	239	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:29:10,171	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 01:29:10,172	[INFO]	240	SUCCESS	+2.0	
2020-12-20 01:29:10,172	[DEBUG]	
2020-12-20 01:29:11,043	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:29:11,945	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:29:15,166	[INFO]	243	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:29:15,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-20 01:29:16,190	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:29:17,295	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:29:17,296	[INFO]	246	SUCCESS	+2.0	
2020-12-20 01:29:17,297	[DEBUG]	
2020-12-20 01:29:20,644	[INFO]	247	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:29:20,645	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 01:29:21,679	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:29:21,681	[INFO]	249	SUCCESS	+2.0	
2020-12-20 01:29:21,682	[DEBUG]	
2020-12-20 01:29:22,690	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:29:22,692	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:29:23,699	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:29:24,740	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:29:25,776	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:29:26,773	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:29:30,252	[INFO]	256	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:29:30,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 01:29:31,225	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:29:32,788	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:29:32,790	[INFO]	259	SUCCESS	+2.0	
2020-12-20 01:29:32,790	[DEBUG]	
2020-12-20 01:29:34,480	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:29:37,915	[INFO]	261	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:29:37,916	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 01:29:38,911	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:29:38,913	[INFO]	263	SUCCESS	+2.0	
2020-12-20 01:29:38,914	[DEBUG]	
2020-12-20 01:29:39,936	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:29:40,930	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:29:41,919	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:29:43,340	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:29:44,596	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:29:45,641	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:29:46,656	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:29:50,035	[INFO]	271	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:29:50,036	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:29:51,025	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:29:51,027	[INFO]	273	SUCCESS	+2.0	
2020-12-20 01:29:51,028	[DEBUG]	
2020-12-20 01:29:52,063	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:29:53,090	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:29:53,093	[INFO]	276	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:29:53,094	[DEBUG]	
2020-12-20 01:29:56,480	[INFO]	277	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:29:57,520	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:29:57,523	[INFO]	279	SUCCESS	+2.0	
2020-12-20 01:29:57,524	[DEBUG]	
2020-12-20 01:29:58,519	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:29:59,490	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:30:00,526	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:30:01,554	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:30:02,592	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:30:03,608	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:30:04,639	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:30:08,016	[INFO]	287	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:30:08,017	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 01:30:11,335	[INFO]	288	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:30:11,336	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 01:30:11,337	[INFO]	289	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:30:11,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 01:30:14,719	[INFO]	290	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:30:14,720	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 47,52 ****
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 01:30:14,721	[INFO]	291	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:30:14,721	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 01:30:14,722	[INFO]	292	SUCCESS	+2.0	
2020-12-20 01:30:14,722	[DEBUG]	
2020-12-20 01:30:15,744	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:30:16,783	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:30:17,830	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:30:18,838	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:30:19,847	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:30:19,848	[INFO]	298	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:30:19,849	[DEBUG]	
2020-12-20 01:30:20,839	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:30:20,841	[INFO]	300	SUCCESS	+2.0	
2020-12-20 01:30:20,842	[DEBUG]	
2020-12-20 01:30:21,892	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:30:25,267	[INFO]	302	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:30:25,268	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-20 01:30:25,268	[INFO]	303	SUCCESS	+2.0	
2020-12-20 01:30:25,269	[DEBUG]	
2020-12-20 01:30:26,325	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:30:27,358	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:30:28,366	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:30:31,812	[INFO]	307	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:30:31,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:30:32,812	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:30:36,690	[INFO]	309	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:30:36,691	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,25 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+             unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 39,44 ****
--- 40,47 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:30:36,693	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:30:36,693	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:30:37,887	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:30:39,142	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:30:40,541	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:30:44,558	[INFO]	314	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:30:44,559	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,32 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 38,43 ****
--- 42,49 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 01:30:48,527	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:30:48,528	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 01:30:49,564	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:30:49,566	[INFO]	317	SUCCESS	+2.0	
2020-12-20 01:30:49,566	[DEBUG]	
2020-12-20 01:30:50,587	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:30:51,612	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:30:52,641	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:30:53,672	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:30:54,669	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:30:55,708	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:30:56,726	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:30:57,757	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:30:58,812	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:31:02,134	[INFO]	327	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:31:02,135	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-20 01:31:03,101	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:31:04,082	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:31:04,083	[INFO]	330	SUCCESS	+2.0	
2020-12-20 01:31:04,084	[DEBUG]	
2020-12-20 01:31:05,102	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:31:06,149	[INFO]	332	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:31:07,166	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:31:08,209	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:31:09,224	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:31:10,227	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:31:13,642	[INFO]	337	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:31:13,644	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:31:13,646	[INFO]	338	SUCCESS	+2.0	
2020-12-20 01:31:13,646	[DEBUG]	
2020-12-20 01:31:14,652	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:31:15,692	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:31:16,725	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:31:17,727	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:31:18,773	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:31:19,785	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:31:20,765	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:31:24,220	[INFO]	346	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:31:24,220	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:31:25,274	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:31:28,710	[INFO]	348	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:31:28,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-20 01:31:28,713	[INFO]	349	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:31:28,713	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:31:28,714	[INFO]	350	SUCCESS	+2.0	
2020-12-20 01:31:28,714	[DEBUG]	
2020-12-20 01:31:29,716	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:31:30,734	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:31:31,752	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:31:32,757	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:31:33,801	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:31:33,803	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:31:37,193	[INFO]	357	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:31:37,194	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 01:31:37,195	[INFO]	358	SUCCESS	+2.0	
2020-12-20 01:31:37,195	[DEBUG]	
2020-12-20 01:31:38,200	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:31:41,560	[INFO]	360	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:31:41,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 01:31:44,808	[INFO]	361	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:31:44,809	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,32 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:31:45,751	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:31:45,753	[INFO]	363	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:31:45,754	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,32 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:31:49,560	[INFO]	364	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:31:49,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:31:50,515	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:32:05,583	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:32:05,585	[INFO]	367	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:32:05,585	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:32:05,586	[INFO]	368	SUCCESS	+2.0	
2020-12-20 01:32:05,586	[DEBUG]	
2020-12-20 01:32:05,587	[INFO]	369	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:32:05,587	[DEBUG]	
2020-12-20 01:32:05,588	[INFO]	370	SUCCESS	+2.0	
2020-12-20 01:32:05,588	[DEBUG]	
2020-12-20 01:32:06,541	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:32:07,474	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:32:08,391	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:32:09,336	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:32:10,243	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:32:11,140	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:32:12,100	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:32:13,206	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:32:14,264	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:32:17,528	[INFO]	380	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:32:17,529	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-20 01:32:18,501	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:32:19,464	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:32:20,409	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:32:21,357	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:32:22,345	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:32:23,299	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:32:26,598	[INFO]	387	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:32:26,599	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,30 ----
                  return distance;
              }
              visitedNodes.add(node);
+             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-20 01:32:26,600	[INFO]	388	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:32:26,600	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-20 01:32:26,601	[INFO]	389	SUCCESS	+2.0	
2020-12-20 01:32:26,601	[DEBUG]	
2020-12-20 01:32:27,630	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:32:30,972	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:32:30,973	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 01:32:30,974	[INFO]	392	SUCCESS	+2.0	
2020-12-20 01:32:30,974	[DEBUG]	
2020-12-20 01:32:31,976	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:32:32,975	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:32:34,028	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:32:35,044	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:32:36,049	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:32:37,079	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:32:37,081	[INFO]	399	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:32:37,081	[DEBUG]	
2020-12-20 01:32:37,082	[INFO]	400	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:32:37,083	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:32:37,084	[INFO]	401	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:32:37,085	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:32:37,086	[INFO]	402	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:32:37,086	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:32:38,030	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:32:38,031	[INFO]	404	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:32:38,032	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:32:39,039	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:32:39,040	[INFO]	406	SUCCESS	+2.0	
2020-12-20 01:32:39,041	[DEBUG]	
2020-12-20 01:32:40,059	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:32:41,078	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:32:42,102	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:32:43,109	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:32:46,496	[INFO]	411	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:32:46,497	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 01:32:49,981	[INFO]	412	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:32:49,982	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 29,34 ****
--- 53,60 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 01:32:53,364	[INFO]	413	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:32:53,365	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 01:32:54,342	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:32:55,327	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:32:55,330	[INFO]	416	SUCCESS	+2.0	
2020-12-20 01:32:55,331	[DEBUG]	
2020-12-20 01:32:56,298	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:32:57,318	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:32:58,354	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:33:01,755	[INFO]	420	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:33:02,722	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:33:02,725	[INFO]	422	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:33:02,726	[DEBUG]	
2020-12-20 01:33:03,740	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:33:04,754	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:33:07,995	[INFO]	425	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:33:07,996	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:33:07,997	[INFO]	426	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:33:07,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:33:08,993	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:33:08,995	[INFO]	428	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:33:08,995	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:33:12,316	[INFO]	429	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:33:12,317	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:33:13,329	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:33:13,331	[INFO]	431	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:33:13,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:33:28,393	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:33:28,394	[INFO]	433	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:33:28,395	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:33:29,283	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:33:30,220	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:33:30,223	[INFO]	436	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:33:30,225	[DEBUG]	
2020-12-20 01:33:31,165	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:33:31,166	[INFO]	438	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:33:31,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:33:31,167	[INFO]	439	SUCCESS	+2.0	
2020-12-20 01:33:31,168	[DEBUG]	
2020-12-20 01:33:32,063	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:33:32,948	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:33:33,864	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:33:34,771	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:33:35,844	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:33:39,169	[INFO]	445	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:33:39,170	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 01:33:40,195	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:33:40,196	[INFO]	447	SUCCESS	+2.0	
2020-12-20 01:33:40,196	[DEBUG]	
2020-12-20 01:33:41,205	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:33:56,279	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:33:57,160	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:33:58,001	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:33:58,918	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:33:59,874	[INFO]	453	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:34:00,818	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:34:04,170	[INFO]	455	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:34:04,172	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 01:34:04,172	[INFO]	456	SUCCESS	+2.0	
2020-12-20 01:34:04,173	[DEBUG]	
2020-12-20 01:34:07,523	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:34:07,524	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:34:08,486	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:34:08,488	[INFO]	459	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:34:08,489	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:34:09,490	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:34:10,495	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:34:10,497	[INFO]	462	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:34:10,498	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:34:11,536	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:34:11,538	[INFO]	464	SUCCESS	+2.0	
2020-12-20 01:34:11,538	[DEBUG]	
2020-12-20 01:34:12,574	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:34:13,528	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:34:16,866	[INFO]	467	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:34:16,867	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 01:34:17,875	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:34:17,877	[INFO]	469	SUCCESS	+2.0	
2020-12-20 01:34:17,877	[DEBUG]	
2020-12-20 01:34:18,902	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:34:19,928	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:34:20,982	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:34:24,333	[INFO]	473	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:34:24,335	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:34:24,335	[INFO]	474	SUCCESS	+2.0	
2020-12-20 01:34:24,336	[DEBUG]	
2020-12-20 01:34:25,390	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:34:26,513	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:34:27,568	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:34:28,628	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:34:29,664	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:34:33,028	[INFO]	480	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:34:34,060	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:34:35,082	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:34:36,129	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:34:37,181	[INFO]	484	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-20 01:34:40,480	[INFO]	485	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:34:40,481	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 01:34:43,751	[INFO]	486	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:34:43,752	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,53 ****
--- 37,46 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 01:34:43,753	[INFO]	487	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:34:43,754	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,53 ****
--- 37,46 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 01:34:44,694	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:34:45,667	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:34:46,662	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:34:47,646	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:34:50,919	[INFO]	492	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:34:50,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:34:51,863	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:34:52,822	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:34:52,824	[INFO]	495	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:34:52,824	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:34:53,764	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:34:53,765	[INFO]	497	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:34:53,766	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:34:53,767	[INFO]	498	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:34:53,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:34:53,768	[INFO]	499	SUCCESS	+2.0	
2020-12-20 01:34:53,768	[DEBUG]	
2020-12-20 01:34:57,182	[INFO]	500	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:34:57,184	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 01:34:57,185	[INFO]	==== END ====
2020-12-20 01:34:57,185	[INFO]	Reason: step budget
2020-12-20 01:34:57,186	[INFO]	
2020-12-20 01:34:57,187	[INFO]	========== EPOCH 2 ==========
2020-12-20 01:34:57,187	[INFO]	==== WARMUP ====
2020-12-20 01:35:00,450	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:35:00,450	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:35:03,772	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:35:03,772	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:35:07,068	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:35:07,069	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:35:10,358	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 01:35:10,358	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:35:10,358	[INFO]	==== START ====
2020-12-20 01:35:11,381	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:35:14,720	[INFO]	2	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:35:14,721	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:35:15,723	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:35:15,724	[INFO]	4	SUCCESS	+2.0	
2020-12-20 01:35:15,725	[DEBUG]	
2020-12-20 01:35:16,757	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:35:17,794	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:35:18,789	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:35:19,821	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:35:20,867	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:35:24,246	[INFO]	10	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:35:25,282	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:35:26,331	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:35:27,360	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:35:28,394	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:35:29,411	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:35:30,472	[INFO]	16	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:35:31,494	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:35:32,472	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:35:33,523	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:35:34,591	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:35:35,729	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:35:36,766	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:35:40,144	[INFO]	23	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:35:40,145	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 01:35:41,220	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:35:41,223	[INFO]	25	SUCCESS	+2.0	
2020-12-20 01:35:41,224	[DEBUG]	
2020-12-20 01:35:41,226	[INFO]	26	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:35:41,227	[DEBUG]	
2020-12-20 01:35:41,228	[INFO]	27	SUCCESS	+2.0	
2020-12-20 01:35:41,229	[DEBUG]	
2020-12-20 01:35:44,589	[INFO]	28	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:35:44,590	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 01:35:47,922	[INFO]	29	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:35:48,925	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:35:48,926	[INFO]	31	SUCCESS	+2.0	
2020-12-20 01:35:48,926	[DEBUG]	
2020-12-20 01:35:49,944	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:35:50,967	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:35:52,014	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:35:55,409	[INFO]	35	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:35:55,411	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:35:55,411	[INFO]	36	SUCCESS	+2.0	
2020-12-20 01:35:55,412	[DEBUG]	
2020-12-20 01:35:56,446	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:35:57,474	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:35:58,452	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:35:59,485	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:36:00,507	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:36:03,886	[INFO]	42	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:36:03,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:36:04,869	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:36:05,907	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:36:05,909	[INFO]	45	SUCCESS	+2.0	
2020-12-20 01:36:05,910	[DEBUG]	
2020-12-20 01:36:05,911	[INFO]	46	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:36:05,912	[DEBUG]	
2020-12-20 01:36:06,935	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:36:06,936	[INFO]	48	SUCCESS	+2.0	
2020-12-20 01:36:06,937	[DEBUG]	
2020-12-20 01:36:07,962	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:36:08,966	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:36:10,015	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:36:11,029	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:36:12,032	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:36:15,387	[INFO]	54	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:36:15,388	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:36:16,397	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:36:17,310	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:36:17,311	[INFO]	57	SUCCESS	+2.0	
2020-12-20 01:36:17,312	[DEBUG]	
2020-12-20 01:36:20,632	[INFO]	58	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:36:21,655	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:36:25,055	[INFO]	60	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:36:25,057	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:36:26,032	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:36:26,033	[INFO]	62	SUCCESS	+2.0	
2020-12-20 01:36:26,034	[DEBUG]	
2020-12-20 01:36:27,017	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:36:30,406	[INFO]	64	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:36:30,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 01:36:30,408	[INFO]	65	SUCCESS	+2.0	
2020-12-20 01:36:30,408	[DEBUG]	
2020-12-20 01:36:31,395	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:36:34,737	[INFO]	67	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:36:34,738	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:36:34,739	[INFO]	68	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:36:34,740	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:36:35,661	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:36:36,705	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:36:36,707	[INFO]	71	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:36:36,708	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:36:51,782	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:36:52,615	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:36:52,617	[INFO]	74	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:36:52,617	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:36:52,618	[INFO]	75	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:36:52,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:36:52,619	[INFO]	76	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:36:52,620	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:36:52,620	[INFO]	77	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:36:52,621	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:36:52,622	[INFO]	78	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:36:52,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:36:52,623	[INFO]	79	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:36:52,623	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:36:52,624	[INFO]	80	SUCCESS	+2.0	
2020-12-20 01:36:52,624	[DEBUG]	
2020-12-20 01:36:53,527	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:36:54,435	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:36:57,396	[INFO]	83	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:36:57,397	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:36:58,396	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:36:58,398	[INFO]	85	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:36:58,399	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:37:01,890	[INFO]	86	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:37:01,891	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
! 
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:37:02,862	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:37:03,884	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:37:04,886	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:37:08,251	[INFO]	90	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:37:08,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,43 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
          return Integer.MAX_VALUE;
      }
--- 30,45 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
! 
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         unvisitedNodes.put(startnode, 0);
  
          return Integer.MAX_VALUE;
      }

2020-12-20 01:37:08,254	[INFO]	91	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:37:08,254	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
! 
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:37:08,255	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:37:09,262	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:37:09,266	[INFO]	94	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:37:09,268	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
! 
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:37:10,335	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:37:10,339	[INFO]	96	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:37:10,341	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
! 
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:37:13,702	[INFO]	97	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:37:17,094	[INFO]	98	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:37:17,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 01:37:17,096	[INFO]	99	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:37:17,096	[DEBUG]	
2020-12-20 01:37:20,431	[INFO]	100	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:37:20,432	[INFO]	101	SUCCESS	+2.0	
2020-12-20 01:37:20,433	[DEBUG]	
2020-12-20 01:37:21,410	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:37:22,394	[INFO]	103	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:37:25,819	[INFO]	104	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:37:25,820	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:37:25,821	[INFO]	105	SUCCESS	+2.0	
2020-12-20 01:37:25,821	[DEBUG]	
2020-12-20 01:37:26,811	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:37:27,921	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:37:28,977	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:37:30,012	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:37:33,387	[INFO]	110	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:37:33,388	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 01:37:33,388	[INFO]	111	SUCCESS	+2.0	
2020-12-20 01:37:33,389	[DEBUG]	
2020-12-20 01:37:48,457	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:37:49,355	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:37:50,290	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:37:51,202	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:37:52,135	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:37:53,029	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:37:54,006	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:37:55,015	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:37:58,435	[INFO]	120	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:37:58,436	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 01:37:59,441	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:37:59,442	[INFO]	122	SUCCESS	+2.0	
2020-12-20 01:37:59,442	[DEBUG]	
2020-12-20 01:38:00,500	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:38:01,581	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:38:04,916	[INFO]	125	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:38:04,917	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 01:38:04,919	[INFO]	126	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:38:04,919	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 01:38:05,964	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:38:05,965	[INFO]	128	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:38:05,966	[DEBUG]	
2020-12-20 01:38:06,982	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:38:06,985	[INFO]	130	SUCCESS	+2.0	
2020-12-20 01:38:06,986	[DEBUG]	
2020-12-20 01:38:08,021	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:38:09,073	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:38:10,073	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:38:11,091	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:38:12,120	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:38:13,119	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:38:14,113	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:38:15,118	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:38:16,183	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:38:17,166	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:38:18,244	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:38:19,226	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:38:20,258	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:38:21,276	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:38:22,306	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:38:23,309	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:38:24,342	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:38:25,368	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:38:26,341	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:38:27,384	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:38:28,397	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:38:29,396	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:38:30,431	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:38:33,817	[INFO]	154	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:38:34,785	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:38:35,739	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:38:36,766	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:38:37,816	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:38:38,857	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:38:39,879	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:38:40,894	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:38:44,236	[INFO]	162	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:38:44,237	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-20 01:38:44,238	[INFO]	163	SUCCESS	+2.0	
2020-12-20 01:38:44,238	[DEBUG]	
2020-12-20 01:38:45,234	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:38:46,248	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:38:47,254	[INFO]	166	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:38:48,284	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:38:49,326	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:38:52,683	[INFO]	169	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:38:52,684	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 01:38:52,685	[INFO]	170	SUCCESS	+2.0	
2020-12-20 01:38:52,685	[DEBUG]	
2020-12-20 01:38:53,679	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:38:54,616	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:38:55,650	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:38:58,952	[INFO]	174	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:38:58,953	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 01:39:00,025	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:39:01,046	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:39:01,049	[INFO]	177	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:39:01,049	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 01:39:02,050	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:39:02,051	[INFO]	179	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:39:02,052	[DEBUG]	
2020-12-20 01:39:02,052	[INFO]	180	SUCCESS	+2.0	
2020-12-20 01:39:02,053	[DEBUG]	
2020-12-20 01:39:05,469	[INFO]	181	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:39:06,493	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:39:07,489	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:39:10,972	[INFO]	184	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:39:10,974	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:39:10,976	[INFO]	185	SUCCESS	+2.0	
2020-12-20 01:39:10,977	[DEBUG]	
2020-12-20 01:39:11,972	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:39:13,024	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:39:14,046	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:39:15,033	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:39:18,440	[INFO]	190	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:39:18,441	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:39:18,441	[INFO]	191	SUCCESS	+2.0	
2020-12-20 01:39:18,442	[DEBUG]	
2020-12-20 01:39:21,723	[INFO]	192	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:39:21,724	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 01:39:21,725	[INFO]	193	SUCCESS	+2.0	
2020-12-20 01:39:21,725	[DEBUG]	
2020-12-20 01:39:22,753	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:39:23,780	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:39:24,807	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:39:25,809	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:39:26,860	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:39:27,880	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:39:27,882	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:39:28,918	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:39:32,227	[INFO]	202	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:39:33,216	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:39:34,255	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:39:35,321	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:39:36,358	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:39:37,313	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:39:38,350	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:39:39,366	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:39:40,382	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:39:41,386	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:39:42,399	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:39:43,407	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:39:44,408	[INFO]	214	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:39:45,407	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:39:46,409	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:39:49,761	[INFO]	217	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:39:49,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:39:50,760	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:39:51,810	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:39:55,109	[INFO]	220	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:39:55,110	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:39:56,110	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:39:56,113	[INFO]	222	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:39:56,114	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:39:56,115	[INFO]	223	SUCCESS	+2.0	
2020-12-20 01:39:56,116	[DEBUG]	
2020-12-20 01:39:57,132	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:40:00,534	[INFO]	225	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:40:00,534	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 01:40:00,535	[INFO]	226	SUCCESS	+2.0	
2020-12-20 01:40:00,535	[DEBUG]	
2020-12-20 01:40:01,486	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:40:02,461	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:40:03,480	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:40:04,487	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:40:05,496	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:40:06,551	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:40:10,013	[INFO]	233	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:40:10,014	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 01:40:10,998	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:40:11,000	[INFO]	235	SUCCESS	+2.0	
2020-12-20 01:40:11,001	[DEBUG]	
2020-12-20 01:40:11,993	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:40:13,003	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:40:14,018	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:40:15,010	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:40:16,010	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:40:17,007	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:40:18,025	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:40:19,040	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:40:20,081	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:40:21,112	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:40:22,051	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:40:23,090	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:40:24,104	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:40:25,129	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:40:26,148	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:40:27,183	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:40:42,273	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:40:45,358	[INFO]	253	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:40:45,358	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:40:46,287	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:40:47,295	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:40:48,304	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:40:49,311	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:40:49,313	[INFO]	258	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:40:49,314	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:41:04,386	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:41:05,313	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:41:05,317	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:41:05,319	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:41:05,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:41:08,450	[INFO]	263	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:41:08,451	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 31,36 ****
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:41:09,366	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:41:12,602	[INFO]	265	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:41:12,603	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,36 ****
--- 21,39 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:41:16,006	[INFO]	266	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:41:16,008	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,36 ****
--- 21,39 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 44,49 ****
--- 47,53 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 01:41:16,009	[INFO]	267	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:41:16,010	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,36 ****
--- 21,39 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:41:16,011	[INFO]	268	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:41:16,012	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,36 ****
--- 21,39 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:41:19,252	[INFO]	269	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:41:19,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,31 ****
--- 21,33 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 01:41:20,296	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:41:23,775	[INFO]	271	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:41:23,776	[INFO]	272	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:41:23,777	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,31 ****
--- 21,33 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 01:41:23,777	[INFO]	273	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:41:23,778	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:41:23,778	[INFO]	274	SUCCESS	+2.0	
2020-12-20 01:41:23,779	[DEBUG]	
2020-12-20 01:41:24,764	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:41:27,991	[INFO]	276	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:41:27,992	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:41:27,993	[INFO]	277	SUCCESS	+2.0	
2020-12-20 01:41:27,993	[DEBUG]	
2020-12-20 01:41:28,990	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:41:30,006	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:41:33,491	[INFO]	280	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-20 01:41:34,454	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:41:35,424	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:41:36,429	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:41:37,476	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:41:40,955	[INFO]	285	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:41:40,956	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:41:44,358	[INFO]	286	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:41:44,359	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:41:47,697	[INFO]	287	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:41:47,698	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 01:41:48,708	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:41:48,709	[INFO]	289	SUCCESS	+2.0	
2020-12-20 01:41:48,709	[DEBUG]	
2020-12-20 01:41:49,714	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:41:53,065	[INFO]	291	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:41:53,066	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:41:54,048	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:41:54,049	[INFO]	293	SUCCESS	+2.0	
2020-12-20 01:41:54,049	[DEBUG]	
2020-12-20 01:41:57,302	[INFO]	294	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:41:57,303	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 01:42:00,730	[INFO]	295	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:42:00,732	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 49,54 ****
--- 50,56 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 01:42:00,733	[INFO]	296	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:42:00,734	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 01:42:01,740	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:42:05,105	[INFO]	298	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:42:05,106	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 49,54 ****
--- 51,57 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 01:42:08,416	[INFO]	299	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:42:08,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:42:08,418	[INFO]	300	SUCCESS	+2.0	
2020-12-20 01:42:08,418	[DEBUG]	
2020-12-20 01:42:09,454	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:42:10,436	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:42:11,469	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:42:14,831	[INFO]	304	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:42:14,832	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-20 01:42:14,833	[INFO]	305	SUCCESS	+2.0	
2020-12-20 01:42:14,833	[DEBUG]	
2020-12-20 01:42:15,855	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:42:16,876	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:42:17,891	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:42:18,937	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:42:18,941	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:42:18,942	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 01:42:18,943	[INFO]	311	SUCCESS	+2.0	
2020-12-20 01:42:18,944	[DEBUG]	
2020-12-20 01:42:19,967	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:42:20,991	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:42:22,052	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:42:23,010	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:42:26,403	[INFO]	316	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:42:26,404	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:42:27,387	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:42:27,388	[INFO]	318	SUCCESS	+2.0	
2020-12-20 01:42:27,389	[DEBUG]	
2020-12-20 01:42:28,455	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:42:29,480	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:42:30,484	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:42:33,834	[INFO]	322	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:42:33,835	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:42:37,222	[INFO]	323	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:42:37,223	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:42:38,191	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:42:39,205	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:42:40,216	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:42:41,169	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:42:42,208	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:42:43,191	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:42:44,218	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:42:44,219	[INFO]	331	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:42:44,220	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:42:44,220	[INFO]	332	SUCCESS	+2.0	
2020-12-20 01:42:44,221	[DEBUG]	
2020-12-20 01:42:45,264	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:42:46,283	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:42:47,344	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:42:48,381	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:43:03,463	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:43:06,470	[INFO]	338	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:43:07,347	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:43:08,256	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:43:11,648	[INFO]	341	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 01:43:11,648	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 01:43:11,649	[INFO]	342	SUCCESS	+2.0	
2020-12-20 01:43:11,650	[DEBUG]	
2020-12-20 01:43:12,644	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:43:16,101	[INFO]	344	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:43:16,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:43:17,066	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-20 01:43:17,069	[INFO]	346	SUCCESS	+2.0	
2020-12-20 01:43:17,069	[DEBUG]	
2020-12-20 01:43:18,074	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:43:19,091	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:43:20,127	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:43:21,122	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:43:22,182	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:43:23,216	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:43:24,305	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:43:25,366	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:43:26,398	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:43:27,422	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:43:28,458	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:43:29,495	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:43:30,496	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:43:31,550	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:43:34,906	[INFO]	361	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:43:34,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:43:34,907	[INFO]	362	SUCCESS	+2.0	
2020-12-20 01:43:34,908	[DEBUG]	
2020-12-20 01:43:35,913	[INFO]	363	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:43:36,951	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:43:40,289	[INFO]	365	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:43:40,290	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:43:40,291	[INFO]	366	SUCCESS	+2.0	
2020-12-20 01:43:40,291	[DEBUG]	
2020-12-20 01:43:41,285	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:43:42,306	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:43:43,357	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:43:43,361	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:43:44,416	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:43:45,423	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:43:48,882	[INFO]	373	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:43:48,884	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:43:48,886	[INFO]	374	SUCCESS	+2.0	
2020-12-20 01:43:48,886	[DEBUG]	
2020-12-20 01:43:49,901	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:43:53,321	[INFO]	376	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:43:53,322	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 01:43:53,323	[INFO]	377	SUCCESS	+2.0	
2020-12-20 01:43:53,324	[DEBUG]	
2020-12-20 01:43:54,299	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:43:55,426	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:43:56,454	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:43:57,442	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:44:00,822	[INFO]	382	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:44:04,182	[INFO]	383	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:44:04,183	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 01:44:05,189	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:44:05,191	[INFO]	385	SUCCESS	+2.0	
2020-12-20 01:44:05,191	[DEBUG]	
2020-12-20 01:44:06,210	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:44:07,213	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:44:08,163	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:44:09,147	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:44:10,163	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:44:11,145	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:44:14,597	[INFO]	392	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:44:14,598	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:44:15,606	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:44:16,642	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:44:16,643	[INFO]	395	SUCCESS	+2.0	
2020-12-20 01:44:16,643	[DEBUG]	
2020-12-20 01:44:17,686	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:44:18,639	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:44:19,677	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:44:20,680	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:44:20,682	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:44:21,691	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:44:22,744	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:44:23,752	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:44:24,761	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:44:24,762	[INFO]	405	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:44:24,762	[DEBUG]	
2020-12-20 01:44:24,763	[INFO]	406	SUCCESS	+2.0	
2020-12-20 01:44:24,763	[DEBUG]	
2020-12-20 01:44:28,050	[INFO]	407	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:44:28,051	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 01:44:28,051	[INFO]	408	SUCCESS	+2.0	
2020-12-20 01:44:28,052	[DEBUG]	
2020-12-20 01:44:29,098	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:44:30,141	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:44:31,101	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:44:32,160	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:44:33,182	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:44:34,247	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:44:35,226	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:44:36,268	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:44:37,326	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:44:38,366	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:44:39,416	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:44:40,423	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:44:41,436	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:44:42,459	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:44:43,467	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:44:44,494	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:44:45,499	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:44:46,529	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:44:50,004	[INFO]	427	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:44:50,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 01:44:50,980	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:44:52,009	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:44:52,012	[INFO]	430	SUCCESS	+2.0	
2020-12-20 01:44:52,012	[DEBUG]	
2020-12-20 01:44:53,050	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:44:54,067	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:44:55,065	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:44:56,086	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:44:57,078	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:44:58,110	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:44:59,131	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:45:00,469	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:45:03,811	[INFO]	439	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:45:03,812	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 01:45:07,212	[INFO]	440	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:45:07,213	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 01:45:10,536	[INFO]	441	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:45:10,537	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:45:13,883	[INFO]	442	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:45:13,884	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:45:14,873	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:45:14,874	[INFO]	444	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:45:14,875	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:45:15,902	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:45:30,979	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:45:30,980	[INFO]	447	SUCCESS	+2.0	
2020-12-20 01:45:30,980	[DEBUG]	
2020-12-20 01:45:31,924	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:45:35,036	[INFO]	449	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:45:36,179	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:45:37,351	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:45:38,393	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:45:39,430	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:45:40,482	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:45:43,813	[INFO]	455	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:45:43,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:45:44,848	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:45:45,867	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:45:46,856	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:45:47,882	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:45:48,938	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:45:48,942	[INFO]	461	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:45:48,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:45:48,945	[INFO]	462	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:45:48,946	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:45:48,948	[INFO]	463	SUCCESS	+2.0	
2020-12-20 01:45:48,949	[DEBUG]	
2020-12-20 01:45:52,256	[INFO]	464	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:45:52,257	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 01:45:52,258	[INFO]	465	SUCCESS	+2.0	
2020-12-20 01:45:52,258	[DEBUG]	
2020-12-20 01:45:53,250	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-20 01:45:54,268	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:45:55,274	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:45:56,366	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:45:57,381	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:46:00,738	[INFO]	471	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:46:00,739	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-20 01:46:00,740	[INFO]	472	SUCCESS	+2.0	
2020-12-20 01:46:00,740	[DEBUG]	
2020-12-20 01:46:04,136	[INFO]	473	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:46:04,137	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 01:46:04,137	[INFO]	474	SUCCESS	+2.0	
2020-12-20 01:46:04,138	[DEBUG]	
2020-12-20 01:46:05,090	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:46:06,123	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:46:09,523	[INFO]	477	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:46:09,524	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:46:09,524	[INFO]	478	SUCCESS	+2.0	
2020-12-20 01:46:09,525	[DEBUG]	
2020-12-20 01:46:10,552	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:46:25,651	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:46:28,644	[INFO]	481	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-20 01:46:29,551	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:46:30,569	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:46:31,614	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:46:32,626	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:46:36,169	[INFO]	486	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:46:36,170	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 01:46:36,171	[INFO]	487	SUCCESS	+2.0	
2020-12-20 01:46:36,171	[DEBUG]	
2020-12-20 01:46:37,138	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:46:38,197	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:46:39,225	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:46:40,292	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:46:41,340	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:46:42,355	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:46:42,359	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:46:45,792	[INFO]	495	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:46:45,794	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 01:46:45,796	[INFO]	496	SUCCESS	+2.0	
2020-12-20 01:46:45,796	[DEBUG]	
2020-12-20 01:46:46,839	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:46:47,883	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:46:47,886	[INFO]	499	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-20 01:46:47,887	[DEBUG]	
2020-12-20 01:46:48,899	[INFO]	500	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 01:46:48,899	[INFO]	==== END ====
2020-12-20 01:46:48,899	[INFO]	Reason: step budget
2020-12-20 01:46:48,900	[INFO]	
2020-12-20 01:46:48,900	[INFO]	========== EPOCH 3 ==========
2020-12-20 01:46:48,900	[INFO]	==== WARMUP ====
2020-12-20 01:46:52,301	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:46:52,302	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:46:55,567	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:46:55,567	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:46:58,844	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:46:58,845	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:47:02,157	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 01:47:02,157	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:47:02,157	[INFO]	==== START ====
2020-12-20 01:47:03,169	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:47:04,202	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:47:07,554	[INFO]	3	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:47:07,555	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 01:47:08,511	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:47:09,551	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:47:10,587	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:47:11,640	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:47:12,653	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:47:12,654	[INFO]	9	SUCCESS	+2.0	
2020-12-20 01:47:12,654	[DEBUG]	
2020-12-20 01:47:13,723	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:47:14,700	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:47:15,747	[INFO]	12	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 01:47:16,770	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:47:17,792	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:47:18,833	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:47:19,864	[INFO]	16	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:47:20,852	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:47:21,878	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:47:22,903	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:47:23,912	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:47:24,948	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:47:40,042	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:47:40,949	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:47:41,870	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:47:42,800	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:47:45,889	[INFO]	26	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:47:45,891	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 01:47:46,961	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:47:46,963	[INFO]	28	SUCCESS	+2.0	
2020-12-20 01:47:46,963	[DEBUG]	
2020-12-20 01:47:47,988	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:47:51,419	[INFO]	30	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:47:51,420	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 01:47:52,428	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:47:52,429	[INFO]	32	SUCCESS	+2.0	
2020-12-20 01:47:52,429	[DEBUG]	
2020-12-20 01:47:53,469	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:47:54,462	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:47:55,545	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:47:56,528	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:47:57,571	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:47:58,570	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:47:59,602	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:48:00,637	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:48:03,938	[INFO]	41	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:48:03,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 01:48:03,940	[INFO]	42	SUCCESS	+2.0	
2020-12-20 01:48:03,940	[DEBUG]	
2020-12-20 01:48:04,917	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:48:05,937	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:48:06,938	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:48:07,937	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:48:08,977	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:48:09,981	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:48:11,006	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:48:12,010	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:48:15,400	[INFO]	51	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:48:15,401	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 01:48:15,402	[INFO]	52	SUCCESS	+2.0	
2020-12-20 01:48:15,403	[DEBUG]	
2020-12-20 01:48:16,436	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:48:19,745	[INFO]	54	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:48:19,747	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-20 01:48:19,747	[INFO]	55	SUCCESS	+2.0	
2020-12-20 01:48:19,748	[DEBUG]	
2020-12-20 01:48:20,727	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:48:21,747	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:48:22,766	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:48:23,776	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:48:27,193	[INFO]	60	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:48:27,194	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:48:28,204	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:48:29,283	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:48:29,285	[INFO]	63	SUCCESS	+2.0	
2020-12-20 01:48:29,285	[DEBUG]	
2020-12-20 01:48:30,343	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:48:31,380	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:48:32,426	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:48:33,430	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:48:34,497	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:48:35,531	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:48:36,566	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:48:37,591	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:48:38,639	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:48:39,669	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:48:40,702	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:48:55,762	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:48:56,648	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:48:57,581	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:48:58,591	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:48:59,545	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:49:00,429	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:49:01,371	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:49:02,285	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:49:03,234	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:49:04,218	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:49:05,268	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:49:06,307	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:49:07,329	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:49:08,345	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:49:09,378	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:49:10,373	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:49:11,414	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:49:12,493	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:49:15,872	[INFO]	93	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:49:15,872	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:49:15,873	[INFO]	94	SUCCESS	+2.0	
2020-12-20 01:49:15,874	[DEBUG]	
2020-12-20 01:49:16,890	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:49:17,931	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:49:18,955	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:49:19,979	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:49:20,972	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:49:24,360	[INFO]	100	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:49:24,361	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 01:49:24,362	[INFO]	101	SUCCESS	+2.0	
2020-12-20 01:49:24,362	[DEBUG]	
2020-12-20 01:49:27,766	[INFO]	102	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:49:27,769	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:49:27,770	[INFO]	103	SUCCESS	+2.0	
2020-12-20 01:49:27,771	[DEBUG]	
2020-12-20 01:49:28,787	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:49:29,828	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:49:30,881	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:49:31,921	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:49:32,945	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:49:34,308	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:49:36,301	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:49:37,322	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:49:37,323	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:49:38,330	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:49:39,355	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:49:40,384	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:49:41,378	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:49:42,400	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:49:43,434	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:49:44,712	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:49:45,884	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:49:49,553	[INFO]	121	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:49:49,554	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:49:50,545	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:49:50,547	[INFO]	123	SUCCESS	+2.0	
2020-12-20 01:49:50,548	[DEBUG]	
2020-12-20 01:49:51,584	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:49:52,607	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:49:53,615	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:49:54,629	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:49:55,640	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:49:58,947	[INFO]	129	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:49:58,949	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:49:59,955	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:50:01,003	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:50:01,004	[INFO]	132	SUCCESS	+2.0	
2020-12-20 01:50:01,004	[DEBUG]	
2020-12-20 01:50:02,024	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:50:03,039	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:50:04,087	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:50:05,113	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:50:08,552	[INFO]	137	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:50:09,510	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:50:10,485	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:50:11,486	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:50:12,514	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:50:12,516	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:50:13,545	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:50:16,890	[INFO]	144	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:50:17,910	[INFO]	145	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:50:18,923	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:50:19,937	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:50:20,952	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:50:21,970	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:50:22,980	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:50:24,010	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:50:25,070	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:50:26,133	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:50:27,181	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:50:28,209	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:50:29,204	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:50:30,219	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:50:31,285	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:50:32,289	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:50:33,306	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:50:37,341	[INFO]	161	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:50:37,342	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 01:50:37,343	[INFO]	162	SUCCESS	+2.0	
2020-12-20 01:50:37,343	[DEBUG]	
2020-12-20 01:50:52,420	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:50:53,316	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:50:56,379	[INFO]	165	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:50:56,380	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 01:50:57,365	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:50:57,366	[INFO]	167	SUCCESS	+2.0	
2020-12-20 01:50:57,367	[DEBUG]	
2020-12-20 01:50:58,390	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:50:58,392	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:51:01,792	[INFO]	170	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:51:01,793	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 01:51:02,813	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:51:02,814	[INFO]	172	SUCCESS	+2.0	
2020-12-20 01:51:02,814	[DEBUG]	
2020-12-20 01:51:03,945	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:51:04,978	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:51:08,331	[INFO]	175	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:51:08,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 01:51:08,333	[INFO]	176	SUCCESS	+2.0	
2020-12-20 01:51:08,333	[DEBUG]	
2020-12-20 01:51:09,339	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:51:10,355	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:51:11,380	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:51:12,412	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:51:13,392	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:51:16,696	[INFO]	182	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:51:16,697	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 01:51:17,707	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:51:18,737	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:51:18,738	[INFO]	185	SUCCESS	+2.0	
2020-12-20 01:51:18,738	[DEBUG]	
2020-12-20 01:51:19,776	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:51:19,777	[INFO]	187	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-20 01:51:19,777	[DEBUG]	
2020-12-20 01:51:19,778	[INFO]	188	SUCCESS	+2.0	
2020-12-20 01:51:19,778	[DEBUG]	
2020-12-20 01:51:20,819	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:51:21,911	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:51:22,950	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:51:23,996	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:51:24,984	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:51:26,016	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:51:26,958	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:51:27,968	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:51:28,979	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:51:30,035	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:51:33,538	[INFO]	199	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:51:33,540	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Set<Node> visitedNodes = new HashSet<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 01:51:34,577	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:51:35,579	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:51:35,581	[INFO]	202	SUCCESS	+2.0	
2020-12-20 01:51:35,582	[DEBUG]	
2020-12-20 01:51:36,638	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:51:40,058	[INFO]	204	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:51:40,060	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 01:51:41,027	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:51:41,028	[INFO]	206	SUCCESS	+2.0	
2020-12-20 01:51:41,028	[DEBUG]	
2020-12-20 01:51:41,985	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:51:43,028	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:51:43,031	[INFO]	209	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:51:43,031	[DEBUG]	
2020-12-20 01:51:43,033	[INFO]	210	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-20 01:51:43,034	[DEBUG]	
2020-12-20 01:51:43,035	[INFO]	211	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-20 01:51:43,035	[DEBUG]	
2020-12-20 01:51:43,036	[INFO]	212	SUCCESS	+2.0	
2020-12-20 01:51:43,037	[DEBUG]	
2020-12-20 01:51:44,090	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:51:47,534	[INFO]	214	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:51:47,535	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:51:48,513	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:51:49,530	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:51:49,531	[INFO]	217	SUCCESS	+2.0	
2020-12-20 01:51:49,531	[DEBUG]	
2020-12-20 01:51:52,886	[INFO]	218	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:51:52,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 01:51:53,882	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:51:54,926	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:51:55,942	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:51:55,943	[INFO]	222	SUCCESS	+2.0	
2020-12-20 01:51:55,943	[DEBUG]	
2020-12-20 01:51:59,229	[INFO]	223	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-20 01:51:59,229	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:51:59,230	[INFO]	224	SUCCESS	+2.0	
2020-12-20 01:51:59,231	[DEBUG]	
2020-12-20 01:52:02,600	[INFO]	225	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:52:03,580	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:52:04,609	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:52:05,625	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:52:06,664	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:52:06,667	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:52:07,721	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:52:08,744	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:52:09,754	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:52:10,820	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:52:11,841	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:52:12,837	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:52:12,839	[INFO]	237	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:52:12,839	[DEBUG]	
2020-12-20 01:52:12,840	[INFO]	238	SUCCESS	+2.0	
2020-12-20 01:52:12,840	[DEBUG]	
2020-12-20 01:52:13,846	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:52:14,906	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:52:29,965	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:52:30,882	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:52:31,806	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:52:32,737	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:52:35,758	[INFO]	245	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:52:35,759	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 01:52:35,760	[INFO]	246	SUCCESS	+2.0	
2020-12-20 01:52:35,760	[DEBUG]	
2020-12-20 01:52:36,767	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:52:37,838	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:52:38,887	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:52:39,962	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:52:40,982	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:52:41,981	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:52:43,003	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:52:44,053	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:52:45,082	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:52:46,127	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:52:47,130	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:52:48,145	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:52:49,186	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:52:52,585	[INFO]	260	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:52:52,586	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-20 01:52:55,899	[INFO]	261	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:52:55,900	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,32 ****
--- 23,38 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-20 01:52:55,901	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:52:55,901	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-20 01:52:55,902	[INFO]	263	SUCCESS	+2.0	
2020-12-20 01:52:55,902	[DEBUG]	
2020-12-20 01:52:56,909	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:52:57,927	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:52:58,944	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:52:59,991	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:53:03,405	[INFO]	268	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:53:03,406	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:53:06,759	[INFO]	269	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:53:06,760	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:53:06,761	[INFO]	270	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:53:06,761	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:53:06,762	[INFO]	271	SUCCESS	+2.0	
2020-12-20 01:53:06,762	[DEBUG]	
2020-12-20 01:53:07,741	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:53:08,735	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:53:09,745	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:53:10,779	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:53:14,174	[INFO]	276	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:53:14,175	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 01:53:14,175	[INFO]	277	SUCCESS	+2.0	
2020-12-20 01:53:14,176	[DEBUG]	
2020-12-20 01:53:15,171	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:53:16,167	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:53:19,596	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:53:19,596	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 01:53:19,597	[INFO]	281	SUCCESS	+2.0	
2020-12-20 01:53:19,597	[DEBUG]	
2020-12-20 01:53:20,553	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:53:21,571	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:53:22,577	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:53:25,854	[INFO]	285	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:53:25,855	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:53:25,856	[INFO]	286	SUCCESS	+2.0	
2020-12-20 01:53:25,856	[DEBUG]	
2020-12-20 01:53:26,869	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:53:27,911	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:53:28,966	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:53:32,293	[INFO]	290	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:53:32,294	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 01:53:32,295	[INFO]	291	SUCCESS	+2.0	
2020-12-20 01:53:32,295	[DEBUG]	
2020-12-20 01:53:33,301	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:53:34,331	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:53:37,778	[INFO]	294	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:53:37,778	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:53:38,703	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:53:42,050	[INFO]	296	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:53:42,051	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,33 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 21,35 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:53:45,338	[INFO]	297	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:53:45,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-20 01:53:46,349	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:53:46,350	[INFO]	299	SUCCESS	+2.0	
2020-12-20 01:53:46,350	[DEBUG]	
2020-12-20 01:53:47,388	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:53:50,701	[INFO]	301	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:53:50,702	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-20 01:53:51,688	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:53:52,726	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:53:53,755	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:53:53,756	[INFO]	305	SUCCESS	+2.0	
2020-12-20 01:53:53,757	[DEBUG]	
2020-12-20 01:53:54,815	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:53:55,874	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:53:56,879	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:53:57,912	[INFO]	309	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:54:01,252	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:54:01,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-20 01:54:01,254	[INFO]	311	SUCCESS	+2.0	
2020-12-20 01:54:01,254	[DEBUG]	
2020-12-20 01:54:02,272	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:54:03,266	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:54:04,225	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:54:07,571	[INFO]	315	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:54:08,550	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:54:09,571	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:54:10,581	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:54:13,932	[INFO]	319	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:54:13,933	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:54:13,934	[INFO]	320	SUCCESS	+2.0	
2020-12-20 01:54:13,934	[DEBUG]	
2020-12-20 01:54:14,938	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:54:15,987	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:54:16,978	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:54:18,020	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 01:54:21,319	[INFO]	325	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:54:21,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 01:54:21,321	[INFO]	326	SUCCESS	+2.0	
2020-12-20 01:54:21,322	[DEBUG]	
2020-12-20 01:54:22,263	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:54:23,320	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:54:26,711	[INFO]	329	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:54:26,712	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,40 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:54:30,066	[INFO]	330	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:54:30,067	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,30 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
-             visitedNodes.add(node);
- 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
--- 23,28 ----
***************
*** 37,42 ****
--- 35,42 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 01:54:30,068	[INFO]	331	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 01:54:30,069	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,40 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:54:31,088	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:54:31,090	[INFO]	333	SUCCESS	+2.0	
2020-12-20 01:54:31,090	[DEBUG]	
2020-12-20 01:54:32,147	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:54:33,154	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:54:34,179	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 01:54:35,204	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:54:36,210	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:54:39,601	[INFO]	339	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:54:39,602	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 01:54:39,602	[INFO]	340	SUCCESS	+2.0	
2020-12-20 01:54:39,603	[DEBUG]	
2020-12-20 01:54:40,602	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:54:43,996	[INFO]	342	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:54:43,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:54:45,007	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:54:46,027	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:54:46,030	[INFO]	345	SUCCESS	+2.0	
2020-12-20 01:54:46,030	[DEBUG]	
2020-12-20 01:54:47,058	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:54:50,413	[INFO]	347	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:54:50,414	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:54:51,412	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:54:52,422	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:54:53,420	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:54:53,421	[INFO]	351	SUCCESS	+2.0	
2020-12-20 01:54:53,422	[DEBUG]	
2020-12-20 01:54:56,780	[INFO]	352	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:54:56,781	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:55:00,129	[INFO]	353	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:55:00,130	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
***************
*** 31,36 ****
--- 33,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:55:00,131	[INFO]	354	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:55:00,132	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:55:03,525	[INFO]	355	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:55:03,527	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 31,36 ****
--- 33,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:55:04,501	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:55:04,502	[INFO]	357	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:55:04,503	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:55:05,484	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:55:06,582	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:55:06,585	[INFO]	360	SUCCESS	+2.0	
2020-12-20 01:55:06,585	[DEBUG]	
2020-12-20 01:55:07,632	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:55:08,642	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:55:11,996	[INFO]	363	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:55:11,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:55:11,998	[INFO]	364	SUCCESS	+2.0	
2020-12-20 01:55:11,998	[DEBUG]	
2020-12-20 01:55:13,004	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:55:14,008	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:55:14,992	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:55:15,986	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:55:17,012	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:55:18,035	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 01:55:18,038	[INFO]	371	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-20 01:55:18,039	[DEBUG]	
2020-12-20 01:55:18,040	[INFO]	372	SUCCESS	+2.0	
2020-12-20 01:55:18,041	[DEBUG]	
2020-12-20 01:55:19,043	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:55:19,044	[INFO]	374	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:55:19,045	[DEBUG]	
2020-12-20 01:55:19,046	[INFO]	375	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:55:19,046	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 01:55:22,426	[INFO]	376	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:55:22,428	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:55:22,429	[INFO]	377	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:55:22,430	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:55:23,444	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:55:24,464	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:55:25,534	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:55:25,535	[INFO]	381	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:55:25,536	[DEBUG]	
2020-12-20 01:55:26,479	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:55:26,482	[INFO]	383	SUCCESS	+2.0	
2020-12-20 01:55:26,483	[DEBUG]	
2020-12-20 01:55:29,770	[INFO]	384	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:55:30,669	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:55:31,677	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:55:35,183	[INFO]	387	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:55:35,184	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:55:35,185	[INFO]	388	SUCCESS	+2.0	
2020-12-20 01:55:35,185	[DEBUG]	
2020-12-20 01:55:36,220	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:55:37,280	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 01:55:38,306	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:55:39,330	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:55:39,331	[INFO]	393	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:55:39,331	[DEBUG]	
2020-12-20 01:55:39,332	[INFO]	394	SUCCESS	+2.0	
2020-12-20 01:55:39,332	[DEBUG]	
2020-12-20 01:55:40,366	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:55:43,782	[INFO]	396	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:55:43,783	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-20 01:55:43,783	[INFO]	397	SUCCESS	+2.0	
2020-12-20 01:55:43,784	[DEBUG]	
2020-12-20 01:55:44,849	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 01:55:45,894	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:55:46,955	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:55:47,978	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:55:51,439	[INFO]	402	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:55:52,392	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:55:53,444	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 01:55:56,815	[INFO]	405	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:55:56,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 01:55:56,817	[INFO]	406	SUCCESS	+2.0	
2020-12-20 01:55:56,817	[DEBUG]	
2020-12-20 01:56:00,203	[INFO]	407	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:56:00,204	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 01:56:01,207	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:56:01,209	[INFO]	409	SUCCESS	+2.0	
2020-12-20 01:56:01,210	[DEBUG]	
2020-12-20 01:56:04,554	[INFO]	410	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:56:04,555	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:56:07,950	[INFO]	411	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:56:07,951	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,33 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:56:07,952	[INFO]	412	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:56:07,952	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 01:56:08,924	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:56:08,925	[INFO]	414	SUCCESS	+2.0	
2020-12-20 01:56:08,926	[DEBUG]	
2020-12-20 01:56:12,382	[INFO]	415	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 01:56:12,383	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 01:56:13,430	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:56:13,432	[INFO]	417	SUCCESS	+2.0	
2020-12-20 01:56:13,432	[DEBUG]	
2020-12-20 01:56:14,403	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:56:15,444	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:56:16,481	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 01:56:17,525	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:56:18,541	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 01:56:19,566	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:56:20,591	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:56:21,602	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:56:22,669	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:56:37,760	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:56:38,683	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:56:41,810	[INFO]	429	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:56:41,811	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 01:56:42,706	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:56:42,707	[INFO]	431	SUCCESS	+2.0	
2020-12-20 01:56:42,707	[DEBUG]	
2020-12-20 01:56:45,948	[INFO]	432	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:56:45,949	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 01:56:45,950	[INFO]	433	SUCCESS	+2.0	
2020-12-20 01:56:45,950	[DEBUG]	
2020-12-20 01:56:46,963	[INFO]	434	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 01:56:48,058	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:57:03,121	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:57:04,042	[INFO]	437	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-20 01:57:04,961	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:57:04,964	[INFO]	439	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:57:04,965	[DEBUG]	
2020-12-20 01:57:05,895	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:57:06,818	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 01:57:06,819	[INFO]	442	SUCCESS	+2.0	
2020-12-20 01:57:06,819	[DEBUG]	
2020-12-20 01:57:09,945	[INFO]	443	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:57:13,302	[INFO]	444	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:57:13,303	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 01:57:13,304	[INFO]	445	SUCCESS	+2.0	
2020-12-20 01:57:13,304	[DEBUG]	
2020-12-20 01:57:14,289	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:57:15,226	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:57:16,266	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:57:17,268	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:57:18,235	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:57:18,237	[INFO]	451	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-20 01:57:18,238	[DEBUG]	
2020-12-20 01:57:19,272	[INFO]	452	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 01:57:20,279	[INFO]	453	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:57:21,315	[INFO]	454	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 01:57:24,755	[INFO]	455	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 01:57:24,756	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 01:57:25,757	[INFO]	456	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:57:26,759	[INFO]	457	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:57:27,824	[INFO]	458	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 01:57:42,906	[INFO]	459	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:57:43,816	[INFO]	460	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:57:44,741	[INFO]	461	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:57:44,744	[INFO]	462	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-20 01:57:44,745	[DEBUG]	
2020-12-20 01:57:45,680	[INFO]	463	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 01:57:46,599	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:57:47,547	[INFO]	465	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:57:48,568	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:57:48,570	[INFO]	467	SUCCESS	+2.0	
2020-12-20 01:57:48,571	[DEBUG]	
2020-12-20 01:57:51,996	[INFO]	468	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-20 01:57:52,994	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 01:57:53,996	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 01:57:55,005	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:57:58,411	[INFO]	472	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 01:57:59,410	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:58:00,408	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:58:03,779	[INFO]	475	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:58:03,782	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-20 01:58:04,808	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 01:58:08,159	[INFO]	477	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:58:08,161	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,32 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-20 01:58:11,497	[INFO]	478	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 01:58:11,498	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:58:14,772	[INFO]	479	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:58:14,773	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,37 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:58:15,764	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:58:19,221	[INFO]	481	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 01:58:19,222	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 01:58:19,223	[INFO]	482	SUCCESS	+2.0	
2020-12-20 01:58:19,223	[DEBUG]	
2020-12-20 01:58:20,190	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 01:58:23,549	[INFO]	484	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:58:23,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:58:26,985	[INFO]	485	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 01:58:26,987	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,39 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:58:26,989	[INFO]	486	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:58:26,990	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:58:30,709	[INFO]	487	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:58:30,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,42 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 01:58:32,036	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 01:58:36,299	[INFO]	489	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:58:36,300	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 01:58:39,591	[INFO]	490	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:58:39,592	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,42 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 01:58:39,593	[INFO]	491	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:58:39,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 01:58:40,536	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:58:40,537	[INFO]	493	SUCCESS	+2.0	
2020-12-20 01:58:40,537	[DEBUG]	
2020-12-20 01:58:41,550	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:58:41,552	[INFO]	495	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 01:58:41,552	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:58:42,603	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:58:43,669	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:58:43,671	[INFO]	498	SUCCESS	+2.0	
2020-12-20 01:58:43,671	[DEBUG]	
2020-12-20 01:58:47,253	[INFO]	499	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:58:47,254	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 01:58:48,219	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:58:48,220	[INFO]	==== END ====
2020-12-20 01:58:48,220	[INFO]	Reason: step budget
2020-12-20 01:58:48,220	[INFO]	
2020-12-20 01:58:48,221	[INFO]	========== EPOCH 4 ==========
2020-12-20 01:58:48,221	[INFO]	==== WARMUP ====
2020-12-20 01:58:51,624	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:58:51,625	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:58:55,013	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:58:55,014	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:58:58,472	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 01:58:58,473	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:59:01,872	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 01:59:01,872	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 01:59:01,872	[INFO]	==== START ====
2020-12-20 01:59:02,952	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 01:59:03,999	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:59:05,014	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:59:06,024	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:59:07,077	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 01:59:08,087	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:59:09,096	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:59:10,164	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:59:11,194	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 01:59:12,249	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 01:59:13,312	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 01:59:14,312	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 01:59:15,318	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 01:59:16,353	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 01:59:17,354	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 01:59:20,664	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 01:59:20,665	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 01:59:21,648	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 01:59:21,649	[INFO]	18	SUCCESS	+2.0	
2020-12-20 01:59:21,650	[DEBUG]	
2020-12-20 01:59:22,648	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 01:59:26,118	[INFO]	20	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 01:59:26,120	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 01:59:27,083	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 01:59:28,103	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 01:59:28,104	[INFO]	23	SUCCESS	+2.0	
2020-12-20 01:59:28,105	[DEBUG]	
2020-12-20 01:59:31,507	[INFO]	24	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 01:59:31,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 01:59:31,509	[INFO]	25	SUCCESS	+2.0	
2020-12-20 01:59:31,509	[DEBUG]	
2020-12-20 01:59:32,488	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 01:59:33,518	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 01:59:34,595	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 01:59:35,608	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:59:39,024	[INFO]	30	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 01:59:39,025	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 01:59:40,009	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 01:59:41,029	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 01:59:41,031	[INFO]	33	SUCCESS	+2.0	
2020-12-20 01:59:41,032	[DEBUG]	
2020-12-20 01:59:42,046	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 01:59:57,127	[INFO]	35	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 01:59:57,954	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 01:59:58,869	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 01:59:59,784	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:00:00,683	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:00:01,569	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:00:02,513	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:00:03,443	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:00:04,515	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:00:05,514	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:00:08,897	[INFO]	45	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:00:08,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-20 02:00:08,899	[INFO]	46	SUCCESS	+2.0	
2020-12-20 02:00:08,899	[DEBUG]	
2020-12-20 02:00:09,896	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:00:10,897	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:00:11,924	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:00:12,951	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:00:16,421	[INFO]	51	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:00:16,422	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 02:00:16,423	[INFO]	52	SUCCESS	+2.0	
2020-12-20 02:00:16,423	[DEBUG]	
2020-12-20 02:00:17,367	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:00:18,370	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:00:19,382	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:00:20,423	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:00:21,368	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:00:22,362	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:00:23,401	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:00:24,439	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:00:25,471	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:00:26,515	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:00:29,827	[INFO]	63	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:00:29,829	[INFO]	64	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:00:29,829	[DEBUG]	
2020-12-20 02:00:29,830	[INFO]	65	SUCCESS	+2.0	
2020-12-20 02:00:29,830	[DEBUG]	
2020-12-20 02:00:33,260	[INFO]	66	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:00:34,282	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:00:35,496	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:00:36,897	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:00:38,066	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:00:39,304	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:00:40,598	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:00:41,649	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:00:41,651	[INFO]	74	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:00:41,651	[DEBUG]	
2020-12-20 02:00:41,652	[INFO]	75	SUCCESS	+2.0	
2020-12-20 02:00:41,652	[DEBUG]	
2020-12-20 02:00:42,721	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:00:43,780	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:00:44,835	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:00:45,854	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:00:46,911	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:00:47,972	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:00:48,989	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:00:50,040	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:00:53,278	[INFO]	84	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:00:53,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:00:53,280	[INFO]	85	SUCCESS	+2.0	
2020-12-20 02:00:53,280	[DEBUG]	
2020-12-20 02:00:54,283	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:00:55,353	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:00:56,393	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:00:56,395	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:00:57,399	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:00:58,412	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:01:01,760	[INFO]	92	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:01:01,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:01:01,764	[INFO]	93	SUCCESS	+2.0	
2020-12-20 02:01:01,765	[DEBUG]	
2020-12-20 02:01:02,803	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:01:06,207	[INFO]	95	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:01:06,208	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 02:01:06,209	[INFO]	96	SUCCESS	+2.0	
2020-12-20 02:01:06,209	[DEBUG]	
2020-12-20 02:01:07,214	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:01:08,202	[INFO]	98	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:01:11,640	[INFO]	99	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:01:11,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:01:11,643	[INFO]	100	SUCCESS	+2.0	
2020-12-20 02:01:11,643	[DEBUG]	
2020-12-20 02:01:12,666	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:01:13,727	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:01:13,729	[INFO]	103	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:01:13,730	[DEBUG]	
2020-12-20 02:01:13,731	[INFO]	104	SUCCESS	+2.0	
2020-12-20 02:01:13,731	[DEBUG]	
2020-12-20 02:01:17,085	[INFO]	105	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:01:17,086	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-20 02:01:17,087	[INFO]	106	SUCCESS	+2.0	
2020-12-20 02:01:17,087	[DEBUG]	
2020-12-20 02:01:18,110	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:01:19,106	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:01:20,108	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:01:21,110	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:01:36,178	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:01:39,235	[INFO]	112	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:01:39,236	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:01:40,115	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:01:41,113	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:01:41,114	[INFO]	115	SUCCESS	+2.0	
2020-12-20 02:01:41,114	[DEBUG]	
2020-12-20 02:01:42,171	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:01:45,608	[INFO]	117	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:01:45,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:01:45,611	[INFO]	118	SUCCESS	+2.0	
2020-12-20 02:01:45,612	[DEBUG]	
2020-12-20 02:01:49,060	[INFO]	119	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:01:50,012	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:01:51,014	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:01:52,026	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:01:55,484	[INFO]	123	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:01:56,467	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:01:57,480	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:01:58,472	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:01:59,483	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:02:00,504	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:02:03,957	[INFO]	129	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:02:03,958	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:02:04,911	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:02:04,912	[INFO]	131	SUCCESS	+2.0	
2020-12-20 02:02:04,912	[DEBUG]	
2020-12-20 02:02:08,404	[INFO]	132	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:02:09,380	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:02:10,371	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:02:11,359	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:02:12,408	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:02:15,759	[INFO]	137	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:02:16,769	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:02:17,761	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:02:17,762	[INFO]	140	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:02:18,798	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:02:19,819	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:02:20,826	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:02:24,188	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:02:24,189	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:02:25,239	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:02:25,242	[INFO]	146	SUCCESS	+2.0	
2020-12-20 02:02:25,242	[DEBUG]	
2020-12-20 02:02:28,571	[INFO]	147	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:02:28,572	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:02:28,573	[INFO]	148	SUCCESS	+2.0	
2020-12-20 02:02:28,573	[DEBUG]	
2020-12-20 02:02:29,534	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:02:30,529	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:02:33,806	[INFO]	151	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:02:33,807	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 02:02:37,065	[INFO]	152	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-20 02:02:37,066	[INFO]	153	SUCCESS	+2.0	
2020-12-20 02:02:37,067	[DEBUG]	
2020-12-20 02:02:38,079	[INFO]	154	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:02:41,438	[INFO]	155	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:02:42,506	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:02:43,555	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:02:44,589	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:02:45,632	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:02:46,681	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:02:47,756	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:02:51,168	[INFO]	162	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:02:51,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:02:51,170	[INFO]	163	SUCCESS	+2.0	
2020-12-20 02:02:51,170	[DEBUG]	
2020-12-20 02:02:52,181	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:02:53,202	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:02:54,220	[INFO]	166	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 02:02:55,278	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:02:58,663	[INFO]	168	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:02:58,665	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:02:59,690	[INFO]	169	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:02:59,693	[INFO]	170	SUCCESS	+2.0	
2020-12-20 02:02:59,694	[DEBUG]	
2020-12-20 02:03:03,048	[INFO]	171	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:03:03,049	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:03:03,050	[INFO]	172	SUCCESS	+2.0	
2020-12-20 02:03:03,050	[DEBUG]	
2020-12-20 02:03:06,464	[INFO]	173	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:03:06,465	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:03:07,423	[INFO]	174	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:03:07,424	[INFO]	175	SUCCESS	+2.0	
2020-12-20 02:03:07,425	[DEBUG]	
2020-12-20 02:03:08,436	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:03:11,799	[INFO]	177	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:03:11,801	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:03:15,128	[INFO]	179	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:03:15,129	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:03:15,130	[INFO]	180	SUCCESS	+2.0	
2020-12-20 02:03:15,130	[DEBUG]	
2020-12-20 02:03:16,174	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:03:17,225	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:03:18,158	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:03:19,170	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:03:22,482	[INFO]	185	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:03:22,483	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:03:23,481	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:03:23,482	[INFO]	187	SUCCESS	+2.0	
2020-12-20 02:03:23,483	[DEBUG]	
2020-12-20 02:03:24,495	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:03:25,523	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:03:26,532	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:03:27,552	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:03:28,545	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:03:29,550	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:03:30,533	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:03:31,575	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:03:34,956	[INFO]	196	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:03:34,956	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-20 02:03:38,365	[INFO]	197	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-20 02:03:38,366	[INFO]	198	SUCCESS	+2.0	
2020-12-20 02:03:38,366	[DEBUG]	
2020-12-20 02:03:41,716	[INFO]	199	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:03:41,717	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-20 02:03:41,718	[INFO]	200	SUCCESS	+2.0	
2020-12-20 02:03:41,718	[DEBUG]	
2020-12-20 02:03:42,705	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:03:46,181	[INFO]	202	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:03:46,182	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:03:46,183	[INFO]	203	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:03:46,183	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:03:47,192	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:03:47,194	[INFO]	205	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:03:47,194	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:03:47,195	[INFO]	206	SUCCESS	+2.0	
2020-12-20 02:03:47,195	[DEBUG]	
2020-12-20 02:03:50,617	[INFO]	207	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:03:50,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:03:51,624	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:03:52,695	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:03:52,696	[INFO]	210	SUCCESS	+2.0	
2020-12-20 02:03:52,697	[DEBUG]	
2020-12-20 02:03:52,698	[INFO]	211	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-20 02:03:52,698	[DEBUG]	
2020-12-20 02:03:53,689	[INFO]	212	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:03:53,690	[INFO]	213	SUCCESS	+2.0	
2020-12-20 02:03:53,690	[DEBUG]	
2020-12-20 02:03:54,746	[INFO]	214	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:03:55,780	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:03:59,147	[INFO]	216	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:03:59,148	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:03:59,149	[INFO]	217	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:03:59,150	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:04:00,185	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:04:01,283	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:04:01,284	[INFO]	220	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:04:01,284	[DEBUG]	
2020-12-20 02:04:04,735	[INFO]	221	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:04:05,741	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:04:09,089	[INFO]	223	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:04:09,091	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:04:09,091	[INFO]	224	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:04:09,092	[DEBUG]	
2020-12-20 02:04:10,102	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:04:11,156	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:04:11,159	[INFO]	227	SUCCESS	+2.0	
2020-12-20 02:04:11,160	[DEBUG]	
2020-12-20 02:04:12,177	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:04:13,245	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:04:14,279	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:04:15,322	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:04:16,341	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:04:17,352	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:04:18,379	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:04:19,392	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:04:22,770	[INFO]	236	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:04:22,771	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 02:04:22,772	[INFO]	237	SUCCESS	+2.0	
2020-12-20 02:04:22,772	[DEBUG]	
2020-12-20 02:04:22,773	[INFO]	238	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:04:22,773	[DEBUG]	
2020-12-20 02:04:22,774	[INFO]	239	SUCCESS	+2.0	
2020-12-20 02:04:22,774	[DEBUG]	
2020-12-20 02:04:22,775	[INFO]	240	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:04:22,776	[DEBUG]	
2020-12-20 02:04:22,776	[INFO]	241	SUCCESS	+2.0	
2020-12-20 02:04:22,777	[DEBUG]	
2020-12-20 02:04:23,793	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:04:24,792	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:04:28,185	[INFO]	244	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:04:28,186	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-20 02:04:29,161	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:04:32,603	[INFO]	246	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:04:32,604	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 52,57 ****
--- 65,71 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 02:04:35,927	[INFO]	247	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:04:35,928	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 02:04:35,928	[INFO]	248	SUCCESS	+2.0	
2020-12-20 02:04:35,929	[DEBUG]	
2020-12-20 02:04:36,967	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:04:40,340	[INFO]	250	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:04:40,341	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:04:43,719	[INFO]	251	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:04:43,720	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,34 ****
--- 23,37 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:04:47,028	[INFO]	252	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:04:47,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:04:47,030	[INFO]	253	SUCCESS	+2.0	
2020-12-20 02:04:47,030	[DEBUG]	
2020-12-20 02:04:48,042	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:04:51,506	[INFO]	255	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:04:51,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:04:51,508	[INFO]	256	SUCCESS	+2.0	
2020-12-20 02:04:51,508	[DEBUG]	
2020-12-20 02:04:52,477	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:04:53,485	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:04:56,864	[INFO]	259	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:04:56,865	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:04:56,865	[INFO]	260	SUCCESS	+2.0	
2020-12-20 02:04:56,866	[DEBUG]	
2020-12-20 02:04:57,863	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:05:01,238	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:05:01,239	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:05:01,240	[INFO]	263	SUCCESS	+2.0	
2020-12-20 02:05:01,240	[DEBUG]	
2020-12-20 02:05:02,254	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:05:05,613	[INFO]	265	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:05:05,614	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:05:05,615	[INFO]	266	SUCCESS	+2.0	
2020-12-20 02:05:05,615	[DEBUG]	
2020-12-20 02:05:06,643	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:05:07,651	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:05:08,666	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:05:12,056	[INFO]	270	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:05:12,056	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:05:12,990	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:05:12,991	[INFO]	272	SUCCESS	+2.0	
2020-12-20 02:05:12,991	[DEBUG]	
2020-12-20 02:05:14,008	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:05:15,052	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:05:16,075	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:05:17,090	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:05:18,136	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:05:19,170	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:05:20,178	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:05:21,162	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:05:22,200	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:05:23,202	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:05:24,220	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:05:24,222	[INFO]	284	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-20 02:05:24,222	[DEBUG]	
2020-12-20 02:05:39,294	[INFO]	285	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:05:39,295	[INFO]	286	SUCCESS	+2.0	
2020-12-20 02:05:39,296	[DEBUG]	
2020-12-20 02:05:40,204	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:05:41,104	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:05:41,959	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:05:42,889	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:05:43,910	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:05:44,925	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:05:45,973	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:05:49,359	[INFO]	294	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:05:49,360	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:05:49,361	[INFO]	295	SUCCESS	+2.0	
2020-12-20 02:05:49,362	[DEBUG]	
2020-12-20 02:05:50,400	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:05:53,763	[INFO]	297	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:05:53,764	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:05:54,807	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:05:55,795	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:05:59,169	[INFO]	300	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:05:59,170	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,33 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 25,39 ----
              }
              visitedNodes.add(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:05:59,172	[INFO]	301	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:05:59,173	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,33 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 25,39 ----
              }
              visitedNodes.add(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:06:00,202	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:06:01,249	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:06:01,251	[INFO]	304	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:06:01,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,33 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 25,39 ----
              }
              visitedNodes.add(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:06:02,296	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:06:03,355	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:06:04,393	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:06:04,395	[INFO]	308	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:06:04,397	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,33 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 25,39 ----
              }
              visitedNodes.add(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:06:04,399	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:06:05,434	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:06:08,812	[INFO]	311	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:06:08,814	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:06:08,816	[INFO]	312	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:06:08,817	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:06:09,898	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:06:10,903	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:06:10,905	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:06:10,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:06:11,923	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:06:11,925	[INFO]	317	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:06:11,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:06:11,926	[INFO]	318	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:06:11,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:06:15,417	[INFO]	319	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:06:15,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:06:15,418	[INFO]	320	SUCCESS	+2.0	
2020-12-20 02:06:15,418	[DEBUG]	
2020-12-20 02:06:16,394	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:06:17,407	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:06:17,409	[INFO]	323	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:06:17,409	[DEBUG]	
2020-12-20 02:06:17,411	[INFO]	324	SUCCESS	+2.0	
2020-12-20 02:06:17,411	[DEBUG]	
2020-12-20 02:06:18,450	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:06:19,459	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:06:19,462	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:06:20,467	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:06:21,506	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:06:22,538	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:06:25,925	[INFO]	331	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:06:25,926	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:06:26,954	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:06:26,956	[INFO]	333	SUCCESS	+2.0	
2020-12-20 02:06:26,957	[DEBUG]	
2020-12-20 02:06:27,960	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:06:28,964	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:06:32,401	[INFO]	336	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:06:32,403	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 02:06:32,404	[INFO]	337	SUCCESS	+2.0	
2020-12-20 02:06:32,405	[DEBUG]	
2020-12-20 02:06:33,424	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:06:34,496	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:06:37,889	[INFO]	340	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:06:37,890	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:06:37,891	[INFO]	341	SUCCESS	+2.0	
2020-12-20 02:06:37,891	[DEBUG]	
2020-12-20 02:06:41,363	[INFO]	342	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:06:41,365	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 02:06:44,747	[INFO]	343	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:06:44,749	[INFO]	344	SUCCESS	+2.0	
2020-12-20 02:06:44,749	[DEBUG]	
2020-12-20 02:06:45,739	[INFO]	345	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:06:46,725	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:06:47,786	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:06:48,812	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:06:52,210	[INFO]	349	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:06:52,211	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:06:55,381	[INFO]	350	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:06:55,382	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,41 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:06:58,635	[INFO]	351	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:06:58,636	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:06:59,582	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:06:59,583	[INFO]	353	SUCCESS	+2.0	
2020-12-20 02:06:59,583	[DEBUG]	
2020-12-20 02:07:00,595	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:07:01,616	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:07:02,644	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:07:03,655	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:07:04,657	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:07:05,683	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:07:06,703	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:07:07,732	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:07:08,772	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:07:08,774	[INFO]	363	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:07:08,774	[DEBUG]	
2020-12-20 02:07:08,775	[INFO]	364	SUCCESS	+2.0	
2020-12-20 02:07:08,775	[DEBUG]	
2020-12-20 02:07:12,263	[INFO]	365	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:07:12,264	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:07:15,429	[INFO]	366	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:07:15,431	[INFO]	367	SUCCESS	+2.0	
2020-12-20 02:07:15,431	[DEBUG]	
2020-12-20 02:07:16,429	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:07:19,870	[INFO]	369	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:07:19,872	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:07:19,873	[INFO]	370	SUCCESS	+2.0	
2020-12-20 02:07:19,874	[DEBUG]	
2020-12-20 02:07:20,882	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:07:21,901	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:07:22,914	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:07:23,921	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:07:24,936	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:07:24,938	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:07:25,958	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:07:29,270	[INFO]	378	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:07:29,270	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-20 02:07:29,271	[INFO]	379	SUCCESS	+2.0	
2020-12-20 02:07:29,272	[DEBUG]	
2020-12-20 02:07:30,281	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:07:33,704	[INFO]	381	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:07:33,705	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:07:34,759	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:07:34,762	[INFO]	383	SUCCESS	+2.0	
2020-12-20 02:07:34,763	[DEBUG]	
2020-12-20 02:07:35,775	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:07:36,809	[INFO]	385	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:07:37,836	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:07:38,852	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:07:39,882	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:07:40,878	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:07:44,317	[INFO]	390	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:07:44,318	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:07:45,281	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:07:46,310	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:07:46,311	[INFO]	393	SUCCESS	+2.0	
2020-12-20 02:07:46,312	[DEBUG]	
2020-12-20 02:07:47,363	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:07:48,379	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:07:49,411	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:07:50,391	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:07:51,406	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:07:52,425	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:07:53,407	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:07:54,429	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:07:57,757	[INFO]	402	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:07:57,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 02:07:57,758	[INFO]	403	SUCCESS	+2.0	
2020-12-20 02:07:57,759	[DEBUG]	
2020-12-20 02:07:58,703	[INFO]	404	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:08:02,098	[INFO]	405	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:08:02,099	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:08:02,100	[INFO]	406	SUCCESS	+2.0	
2020-12-20 02:08:02,100	[DEBUG]	
2020-12-20 02:08:03,062	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:08:04,069	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:08:05,082	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:08:08,399	[INFO]	410	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:08:08,401	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:08:08,402	[INFO]	411	SUCCESS	+2.0	
2020-12-20 02:08:08,403	[DEBUG]	
2020-12-20 02:08:09,420	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:08:10,436	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:08:11,450	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:08:12,464	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:08:12,466	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:08:13,483	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:08:14,460	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:08:15,519	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:08:16,541	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:08:17,573	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:08:18,576	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:08:19,591	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:08:20,591	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:08:21,591	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:08:22,584	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:08:23,596	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:08:26,982	[INFO]	428	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:08:26,984	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:08:30,362	[INFO]	429	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:08:31,349	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:08:31,351	[INFO]	431	SUCCESS	+2.0	
2020-12-20 02:08:31,352	[DEBUG]	
2020-12-20 02:08:32,361	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:08:35,802	[INFO]	433	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:08:35,803	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:08:35,804	[INFO]	434	SUCCESS	+2.0	
2020-12-20 02:08:35,804	[DEBUG]	
2020-12-20 02:08:36,772	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:08:40,175	[INFO]	436	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:08:40,176	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:08:40,177	[INFO]	437	SUCCESS	+2.0	
2020-12-20 02:08:40,177	[DEBUG]	
2020-12-20 02:08:41,181	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:08:42,214	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:08:43,248	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:08:44,311	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:08:47,678	[INFO]	442	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:08:47,679	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:08:48,660	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:08:48,662	[INFO]	444	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:08:48,663	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:08:49,688	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:08:53,068	[INFO]	446	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:08:53,069	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:08:53,070	[INFO]	447	SUCCESS	+2.0	
2020-12-20 02:08:53,070	[DEBUG]	
2020-12-20 02:08:56,423	[INFO]	448	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:08:56,424	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-20 02:08:56,425	[INFO]	449	SUCCESS	+2.0	
2020-12-20 02:08:56,425	[DEBUG]	
2020-12-20 02:08:57,425	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:08:58,438	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:08:59,486	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:09:00,461	[INFO]	453	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:09:01,460	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:09:02,472	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:09:03,478	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:09:04,466	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:09:05,483	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:09:08,897	[INFO]	459	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:09:09,912	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:09:10,931	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:09:14,250	[INFO]	462	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:09:14,251	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:09:15,271	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:09:15,274	[INFO]	464	SUCCESS	+2.0	
2020-12-20 02:09:15,274	[DEBUG]	
2020-12-20 02:09:16,284	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:09:17,272	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:09:20,686	[INFO]	467	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:09:20,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:09:21,694	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:09:36,764	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:09:36,765	[INFO]	470	SUCCESS	+2.0	
2020-12-20 02:09:36,766	[DEBUG]	
2020-12-20 02:09:37,671	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:09:38,577	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:09:39,473	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:09:40,381	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:09:41,352	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:09:42,336	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:09:43,331	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:09:44,362	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:09:45,396	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:09:46,415	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:09:46,417	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:09:46,419	[INFO]	482	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:09:46,419	[DEBUG]	
2020-12-20 02:09:47,475	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:09:47,478	[INFO]	484	SUCCESS	+2.0	
2020-12-20 02:09:47,479	[DEBUG]	
2020-12-20 02:09:48,496	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:09:49,557	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:09:50,594	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:09:51,631	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:09:51,634	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:09:52,653	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:09:53,693	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:09:54,692	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:09:55,732	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:09:56,759	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:09:57,782	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:09:58,796	[INFO]	496	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:09:59,831	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:10:00,851	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:10:01,863	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:10:02,863	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:10:02,863	[INFO]	==== END ====
2020-12-20 02:10:02,863	[INFO]	Reason: step budget
2020-12-20 02:10:02,864	[INFO]	
2020-12-20 02:10:02,864	[INFO]	========== EPOCH 5 ==========
2020-12-20 02:10:02,864	[INFO]	==== WARMUP ====
2020-12-20 02:10:06,339	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:10:06,340	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:10:09,600	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:10:09,601	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:10:12,862	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:10:12,863	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:10:16,224	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 02:10:16,225	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:10:16,225	[INFO]	==== START ====
2020-12-20 02:10:17,223	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:10:18,264	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:10:19,290	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:10:20,310	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:10:21,308	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:10:21,309	[INFO]	6	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:10:21,310	[DEBUG]	
2020-12-20 02:10:22,369	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:10:25,820	[INFO]	8	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:10:25,821	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 02:10:26,785	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:10:27,817	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:10:28,806	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-20 02:10:28,807	[INFO]	12	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:10:28,808	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 02:10:28,808	[INFO]	13	SUCCESS	+2.0	
2020-12-20 02:10:28,809	[DEBUG]	
2020-12-20 02:10:29,830	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:10:30,862	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:10:31,871	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:10:32,891	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:10:37,020	[INFO]	18	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:10:37,021	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Set<Node> visitedNodes = new HashSet<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 02:10:38,307	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:10:38,308	[INFO]	20	SUCCESS	+2.0	
2020-12-20 02:10:38,308	[DEBUG]	
2020-12-20 02:10:42,809	[INFO]	21	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:10:44,054	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:10:45,130	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:10:46,294	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:10:47,721	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:10:48,783	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:10:49,812	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:10:50,825	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:10:51,857	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:10:52,900	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:10:53,885	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:10:54,859	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:10:55,916	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:10:56,929	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:10:56,931	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:11:00,297	[INFO]	36	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:11:00,298	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:11:00,298	[INFO]	37	SUCCESS	+2.0	
2020-12-20 02:11:00,299	[DEBUG]	
2020-12-20 02:11:03,640	[INFO]	38	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:11:03,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-20 02:11:03,642	[INFO]	39	SUCCESS	+2.0	
2020-12-20 02:11:03,642	[DEBUG]	
2020-12-20 02:11:04,614	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:11:19,675	[INFO]	41	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:11:19,676	[INFO]	42	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:11:20,579	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:11:21,485	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:11:22,392	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:11:23,345	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:11:26,412	[INFO]	47	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:11:26,413	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:11:26,413	[INFO]	48	SUCCESS	+2.0	
2020-12-20 02:11:26,414	[DEBUG]	
2020-12-20 02:11:27,412	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:11:28,418	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:11:31,778	[INFO]	51	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:11:35,138	[INFO]	52	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:11:36,158	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:11:37,228	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:11:38,266	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:11:41,735	[INFO]	56	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:11:41,736	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:11:42,755	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:11:42,756	[INFO]	58	SUCCESS	+2.0	
2020-12-20 02:11:42,757	[DEBUG]	
2020-12-20 02:11:43,755	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:11:47,079	[INFO]	60	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-20 02:11:48,128	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:11:49,173	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:11:50,205	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:11:51,250	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:11:51,252	[INFO]	65	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:11:51,252	[DEBUG]	
2020-12-20 02:11:52,296	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:11:52,297	[INFO]	67	SUCCESS	+2.0	
2020-12-20 02:11:52,298	[DEBUG]	
2020-12-20 02:11:52,299	[INFO]	68	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:11:52,300	[DEBUG]	
2020-12-20 02:11:55,651	[INFO]	69	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:11:55,652	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 02:11:55,653	[INFO]	70	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:11:55,653	[DEBUG]	
2020-12-20 02:11:55,654	[INFO]	71	SUCCESS	+2.0	
2020-12-20 02:11:55,654	[DEBUG]	
2020-12-20 02:11:56,637	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:11:57,643	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:12:00,953	[INFO]	74	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:12:00,954	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 02:12:00,954	[INFO]	75	SUCCESS	+2.0	
2020-12-20 02:12:00,955	[DEBUG]	
2020-12-20 02:12:01,965	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:12:02,970	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:12:04,005	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:12:19,077	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:12:22,122	[INFO]	80	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:12:22,122	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:12:22,123	[INFO]	81	SUCCESS	+2.0	
2020-12-20 02:12:22,123	[DEBUG]	
2020-12-20 02:12:23,017	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:12:23,934	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:12:24,921	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:12:25,890	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:12:26,922	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:12:27,958	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:12:28,978	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:12:30,032	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:12:31,056	[INFO]	90	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-20 02:12:32,057	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:12:33,082	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:12:34,263	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:12:35,327	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:12:36,398	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:12:36,400	[INFO]	96	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:12:36,400	[DEBUG]	
2020-12-20 02:12:37,475	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:12:40,837	[INFO]	98	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:12:40,838	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 02:12:40,839	[INFO]	99	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:12:40,839	[DEBUG]	
2020-12-20 02:12:41,907	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:12:42,908	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:12:42,911	[INFO]	102	SUCCESS	+2.0	
2020-12-20 02:12:42,912	[DEBUG]	
2020-12-20 02:12:43,944	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:12:44,920	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:12:45,935	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:12:46,976	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:12:48,009	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:12:51,285	[INFO]	108	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:12:51,286	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:12:51,287	[INFO]	109	SUCCESS	+2.0	
2020-12-20 02:12:51,287	[DEBUG]	
2020-12-20 02:12:52,327	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:12:52,330	[INFO]	111	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:12:52,331	[DEBUG]	
2020-12-20 02:12:52,333	[INFO]	112	SUCCESS	+2.0	
2020-12-20 02:12:52,333	[DEBUG]	
2020-12-20 02:12:53,365	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:12:54,374	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:12:55,375	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:12:56,392	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:12:57,409	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:12:58,475	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:12:59,487	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:13:02,906	[INFO]	120	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:13:02,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 02:13:03,908	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:13:03,910	[INFO]	122	SUCCESS	+2.0	
2020-12-20 02:13:03,911	[DEBUG]	
2020-12-20 02:13:07,227	[INFO]	123	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:13:07,228	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 02:13:07,229	[INFO]	124	SUCCESS	+2.0	
2020-12-20 02:13:07,229	[DEBUG]	
2020-12-20 02:13:08,239	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:13:09,243	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:13:10,266	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:13:11,267	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:13:14,615	[INFO]	129	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:13:14,616	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:13:17,991	[INFO]	130	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:13:17,992	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,24 ****
--- 17,29 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:13:18,929	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:13:22,185	[INFO]	132	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:13:22,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,28 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:13:23,167	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:13:26,593	[INFO]	134	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:13:26,595	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,28 ****
--- 17,30 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:13:26,596	[INFO]	135	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:13:26,597	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,28 ****
--- 17,30 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:13:27,589	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:13:27,592	[INFO]	137	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:13:27,594	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,28 ****
--- 17,30 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:13:30,948	[INFO]	138	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:13:30,949	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:13:34,300	[INFO]	139	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:13:34,302	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:13:34,303	[INFO]	140	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:13:34,303	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:13:34,304	[INFO]	141	SUCCESS	+2.0	
2020-12-20 02:13:34,304	[DEBUG]	
2020-12-20 02:13:35,304	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:13:36,399	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:13:39,816	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:13:39,818	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:13:39,819	[INFO]	145	SUCCESS	+2.0	
2020-12-20 02:13:39,819	[DEBUG]	
2020-12-20 02:13:43,124	[INFO]	146	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:13:43,125	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:13:43,126	[INFO]	147	SUCCESS	+2.0	
2020-12-20 02:13:43,126	[DEBUG]	
2020-12-20 02:13:44,106	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:13:45,103	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:13:46,112	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:13:47,162	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:13:48,170	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:13:49,192	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:13:50,223	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:13:51,278	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:13:52,286	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:13:55,646	[INFO]	157	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:13:55,647	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-20 02:13:55,648	[INFO]	158	SUCCESS	+2.0	
2020-12-20 02:13:55,648	[DEBUG]	
2020-12-20 02:13:56,633	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:13:57,598	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:13:58,578	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:13:59,625	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:14:03,060	[INFO]	163	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:14:03,061	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:14:04,016	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:14:04,018	[INFO]	165	SUCCESS	+2.0	
2020-12-20 02:14:04,018	[DEBUG]	
2020-12-20 02:14:05,032	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:14:06,044	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:14:09,397	[INFO]	168	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:14:09,398	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:14:10,414	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:14:11,398	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:14:11,399	[INFO]	171	SUCCESS	+2.0	
2020-12-20 02:14:11,400	[DEBUG]	
2020-12-20 02:14:12,422	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:14:13,403	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:14:14,421	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:14:15,432	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:14:16,451	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:14:17,509	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:14:18,525	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:14:21,807	[INFO]	179	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:14:21,808	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:14:22,830	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:14:22,833	[INFO]	181	SUCCESS	+2.0	
2020-12-20 02:14:22,833	[DEBUG]	
2020-12-20 02:14:23,879	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:14:24,892	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:14:25,910	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:14:26,956	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:14:30,334	[INFO]	186	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:14:31,333	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:14:32,356	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:14:33,398	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:14:34,422	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:14:35,446	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:14:38,806	[INFO]	192	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:14:38,807	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:14:38,808	[INFO]	193	SUCCESS	+2.0	
2020-12-20 02:14:38,808	[DEBUG]	
2020-12-20 02:14:39,812	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:14:40,823	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:14:41,833	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:14:45,220	[INFO]	197	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:14:45,221	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:14:46,191	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:14:46,192	[INFO]	199	SUCCESS	+2.0	
2020-12-20 02:14:46,193	[DEBUG]	
2020-12-20 02:14:47,240	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:14:47,242	[INFO]	201	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:14:47,242	[DEBUG]	
2020-12-20 02:14:47,243	[INFO]	202	SUCCESS	+2.0	
2020-12-20 02:14:47,243	[DEBUG]	
2020-12-20 02:14:48,243	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:14:49,297	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:14:52,679	[INFO]	205	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:14:55,986	[INFO]	206	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:14:55,987	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:14:57,019	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:14:57,020	[INFO]	208	SUCCESS	+2.0	
2020-12-20 02:14:57,020	[DEBUG]	
2020-12-20 02:15:00,335	[INFO]	209	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:15:01,337	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:15:02,343	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:15:05,779	[INFO]	212	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:15:05,781	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:15:05,782	[INFO]	213	SUCCESS	+2.0	
2020-12-20 02:15:05,782	[DEBUG]	
2020-12-20 02:15:06,794	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:15:07,822	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:15:07,823	[INFO]	216	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:15:07,824	[DEBUG]	
2020-12-20 02:15:08,780	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:15:12,138	[INFO]	218	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:15:12,139	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 02:15:12,140	[INFO]	219	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:15:12,140	[DEBUG]	
2020-12-20 02:15:12,141	[INFO]	220	SUCCESS	+2.0	
2020-12-20 02:15:12,141	[DEBUG]	
2020-12-20 02:15:15,498	[INFO]	221	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:15:15,499	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-20 02:15:15,500	[INFO]	222	SUCCESS	+2.0	
2020-12-20 02:15:15,500	[DEBUG]	
2020-12-20 02:15:18,870	[INFO]	223	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:15:22,169	[INFO]	224	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:15:22,171	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 02:15:23,187	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:15:24,206	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:15:24,207	[INFO]	227	SUCCESS	+2.0	
2020-12-20 02:15:24,208	[DEBUG]	
2020-12-20 02:15:25,215	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:15:26,271	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:15:26,272	[INFO]	230	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:15:26,272	[DEBUG]	
2020-12-20 02:15:27,330	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:15:28,385	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:15:31,745	[INFO]	233	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:15:31,746	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:15:32,736	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:15:33,811	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:15:33,812	[INFO]	236	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:15:33,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:15:33,814	[INFO]	237	SUCCESS	+2.0	
2020-12-20 02:15:33,814	[DEBUG]	
2020-12-20 02:15:34,771	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:15:35,899	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:15:36,945	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:15:38,016	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:15:38,018	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:15:39,045	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:15:39,994	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:15:40,995	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:15:42,003	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:15:43,042	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:15:44,049	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:15:45,052	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:15:46,114	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:16:01,179	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:16:04,254	[INFO]	252	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:16:04,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:16:04,257	[INFO]	253	SUCCESS	+2.0	
2020-12-20 02:16:04,258	[DEBUG]	
2020-12-20 02:16:05,184	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:16:06,075	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:16:07,035	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:16:07,984	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:16:08,981	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:16:09,942	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:16:09,944	[INFO]	260	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:16:09,944	[DEBUG]	
2020-12-20 02:16:09,945	[INFO]	261	SUCCESS	+2.0	
2020-12-20 02:16:09,945	[DEBUG]	
2020-12-20 02:16:10,966	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:16:12,032	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:16:13,037	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:16:14,064	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:16:15,090	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:16:30,163	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:16:31,057	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:16:31,979	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:16:32,919	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:16:33,829	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:16:37,190	[INFO]	272	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:16:37,191	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:16:37,191	[INFO]	273	SUCCESS	+2.0	
2020-12-20 02:16:37,192	[DEBUG]	
2020-12-20 02:16:38,213	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:16:39,218	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:16:40,290	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:16:41,342	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:16:42,362	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:16:45,742	[INFO]	279	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:16:45,744	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:16:45,744	[INFO]	280	SUCCESS	+2.0	
2020-12-20 02:16:45,745	[DEBUG]	
2020-12-20 02:16:46,756	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:16:47,788	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:16:51,187	[INFO]	283	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:16:51,188	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:16:51,189	[INFO]	284	SUCCESS	+2.0	
2020-12-20 02:16:51,189	[DEBUG]	
2020-12-20 02:16:52,201	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:16:53,180	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:16:56,528	[INFO]	287	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:16:56,529	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:16:57,519	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:16:58,548	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:16:58,550	[INFO]	290	SUCCESS	+2.0	
2020-12-20 02:16:58,551	[DEBUG]	
2020-12-20 02:16:59,585	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:17:00,576	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:17:04,060	[INFO]	293	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:17:05,025	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:17:06,073	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:17:07,121	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:17:08,115	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:17:09,147	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:17:10,159	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:17:11,189	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:17:26,251	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:17:29,167	[INFO]	302	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:17:29,168	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:17:32,229	[INFO]	303	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:17:32,230	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,20 ****
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
-         unvisitedNodes.put(startnode, 0);
- 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
--- 13,18 ----
***************
*** 29,34 ****
--- 27,56 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
+         unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:17:32,231	[INFO]	304	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:17:32,232	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:17:33,161	[INFO]	305	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:17:33,164	[INFO]	306	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:17:33,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:17:34,211	[INFO]	307	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:17:35,253	[INFO]	308	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:17:35,255	[INFO]	309	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:17:35,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:17:38,797	[INFO]	310	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:17:38,798	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:17:38,799	[INFO]	311	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:17:38,799	[DEBUG]	
2020-12-20 02:17:38,800	[INFO]	312	SUCCESS	+2.0	
2020-12-20 02:17:38,800	[DEBUG]	
2020-12-20 02:17:42,164	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:17:42,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:17:42,166	[INFO]	314	SUCCESS	+2.0	
2020-12-20 02:17:42,166	[DEBUG]	
2020-12-20 02:17:43,197	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:17:46,499	[INFO]	316	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:17:46,500	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 02:17:46,501	[INFO]	317	SUCCESS	+2.0	
2020-12-20 02:17:46,501	[DEBUG]	
2020-12-20 02:17:47,544	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:17:48,554	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:17:49,589	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:17:50,625	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 02:17:51,676	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:17:52,680	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:17:53,668	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:17:53,669	[INFO]	325	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:17:53,670	[DEBUG]	
2020-12-20 02:17:57,023	[INFO]	326	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:17:57,024	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 02:17:57,025	[INFO]	327	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:17:57,025	[DEBUG]	
2020-12-20 02:17:57,026	[INFO]	328	SUCCESS	+2.0	
2020-12-20 02:17:57,026	[DEBUG]	
2020-12-20 02:17:58,074	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:17:59,104	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:18:00,152	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:18:01,104	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:18:02,151	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:18:03,180	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:18:04,205	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:18:05,241	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:18:20,300	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:18:21,159	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:18:22,033	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:18:22,961	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:18:23,870	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:18:24,774	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:18:27,942	[INFO]	343	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:18:27,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:18:27,943	[INFO]	344	SUCCESS	+2.0	
2020-12-20 02:18:27,944	[DEBUG]	
2020-12-20 02:18:28,954	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:18:29,957	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:18:31,008	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:18:32,045	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:18:35,489	[INFO]	349	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-20 02:18:35,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:18:38,871	[INFO]	350	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:18:38,872	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 27,39 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:18:39,895	[INFO]	351	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:18:39,898	[INFO]	352	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-20 02:18:39,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:18:39,900	[INFO]	353	SUCCESS	+2.0	
2020-12-20 02:18:39,901	[DEBUG]	
2020-12-20 02:18:40,933	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:18:41,971	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:18:43,053	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:18:46,400	[INFO]	357	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:18:46,401	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:18:47,393	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:18:48,394	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:18:49,438	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:18:49,440	[INFO]	361	SUCCESS	+2.0	
2020-12-20 02:18:49,440	[DEBUG]	
2020-12-20 02:18:52,787	[INFO]	362	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:18:52,788	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:18:53,807	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:18:54,816	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:18:54,818	[INFO]	365	SUCCESS	+2.0	
2020-12-20 02:18:54,818	[DEBUG]	
2020-12-20 02:18:55,839	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:18:59,176	[INFO]	367	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:18:59,177	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 02:18:59,178	[INFO]	368	SUCCESS	+2.0	
2020-12-20 02:18:59,178	[DEBUG]	
2020-12-20 02:19:00,196	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:19:03,578	[INFO]	370	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:19:03,579	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:19:03,580	[INFO]	371	SUCCESS	+2.0	
2020-12-20 02:19:03,580	[DEBUG]	
2020-12-20 02:19:04,563	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:19:05,567	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:19:06,652	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:19:07,731	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:19:11,062	[INFO]	376	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:19:11,063	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 02:19:11,064	[INFO]	377	SUCCESS	+2.0	
2020-12-20 02:19:11,064	[DEBUG]	
2020-12-20 02:19:12,049	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:19:13,087	[INFO]	379	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-20 02:19:14,110	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:19:17,355	[INFO]	381	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:19:18,329	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:19:19,315	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:19:22,637	[INFO]	384	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:19:22,638	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:19:22,639	[INFO]	385	SUCCESS	+2.0	
2020-12-20 02:19:22,639	[DEBUG]	
2020-12-20 02:19:23,654	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:19:24,694	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:19:39,755	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:19:40,656	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:19:41,555	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:19:42,479	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:19:43,399	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:19:44,300	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:19:45,195	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:19:46,220	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:19:47,259	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:19:48,308	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:19:51,673	[INFO]	398	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:19:51,674	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:19:52,681	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:19:53,749	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:19:53,752	[INFO]	401	SUCCESS	+2.0	
2020-12-20 02:19:53,752	[DEBUG]	
2020-12-20 02:19:54,790	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:19:58,106	[INFO]	403	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:19:58,107	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-20 02:19:58,108	[INFO]	404	SUCCESS	+2.0	
2020-12-20 02:19:58,108	[DEBUG]	
2020-12-20 02:19:59,097	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:20:02,528	[INFO]	406	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:20:02,529	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:20:03,529	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:20:03,531	[INFO]	408	SUCCESS	+2.0	
2020-12-20 02:20:03,532	[DEBUG]	
2020-12-20 02:20:04,535	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:20:07,895	[INFO]	410	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:20:08,895	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:20:09,915	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:20:09,918	[INFO]	413	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:20:09,919	[DEBUG]	
2020-12-20 02:20:09,920	[INFO]	414	SUCCESS	+2.0	
2020-12-20 02:20:09,920	[DEBUG]	
2020-12-20 02:20:10,921	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:20:11,933	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:20:12,980	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:20:14,013	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:20:15,024	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:20:18,312	[INFO]	420	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:20:18,313	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-20 02:20:19,243	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:20:19,246	[INFO]	422	SUCCESS	+2.0	
2020-12-20 02:20:19,247	[DEBUG]	
2020-12-20 02:20:22,629	[INFO]	423	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:20:22,630	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-20 02:20:22,631	[INFO]	424	SUCCESS	+2.0	
2020-12-20 02:20:22,632	[DEBUG]	
2020-12-20 02:20:23,661	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:20:24,661	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:20:25,648	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:20:26,690	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:20:27,770	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:20:28,781	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:20:29,803	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:20:30,846	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:20:31,871	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:20:35,367	[INFO]	434	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:20:35,369	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 02:20:36,729	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:20:37,897	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:20:39,108	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:20:40,214	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:20:40,216	[INFO]	439	SUCCESS	+2.0	
2020-12-20 02:20:40,216	[DEBUG]	
2020-12-20 02:20:41,225	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:20:41,228	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:20:42,180	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:20:43,223	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:20:44,246	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:20:47,562	[INFO]	445	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:20:47,562	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 02:20:48,588	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:20:49,623	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:20:50,673	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:20:54,011	[INFO]	449	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:20:54,012	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  
***************
*** 48,54 ****
--- 47,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 02:20:57,186	[INFO]	450	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:20:57,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-20 02:20:58,142	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:20:58,143	[INFO]	452	SUCCESS	+2.0	
2020-12-20 02:20:58,143	[DEBUG]	
2020-12-20 02:20:59,152	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:21:02,495	[INFO]	454	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:21:02,496	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:21:02,497	[INFO]	455	SUCCESS	+2.0	
2020-12-20 02:21:02,497	[DEBUG]	
2020-12-20 02:21:03,495	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:21:04,446	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:21:05,471	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:21:08,829	[INFO]	459	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:21:08,830	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:21:09,856	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:21:09,857	[INFO]	461	SUCCESS	+2.0	
2020-12-20 02:21:09,857	[DEBUG]	
2020-12-20 02:21:10,842	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:21:10,844	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:21:11,879	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:21:12,908	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:21:16,283	[INFO]	466	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:21:16,284	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 02:21:17,279	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:21:18,259	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:21:21,621	[INFO]	469	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:21:21,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  
***************
*** 46,51 ****
--- 47,53 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 02:21:24,821	[INFO]	470	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:21:24,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-20 02:21:24,823	[INFO]	471	SUCCESS	+2.0	
2020-12-20 02:21:24,823	[DEBUG]	
2020-12-20 02:21:25,840	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:21:29,138	[INFO]	473	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:21:29,139	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 02:21:29,140	[INFO]	474	SUCCESS	+2.0	
2020-12-20 02:21:29,140	[DEBUG]	
2020-12-20 02:21:32,554	[INFO]	475	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:21:32,555	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 02:21:32,556	[INFO]	476	SUCCESS	+2.0	
2020-12-20 02:21:32,556	[DEBUG]	
2020-12-20 02:21:33,619	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:21:34,675	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:21:35,744	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:21:36,757	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:21:37,825	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:21:38,853	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:21:42,291	[INFO]	483	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:21:42,292	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 02:21:45,636	[INFO]	484	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:21:45,637	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;
***************
*** 50,55 ****
--- 39,45 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 02:21:45,638	[INFO]	485	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:21:45,639	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;
***************
*** 50,55 ****
--- 39,45 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 02:21:45,640	[INFO]	486	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:21:45,640	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;
***************
*** 50,55 ****
--- 39,45 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 02:21:48,922	[INFO]	487	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:21:48,923	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 02:21:49,836	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:21:49,837	[INFO]	489	SUCCESS	+2.0	
2020-12-20 02:21:49,837	[DEBUG]	
2020-12-20 02:21:50,846	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:21:51,867	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:21:55,210	[INFO]	492	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:21:56,195	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:21:57,195	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:21:58,214	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:21:59,231	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:22:00,238	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:22:01,263	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:22:02,325	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:22:05,830	[INFO]	500	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:22:05,830	[INFO]	==== END ====
2020-12-20 02:22:05,831	[INFO]	Reason: step budget
2020-12-20 02:22:05,832	[INFO]	
2020-12-20 02:22:05,832	[INFO]	========== EPOCH 6 ==========
2020-12-20 02:22:05,832	[INFO]	==== WARMUP ====
2020-12-20 02:22:09,139	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:22:09,139	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:22:12,455	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:22:12,455	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:22:15,850	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:22:15,851	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:22:19,140	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 02:22:19,140	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:22:19,140	[INFO]	==== START ====
2020-12-20 02:22:20,153	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:22:21,238	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:22:22,245	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:22:25,682	[INFO]	4	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:22:25,684	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 02:22:25,686	[INFO]	5	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:22:25,688	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 02:22:25,689	[INFO]	6	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:22:25,691	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 02:22:26,680	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:22:26,682	[INFO]	8	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:22:26,683	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 02:22:27,759	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:22:28,761	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:22:29,790	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:22:30,789	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:22:30,791	[INFO]	13	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:22:30,792	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 02:22:30,792	[INFO]	14	SUCCESS	+2.0	
2020-12-20 02:22:30,793	[DEBUG]	
2020-12-20 02:22:34,239	[INFO]	15	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:22:34,240	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:22:34,242	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-20 02:22:34,242	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:22:35,233	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:22:35,235	[INFO]	18	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:22:35,235	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:22:35,236	[INFO]	19	SUCCESS	+2.0	
2020-12-20 02:22:35,236	[DEBUG]	
2020-12-20 02:22:36,271	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:22:37,268	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:22:38,296	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:22:39,340	[INFO]	23	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-20 02:22:40,368	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:22:41,374	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:22:42,420	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:22:43,429	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:22:44,437	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:22:45,460	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:22:46,467	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:23:01,530	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:23:02,441	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:23:05,395	[INFO]	33	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:23:05,396	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:23:05,397	[INFO]	34	SUCCESS	+2.0	
2020-12-20 02:23:05,397	[DEBUG]	
2020-12-20 02:23:06,337	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:23:07,299	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:23:08,307	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:23:09,312	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:23:10,350	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:23:11,375	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:23:12,419	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:23:13,442	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:23:14,537	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:23:15,583	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:23:16,602	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:23:17,618	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:23:18,559	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:23:19,624	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:23:20,643	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:23:21,690	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:23:25,127	[INFO]	51	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:23:25,130	[INFO]	52	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-20 02:23:25,130	[DEBUG]	
2020-12-20 02:23:25,132	[INFO]	53	SUCCESS	+2.0	
2020-12-20 02:23:25,132	[DEBUG]	
2020-12-20 02:23:26,135	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:23:27,177	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:23:42,266	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:23:42,267	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:23:43,164	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:23:44,000	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:23:44,893	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:23:47,992	[INFO]	61	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:23:47,993	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:23:49,028	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:23:49,031	[INFO]	63	SUCCESS	+2.0	
2020-12-20 02:23:49,032	[DEBUG]	
2020-12-20 02:23:50,090	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:23:51,103	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:23:52,145	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:23:53,115	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:23:54,160	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:23:55,182	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:23:56,219	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:23:57,226	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:24:00,528	[INFO]	72	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:24:00,529	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:24:01,492	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:24:02,487	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:24:05,993	[INFO]	75	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:24:05,994	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:24:06,971	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:24:22,042	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:24:25,152	[INFO]	78	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:24:25,153	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:24:25,154	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:24:25,154	[INFO]	80	SUCCESS	+2.0	
2020-12-20 02:24:25,154	[DEBUG]	
2020-12-20 02:24:28,212	[INFO]	81	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:24:29,225	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:24:30,286	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:24:31,315	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:24:32,336	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:24:32,337	[INFO]	86	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:24:32,338	[DEBUG]	
2020-12-20 02:24:32,338	[INFO]	87	SUCCESS	+2.0	
2020-12-20 02:24:32,339	[DEBUG]	
2020-12-20 02:24:33,358	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:24:34,462	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:24:35,521	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:24:36,589	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:24:37,600	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:24:38,658	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:24:39,724	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:24:40,733	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:24:41,775	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:24:42,789	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:24:43,721	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:24:44,758	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:24:45,780	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:24:46,797	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:24:47,845	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:24:48,866	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:24:49,871	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:24:50,904	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:24:51,935	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:24:52,960	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:24:56,400	[INFO]	108	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:24:56,401	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:24:56,402	[INFO]	109	SUCCESS	+2.0	
2020-12-20 02:24:56,402	[DEBUG]	
2020-12-20 02:24:57,416	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:24:58,436	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:24:59,520	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:25:00,529	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:25:03,897	[INFO]	114	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:25:03,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:25:03,899	[INFO]	115	SUCCESS	+2.0	
2020-12-20 02:25:03,899	[DEBUG]	
2020-12-20 02:25:04,897	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:25:08,223	[INFO]	117	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:25:08,225	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:25:09,244	[INFO]	118	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:25:12,623	[INFO]	119	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:25:12,624	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 02:25:13,629	[INFO]	120	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:25:17,020	[INFO]	121	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:25:17,021	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 02:25:17,022	[INFO]	122	SUCCESS	+2.0	
2020-12-20 02:25:17,022	[DEBUG]	
2020-12-20 02:25:18,027	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:25:19,059	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:25:20,087	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:25:21,105	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:25:36,176	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:25:39,148	[INFO]	128	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:25:39,149	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:25:40,156	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:25:43,575	[INFO]	130	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:25:43,576	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:25:43,577	[INFO]	131	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:25:43,578	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:25:44,601	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:25:44,602	[INFO]	133	SUCCESS	+2.0	
2020-12-20 02:25:44,603	[DEBUG]	
2020-12-20 02:25:45,605	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:25:46,615	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:25:47,646	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:25:48,662	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:25:52,056	[INFO]	138	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:25:52,058	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:25:53,032	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:25:54,062	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:25:55,106	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:25:55,109	[INFO]	142	SUCCESS	+2.0	
2020-12-20 02:25:55,109	[DEBUG]	
2020-12-20 02:25:55,111	[INFO]	143	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:25:55,111	[DEBUG]	
2020-12-20 02:25:55,112	[INFO]	144	SUCCESS	+2.0	
2020-12-20 02:25:55,113	[DEBUG]	
2020-12-20 02:25:56,152	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:25:57,104	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:25:58,178	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:26:01,488	[INFO]	148	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:26:01,489	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:26:01,490	[INFO]	149	SUCCESS	+2.0	
2020-12-20 02:26:01,490	[DEBUG]	
2020-12-20 02:26:04,819	[INFO]	150	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:26:04,820	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:26:05,823	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:26:05,825	[INFO]	152	SUCCESS	+2.0	
2020-12-20 02:26:05,826	[DEBUG]	
2020-12-20 02:26:06,851	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:26:07,891	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:26:08,929	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:26:09,930	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:26:10,969	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:26:12,029	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:26:13,060	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:26:14,103	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:26:15,195	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:26:16,249	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:26:19,703	[INFO]	163	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:26:19,704	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:26:19,705	[INFO]	164	SUCCESS	+2.0	
2020-12-20 02:26:19,705	[DEBUG]	
2020-12-20 02:26:20,699	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:26:21,718	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:26:25,099	[INFO]	167	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:26:25,100	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:26:26,080	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:26:27,097	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:26:28,120	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:26:28,124	[INFO]	171	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:26:28,125	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:26:28,127	[INFO]	172	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:26:28,129	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:26:28,130	[INFO]	173	SUCCESS	+2.0	
2020-12-20 02:26:28,131	[DEBUG]	
2020-12-20 02:26:29,156	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:26:30,149	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:26:31,237	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:26:32,252	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:26:33,245	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:26:36,635	[INFO]	179	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-20 02:26:40,097	[INFO]	180	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:26:43,499	[INFO]	181	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:26:43,500	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:26:43,501	[INFO]	182	SUCCESS	+2.0	
2020-12-20 02:26:43,501	[DEBUG]	
2020-12-20 02:26:46,860	[INFO]	183	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:26:50,156	[INFO]	184	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:26:50,157	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-20 02:26:51,155	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:26:52,185	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:26:53,200	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:26:53,202	[INFO]	188	SUCCESS	+2.0	
2020-12-20 02:26:53,202	[DEBUG]	
2020-12-20 02:26:54,235	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:26:57,621	[INFO]	190	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:27:01,026	[INFO]	191	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:27:01,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:27:02,005	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:27:03,012	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:27:03,013	[INFO]	194	SUCCESS	+2.0	
2020-12-20 02:27:03,013	[DEBUG]	
2020-12-20 02:27:04,014	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:27:05,020	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:27:05,022	[INFO]	197	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-20 02:27:05,022	[DEBUG]	
2020-12-20 02:27:06,025	[INFO]	198	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:27:06,026	[INFO]	199	SUCCESS	+2.0	
2020-12-20 02:27:06,026	[DEBUG]	
2020-12-20 02:27:07,096	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:27:08,116	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:27:09,119	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:27:10,155	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:27:13,486	[INFO]	204	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:27:13,487	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:27:14,563	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:27:15,585	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:27:15,586	[INFO]	207	SUCCESS	+2.0	
2020-12-20 02:27:15,587	[DEBUG]	
2020-12-20 02:27:16,586	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:27:17,619	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:27:18,653	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:27:21,991	[INFO]	211	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:27:21,992	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:27:22,976	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:27:24,006	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:27:24,007	[INFO]	214	SUCCESS	+2.0	
2020-12-20 02:27:24,007	[DEBUG]	
2020-12-20 02:27:25,017	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:27:26,034	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:27:29,288	[INFO]	217	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:27:29,289	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 02:27:30,280	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:27:31,313	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:27:31,314	[INFO]	220	SUCCESS	+2.0	
2020-12-20 02:27:31,314	[DEBUG]	
2020-12-20 02:27:32,341	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:27:33,358	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:27:34,414	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:27:35,414	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:27:36,419	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:27:37,437	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:27:38,471	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:27:39,479	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:27:40,502	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:27:41,532	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:27:42,556	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:27:45,989	[INFO]	232	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:27:45,990	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 02:27:45,991	[INFO]	233	SUCCESS	+2.0	
2020-12-20 02:27:45,991	[DEBUG]	
2020-12-20 02:27:46,965	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:27:47,985	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:27:49,009	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:27:50,023	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:27:51,032	[INFO]	238	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 02:28:06,101	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:28:09,222	[INFO]	240	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:28:09,222	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:28:09,223	[INFO]	241	SUCCESS	+2.0	
2020-12-20 02:28:09,223	[DEBUG]	
2020-12-20 02:28:10,120	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:28:11,021	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:28:11,972	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:28:13,017	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:28:16,351	[INFO]	246	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:28:16,352	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:28:17,361	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:28:18,382	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:28:18,384	[INFO]	249	SUCCESS	+2.0	
2020-12-20 02:28:18,385	[DEBUG]	
2020-12-20 02:28:19,494	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:28:20,558	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:28:21,570	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:28:22,572	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:28:25,906	[INFO]	254	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:28:25,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:28:26,927	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:28:26,929	[INFO]	256	SUCCESS	+2.0	
2020-12-20 02:28:26,929	[DEBUG]	
2020-12-20 02:28:27,962	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:28:28,959	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:28:29,997	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:28:31,070	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:28:32,102	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:28:33,143	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:28:34,207	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:28:35,194	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:28:36,218	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:28:39,578	[INFO]	266	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:28:39,579	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-20 02:28:39,580	[INFO]	267	SUCCESS	+2.0	
2020-12-20 02:28:39,581	[DEBUG]	
2020-12-20 02:28:42,935	[INFO]	268	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:28:42,936	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:28:42,937	[INFO]	269	SUCCESS	+2.0	
2020-12-20 02:28:42,937	[DEBUG]	
2020-12-20 02:28:43,966	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:28:47,363	[INFO]	271	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:28:47,364	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:28:48,383	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:28:49,393	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:28:49,395	[INFO]	274	SUCCESS	+2.0	
2020-12-20 02:28:49,395	[DEBUG]	
2020-12-20 02:28:50,411	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:28:51,368	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:28:54,655	[INFO]	277	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:28:54,656	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:28:55,706	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:28:55,708	[INFO]	279	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:28:55,709	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:28:55,710	[INFO]	280	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:28:55,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:28:55,713	[INFO]	281	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:28:55,714	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:28:55,715	[INFO]	282	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:28:55,715	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:28:55,716	[INFO]	283	SUCCESS	+2.0	
2020-12-20 02:28:55,717	[DEBUG]	
2020-12-20 02:28:56,723	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:28:57,734	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:28:58,730	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:28:59,727	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:29:00,751	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:29:01,771	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:29:02,787	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:29:02,790	[INFO]	291	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:29:02,791	[DEBUG]	
2020-12-20 02:29:02,793	[INFO]	292	SUCCESS	+2.0	
2020-12-20 02:29:02,793	[DEBUG]	
2020-12-20 02:29:03,866	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:29:04,887	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:29:05,906	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:29:09,259	[INFO]	296	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:29:09,260	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:29:09,261	[INFO]	297	SUCCESS	+2.0	
2020-12-20 02:29:09,261	[DEBUG]	
2020-12-20 02:29:12,568	[INFO]	298	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:29:12,569	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:29:15,867	[INFO]	299	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:29:15,868	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,33 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 23,34 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:29:16,913	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:29:16,915	[INFO]	301	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:29:16,915	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:29:16,916	[INFO]	302	SUCCESS	+2.0	
2020-12-20 02:29:16,916	[DEBUG]	
2020-12-20 02:29:17,938	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:29:21,267	[INFO]	304	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:29:21,268	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 02:29:21,270	[INFO]	305	SUCCESS	+2.0	
2020-12-20 02:29:21,270	[DEBUG]	
2020-12-20 02:29:22,280	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:29:37,351	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:29:38,276	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:29:39,156	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:29:42,233	[INFO]	310	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:29:42,234	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:29:42,235	[INFO]	311	SUCCESS	+2.0	
2020-12-20 02:29:42,235	[DEBUG]	
2020-12-20 02:29:43,231	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:29:44,267	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:29:45,304	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:29:46,335	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:29:47,346	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:29:48,389	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:29:51,731	[INFO]	318	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:29:51,732	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:29:51,733	[INFO]	319	SUCCESS	+2.0	
2020-12-20 02:29:51,733	[DEBUG]	
2020-12-20 02:29:52,758	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:29:56,190	[INFO]	321	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:29:56,191	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 02:29:57,158	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:29:57,159	[INFO]	323	SUCCESS	+2.0	
2020-12-20 02:29:57,160	[DEBUG]	
2020-12-20 02:29:58,176	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:30:01,535	[INFO]	325	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:30:01,536	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:30:01,537	[INFO]	326	SUCCESS	+2.0	
2020-12-20 02:30:01,537	[DEBUG]	
2020-12-20 02:30:02,538	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:30:03,565	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:30:04,555	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:30:05,579	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:30:06,616	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:30:10,019	[INFO]	332	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:30:10,020	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:30:10,021	[INFO]	333	SUCCESS	+2.0	
2020-12-20 02:30:10,021	[DEBUG]	
2020-12-20 02:30:10,969	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:30:12,020	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:30:15,435	[INFO]	336	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:30:15,437	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 02:30:15,438	[INFO]	337	SUCCESS	+2.0	
2020-12-20 02:30:15,439	[DEBUG]	
2020-12-20 02:30:16,434	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:30:17,436	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:30:20,834	[INFO]	340	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:30:20,835	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:30:20,835	[INFO]	341	SUCCESS	+2.0	
2020-12-20 02:30:20,836	[DEBUG]	
2020-12-20 02:30:21,828	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:30:22,838	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:30:23,843	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:30:24,860	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:30:25,903	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:30:26,919	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:30:27,917	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:30:28,936	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:30:32,289	[INFO]	350	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:30:32,290	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:30:32,291	[INFO]	351	SUCCESS	+2.0	
2020-12-20 02:30:32,292	[DEBUG]	
2020-12-20 02:30:33,307	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:30:34,327	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:30:35,470	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:30:36,826	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:30:38,015	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:30:39,281	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:30:40,727	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:30:40,729	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:30:42,092	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:30:46,076	[INFO]	361	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:30:46,077	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:30:46,078	[INFO]	362	SUCCESS	+2.0	
2020-12-20 02:30:46,078	[DEBUG]	
2020-12-20 02:30:49,755	[INFO]	363	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:30:49,756	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:30:50,749	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:30:50,751	[INFO]	365	SUCCESS	+2.0	
2020-12-20 02:30:50,751	[DEBUG]	
2020-12-20 02:30:51,785	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:30:52,788	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:30:53,810	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:30:54,868	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:30:55,846	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:30:56,856	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:30:57,942	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:30:58,946	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:30:59,986	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:31:01,000	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:31:02,021	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:31:03,054	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:31:04,059	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:31:05,060	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:31:06,101	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:31:07,157	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:31:08,177	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:31:09,220	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:31:10,238	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:31:11,254	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:31:11,256	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:31:14,674	[INFO]	387	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:31:14,675	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:31:14,676	[INFO]	388	SUCCESS	+2.0	
2020-12-20 02:31:14,676	[DEBUG]	
2020-12-20 02:31:15,706	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:31:16,720	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:31:17,781	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:31:21,132	[INFO]	392	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:31:21,133	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 02:31:21,134	[INFO]	393	SUCCESS	+2.0	
2020-12-20 02:31:21,134	[DEBUG]	
2020-12-20 02:31:22,167	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:31:22,168	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:31:23,188	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:31:24,174	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:31:25,119	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:31:26,139	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:31:27,146	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:31:28,131	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:31:29,125	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:31:30,175	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:31:31,174	[INFO]	404	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:31:32,212	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:31:33,231	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:31:34,273	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:31:35,277	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:31:36,330	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:31:36,332	[INFO]	410	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:31:36,332	[DEBUG]	
2020-12-20 02:31:36,333	[INFO]	411	SUCCESS	+2.0	
2020-12-20 02:31:36,333	[DEBUG]	
2020-12-20 02:31:37,381	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:31:38,429	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:31:39,524	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:31:40,555	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:31:41,639	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:31:45,075	[INFO]	417	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:31:45,076	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:31:46,163	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:31:47,242	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:31:47,243	[INFO]	420	SUCCESS	+2.0	
2020-12-20 02:31:47,243	[DEBUG]	
2020-12-20 02:31:50,618	[INFO]	421	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:31:50,619	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-20 02:31:50,620	[INFO]	422	SUCCESS	+2.0	
2020-12-20 02:31:50,620	[DEBUG]	
2020-12-20 02:31:53,960	[INFO]	423	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:31:53,962	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 02:31:57,307	[INFO]	424	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:31:57,308	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minDistance = distance;
              }
          }
          return minNode;

2020-12-20 02:31:58,325	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:31:59,384	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:32:00,424	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:32:00,426	[INFO]	428	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:32:00,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 02:32:01,441	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:32:04,900	[INFO]	430	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:32:04,901	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 50,55 ****
--- 63,69 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 02:32:05,904	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:32:06,947	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:32:07,984	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:32:07,985	[INFO]	434	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:32:07,986	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 02:32:07,986	[INFO]	435	SUCCESS	+2.0	
2020-12-20 02:32:07,987	[DEBUG]	
2020-12-20 02:32:09,015	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:32:24,088	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:32:27,089	[INFO]	438	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:32:27,090	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:32:27,090	[INFO]	439	SUCCESS	+2.0	
2020-12-20 02:32:27,091	[DEBUG]	
2020-12-20 02:32:30,222	[INFO]	440	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:32:30,223	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:32:30,224	[INFO]	441	SUCCESS	+2.0	
2020-12-20 02:32:30,224	[DEBUG]	
2020-12-20 02:32:31,273	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:32:34,625	[INFO]	443	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:32:34,625	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:32:35,664	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:32:35,667	[INFO]	445	SUCCESS	+2.0	
2020-12-20 02:32:35,667	[DEBUG]	
2020-12-20 02:32:36,730	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:32:37,750	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:32:38,793	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:32:42,164	[INFO]	449	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:32:42,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:32:45,484	[INFO]	450	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:32:45,485	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,30 ****
--- 25,32 ----
              }
              visitedNodes.add(node);
  
+             unvisitedNodes.remove(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 02:32:45,486	[INFO]	451	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:32:45,487	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:32:45,487	[INFO]	452	SUCCESS	+2.0	
2020-12-20 02:32:45,488	[DEBUG]	
2020-12-20 02:32:46,489	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:32:47,546	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:32:48,570	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:32:49,586	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:32:50,619	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:32:51,564	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:32:52,583	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:32:53,649	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:32:54,666	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:32:55,682	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:32:59,123	[INFO]	463	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 02:32:59,123	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:33:00,171	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:33:01,169	[INFO]	465	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:33:01,170	[INFO]	466	SUCCESS	+2.0	
2020-12-20 02:33:01,170	[DEBUG]	
2020-12-20 02:33:04,597	[INFO]	467	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:33:04,599	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:33:05,507	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:33:05,508	[INFO]	469	SUCCESS	+2.0	
2020-12-20 02:33:05,508	[DEBUG]	
2020-12-20 02:33:05,509	[INFO]	470	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-20 02:33:05,510	[DEBUG]	
2020-12-20 02:33:05,510	[INFO]	471	SUCCESS	+2.0	
2020-12-20 02:33:05,510	[DEBUG]	
2020-12-20 02:33:06,576	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:33:07,650	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:33:08,665	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:33:09,724	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:33:10,745	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:33:11,796	[INFO]	477	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:33:12,798	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:33:12,799	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:33:13,826	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:33:14,854	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:33:18,265	[INFO]	482	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:33:18,266	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:33:19,206	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:33:19,208	[INFO]	484	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:33:19,208	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:33:19,209	[INFO]	485	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:33:19,210	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:33:19,211	[INFO]	486	SUCCESS	+2.0	
2020-12-20 02:33:19,211	[DEBUG]	
2020-12-20 02:33:20,215	[INFO]	487	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:33:21,218	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:33:22,220	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:33:23,235	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:33:24,250	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:33:25,259	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:33:26,265	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:33:27,278	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:33:28,309	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:33:29,325	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:33:30,347	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:33:33,766	[INFO]	498	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:33:33,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-20 02:33:33,767	[INFO]	499	SUCCESS	+2.0	
2020-12-20 02:33:33,768	[DEBUG]	
2020-12-20 02:33:34,791	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:33:34,792	[INFO]	==== END ====
2020-12-20 02:33:34,792	[INFO]	Reason: step budget
2020-12-20 02:33:34,794	[INFO]	
2020-12-20 02:33:34,794	[INFO]	========== EPOCH 7 ==========
2020-12-20 02:33:34,795	[INFO]	==== WARMUP ====
2020-12-20 02:33:38,234	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:33:38,234	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:33:41,602	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:33:41,603	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:33:44,965	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:33:44,965	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:33:48,247	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 02:33:48,247	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:33:48,247	[INFO]	==== START ====
2020-12-20 02:33:51,554	[INFO]	1	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:33:51,556	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-20 02:33:51,558	[INFO]	2	SUCCESS	+2.0	
2020-12-20 02:33:51,559	[DEBUG]	
2020-12-20 02:33:52,575	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:33:53,585	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:33:56,937	[INFO]	5	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:33:56,938	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:33:57,908	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:33:58,930	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:33:59,998	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:34:01,026	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:34:01,027	[INFO]	10	SUCCESS	+2.0	
2020-12-20 02:34:01,028	[DEBUG]	
2020-12-20 02:34:02,045	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:34:03,077	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:34:04,077	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:34:05,081	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:34:06,119	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:34:07,160	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:34:08,167	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:34:08,168	[INFO]	18	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:34:08,169	[DEBUG]	
2020-12-20 02:34:09,212	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:34:09,214	[INFO]	20	SUCCESS	+2.0	
2020-12-20 02:34:09,215	[DEBUG]	
2020-12-20 02:34:12,609	[INFO]	21	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:34:12,611	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-20 02:34:12,612	[INFO]	22	SUCCESS	+2.0	
2020-12-20 02:34:12,613	[DEBUG]	
2020-12-20 02:34:13,608	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:34:14,602	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:34:17,968	[INFO]	25	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:34:17,969	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:34:17,969	[INFO]	26	SUCCESS	+2.0	
2020-12-20 02:34:17,970	[DEBUG]	
2020-12-20 02:34:18,953	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:34:22,246	[INFO]	28	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:34:22,247	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:34:22,248	[INFO]	29	SUCCESS	+2.0	
2020-12-20 02:34:22,248	[DEBUG]	
2020-12-20 02:34:23,255	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:34:26,488	[INFO]	31	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:34:27,489	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:34:30,822	[INFO]	33	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:34:30,823	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:34:30,823	[INFO]	34	SUCCESS	+2.0	
2020-12-20 02:34:30,824	[DEBUG]	
2020-12-20 02:34:34,189	[INFO]	35	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:34:34,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:34:34,191	[INFO]	36	SUCCESS	+2.0	
2020-12-20 02:34:34,191	[DEBUG]	
2020-12-20 02:34:35,147	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:34:38,500	[INFO]	38	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:34:38,501	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:34:39,494	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:34:40,517	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:34:41,545	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:34:44,877	[INFO]	42	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:34:44,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
! 
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:34:44,879	[INFO]	43	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:34:44,880	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:34:48,225	[INFO]	44	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:34:48,226	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 29,34 ****
--- 30,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:34:48,227	[INFO]	45	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:34:48,228	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:34:48,228	[INFO]	46	SUCCESS	+2.0	
2020-12-20 02:34:48,229	[DEBUG]	
2020-12-20 02:34:49,225	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:34:50,235	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:34:53,514	[INFO]	49	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:34:53,515	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:34:53,516	[INFO]	50	SUCCESS	+2.0	
2020-12-20 02:34:53,516	[DEBUG]	
2020-12-20 02:34:54,546	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:34:57,956	[INFO]	52	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:34:57,957	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:34:58,964	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:34:59,988	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:35:01,010	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:35:01,012	[INFO]	56	SUCCESS	+2.0	
2020-12-20 02:35:01,012	[DEBUG]	
2020-12-20 02:35:02,018	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:35:03,018	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:35:04,049	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:35:05,044	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:35:06,044	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:35:07,085	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:35:10,515	[INFO]	63	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:35:10,516	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:35:10,517	[INFO]	64	SUCCESS	+2.0	
2020-12-20 02:35:10,517	[DEBUG]	
2020-12-20 02:35:11,474	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:35:12,488	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:35:13,485	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:35:14,503	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:35:17,896	[INFO]	69	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:35:17,897	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:35:21,254	[INFO]	70	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:35:21,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-20 02:35:22,239	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:35:22,241	[INFO]	72	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:35:22,241	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:35:22,242	[INFO]	73	SUCCESS	+2.0	
2020-12-20 02:35:22,242	[DEBUG]	
2020-12-20 02:35:25,607	[INFO]	74	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:35:25,608	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:35:25,609	[INFO]	75	SUCCESS	+2.0	
2020-12-20 02:35:25,609	[DEBUG]	
2020-12-20 02:35:26,611	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:35:27,605	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:35:28,591	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:35:31,945	[INFO]	79	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:35:32,959	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:35:34,005	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:35:35,048	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:35:36,159	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:35:37,182	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:35:38,250	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:35:41,641	[INFO]	86	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:35:41,642	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:35:41,643	[INFO]	87	SUCCESS	+2.0	
2020-12-20 02:35:41,644	[DEBUG]	
2020-12-20 02:35:42,655	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:35:43,698	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:35:43,699	[INFO]	90	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:35:43,700	[DEBUG]	
2020-12-20 02:35:43,700	[INFO]	91	SUCCESS	+2.0	
2020-12-20 02:35:43,701	[DEBUG]	
2020-12-20 02:35:44,750	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:35:45,713	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:35:49,103	[INFO]	94	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:35:49,104	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 02:35:49,105	[INFO]	95	SUCCESS	+2.0	
2020-12-20 02:35:49,105	[DEBUG]	
2020-12-20 02:35:52,582	[INFO]	96	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:35:52,583	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:35:53,578	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:35:54,617	[INFO]	98	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:35:54,618	[INFO]	99	SUCCESS	+2.0	
2020-12-20 02:35:54,619	[DEBUG]	
2020-12-20 02:35:57,856	[INFO]	100	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:35:57,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 02:35:57,859	[INFO]	101	SUCCESS	+2.0	
2020-12-20 02:35:57,859	[DEBUG]	
2020-12-20 02:36:01,165	[INFO]	102	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:36:01,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:36:01,169	[INFO]	103	SUCCESS	+2.0	
2020-12-20 02:36:01,169	[DEBUG]	
2020-12-20 02:36:02,172	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:36:03,187	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:36:04,199	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:36:07,516	[INFO]	107	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:36:07,518	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:36:07,520	[INFO]	108	SUCCESS	+2.0	
2020-12-20 02:36:07,520	[DEBUG]	
2020-12-20 02:36:08,528	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:36:09,534	[INFO]	110	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:36:12,997	[INFO]	111	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:36:12,998	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 02:36:16,329	[INFO]	112	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:36:16,330	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,56 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-20 02:36:17,328	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:36:17,330	[INFO]	114	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:36:17,330	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,56 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-20 02:36:18,347	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:36:19,298	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:36:20,324	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:36:21,369	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:36:22,416	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:36:23,448	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:36:26,878	[INFO]	121	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:36:26,879	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-20 02:36:30,216	[INFO]	122	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 02:36:30,217	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 60,66 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:36:33,533	[INFO]	123	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 02:36:33,533	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:36:34,600	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:36:34,601	[INFO]	125	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:36:34,602	[DEBUG]	
2020-12-20 02:36:34,603	[INFO]	126	SUCCESS	+2.0	
2020-12-20 02:36:34,603	[DEBUG]	
2020-12-20 02:36:38,026	[INFO]	127	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:36:38,027	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:36:38,028	[INFO]	128	SUCCESS	+2.0	
2020-12-20 02:36:38,028	[DEBUG]	
2020-12-20 02:36:39,068	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:36:40,107	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:36:41,115	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:36:42,177	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:36:43,187	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:36:44,526	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:36:45,571	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:36:46,603	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:36:47,758	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:36:48,818	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:36:49,857	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:36:50,881	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:36:51,920	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:36:52,947	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:36:53,952	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:37:09,021	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:37:09,932	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:37:10,866	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:37:11,790	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:37:12,670	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:37:13,601	[INFO]	149	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:37:14,549	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:37:15,567	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:37:16,569	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:37:17,595	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:37:18,600	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:37:19,620	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:37:22,983	[INFO]	156	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:37:22,984	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:37:23,998	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:37:24,974	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:37:24,975	[INFO]	159	SUCCESS	+2.0	
2020-12-20 02:37:24,976	[DEBUG]	
2020-12-20 02:37:26,003	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:37:27,012	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:37:30,385	[INFO]	162	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:37:30,386	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-20 02:37:31,412	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:37:31,413	[INFO]	164	SUCCESS	+2.0	
2020-12-20 02:37:31,414	[DEBUG]	
2020-12-20 02:37:32,417	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:37:33,449	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:37:34,496	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:37:35,521	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:37:36,491	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:37:39,917	[INFO]	170	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:37:39,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:37:40,907	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:37:41,928	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:37:41,931	[INFO]	173	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:37:41,932	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:37:41,933	[INFO]	174	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:37:41,934	[DEBUG]	
2020-12-20 02:37:42,889	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:37:42,890	[INFO]	176	SUCCESS	+2.0	
2020-12-20 02:37:42,890	[DEBUG]	
2020-12-20 02:37:43,952	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:37:47,324	[INFO]	178	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:37:47,325	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-20 02:37:48,279	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:37:48,282	[INFO]	180	SUCCESS	+2.0	
2020-12-20 02:37:48,283	[DEBUG]	
2020-12-20 02:37:49,276	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:37:52,577	[INFO]	182	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:37:52,578	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:37:55,975	[INFO]	183	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:37:55,976	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 29,34 ****
--- 30,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:37:59,260	[INFO]	184	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:37:59,261	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 Node minNode = null;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:38:00,253	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:38:00,255	[INFO]	186	SUCCESS	+2.0	
2020-12-20 02:38:00,255	[DEBUG]	
2020-12-20 02:38:01,272	[INFO]	187	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-20 02:38:02,268	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:38:05,607	[INFO]	189	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:38:05,609	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:38:06,656	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:38:06,658	[INFO]	191	SUCCESS	+2.0	
2020-12-20 02:38:06,659	[DEBUG]	
2020-12-20 02:38:10,075	[INFO]	192	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:38:13,431	[INFO]	193	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:38:13,433	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:38:14,436	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:38:17,766	[INFO]	195	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:38:17,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 29,34 ****
--- 30,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:38:17,768	[INFO]	196	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:38:17,769	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:38:18,770	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:38:22,205	[INFO]	198	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:38:22,206	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 48,53 ****
--- 50,59 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:38:22,207	[INFO]	199	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:38:22,208	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:38:25,560	[INFO]	200	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:38:25,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,34 ****
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
+ 
+                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:38:25,562	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:38:25,563	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:38:25,563	[INFO]	202	SUCCESS	+2.0	
2020-12-20 02:38:25,564	[DEBUG]	
2020-12-20 02:38:26,598	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:38:27,626	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:38:30,946	[INFO]	205	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:38:30,949	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 02:38:30,950	[INFO]	206	SUCCESS	+2.0	
2020-12-20 02:38:30,951	[DEBUG]	
2020-12-20 02:38:31,983	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:38:32,993	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:38:36,430	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:38:36,431	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 02:38:37,421	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:38:38,489	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:38:38,491	[INFO]	212	SUCCESS	+2.0	
2020-12-20 02:38:38,492	[DEBUG]	
2020-12-20 02:38:39,477	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:38:40,539	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:38:41,539	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:38:41,540	[INFO]	216	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:38:41,541	[DEBUG]	
2020-12-20 02:38:42,577	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:38:45,992	[INFO]	218	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:38:45,993	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:38:47,016	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:38:47,018	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:38:47,019	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:38:50,390	[INFO]	221	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:38:50,391	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,25 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+             unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 26,31 ****
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:38:53,740	[INFO]	222	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:38:53,741	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:38:53,742	[INFO]	223	SUCCESS	+2.0	
2020-12-20 02:38:53,743	[DEBUG]	
2020-12-20 02:38:54,777	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:38:58,134	[INFO]	225	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:38:58,135	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:38:59,175	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:38:59,178	[INFO]	227	SUCCESS	+2.0	
2020-12-20 02:38:59,179	[DEBUG]	
2020-12-20 02:39:00,197	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:39:03,636	[INFO]	229	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-20 02:39:03,637	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:39:03,638	[INFO]	230	SUCCESS	+2.0	
2020-12-20 02:39:03,638	[DEBUG]	
2020-12-20 02:39:04,629	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:39:04,632	[INFO]	232	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:39:04,633	[DEBUG]	
2020-12-20 02:39:04,635	[INFO]	233	SUCCESS	+2.0	
2020-12-20 02:39:04,635	[DEBUG]	
2020-12-20 02:39:05,658	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:39:09,020	[INFO]	235	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:39:09,021	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 02:39:09,022	[INFO]	236	SUCCESS	+2.0	
2020-12-20 02:39:09,022	[DEBUG]	
2020-12-20 02:39:10,031	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:39:13,453	[INFO]	238	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:39:14,467	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:39:15,528	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:39:16,555	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:39:19,818	[INFO]	242	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:39:20,838	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:39:21,850	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:39:22,881	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:39:23,864	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:39:24,889	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:39:25,917	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:39:25,919	[INFO]	249	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:39:25,919	[DEBUG]	
2020-12-20 02:39:26,927	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:39:26,928	[INFO]	251	SUCCESS	+2.0	
2020-12-20 02:39:26,928	[DEBUG]	
2020-12-20 02:39:27,949	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:39:29,008	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:39:30,026	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:39:31,068	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:39:32,108	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:39:35,506	[INFO]	257	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:39:35,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:39:36,518	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:39:36,520	[INFO]	259	SUCCESS	+2.0	
2020-12-20 02:39:36,521	[DEBUG]	
2020-12-20 02:39:37,537	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:39:40,904	[INFO]	261	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:39:40,905	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:39:40,906	[INFO]	262	SUCCESS	+2.0	
2020-12-20 02:39:40,906	[DEBUG]	
2020-12-20 02:39:41,892	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:39:45,319	[INFO]	264	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:39:45,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:39:45,321	[INFO]	265	SUCCESS	+2.0	
2020-12-20 02:39:45,321	[DEBUG]	
2020-12-20 02:39:48,631	[INFO]	266	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:39:48,632	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:39:48,633	[INFO]	267	SUCCESS	+2.0	
2020-12-20 02:39:48,633	[DEBUG]	
2020-12-20 02:39:49,674	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:39:50,758	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:39:51,772	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:39:52,792	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:39:53,821	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:39:57,187	[INFO]	273	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:39:57,188	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 02:39:58,171	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:39:59,152	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:39:59,153	[INFO]	276	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:39:59,154	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 02:40:02,623	[INFO]	277	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:40:02,624	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 02:40:02,624	[INFO]	278	SUCCESS	+2.0	
2020-12-20 02:40:02,625	[DEBUG]	
2020-12-20 02:40:02,625	[INFO]	279	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:40:02,626	[DEBUG]	
2020-12-20 02:40:05,906	[INFO]	280	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:40:05,908	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 02:40:06,915	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:40:10,312	[INFO]	282	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:40:10,313	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 39,44 ****
--- 40,47 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:40:10,314	[INFO]	283	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:40:10,315	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 39,44 ****
--- 40,47 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:40:10,316	[INFO]	284	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:40:10,317	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 02:40:10,317	[INFO]	285	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:40:10,318	[DEBUG]	
2020-12-20 02:40:11,304	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:40:11,305	[INFO]	287	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:40:11,305	[DEBUG]	
2020-12-20 02:40:12,318	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:40:12,319	[INFO]	289	SUCCESS	+2.0	
2020-12-20 02:40:12,319	[DEBUG]	
2020-12-20 02:40:12,320	[INFO]	290	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:40:12,321	[DEBUG]	
2020-12-20 02:40:12,321	[INFO]	291	SUCCESS	+2.0	
2020-12-20 02:40:12,322	[DEBUG]	
2020-12-20 02:40:13,319	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:40:14,348	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:40:15,365	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:40:16,391	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:40:19,693	[INFO]	296	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:40:20,711	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:40:24,081	[INFO]	298	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:40:24,082	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 02:40:24,082	[INFO]	299	SUCCESS	+2.0	
2020-12-20 02:40:24,083	[DEBUG]	
2020-12-20 02:40:25,094	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:40:26,168	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:40:29,526	[INFO]	302	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:40:29,527	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 02:40:29,527	[INFO]	303	SUCCESS	+2.0	
2020-12-20 02:40:29,528	[DEBUG]	
2020-12-20 02:40:30,461	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:40:33,874	[INFO]	305	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:40:37,865	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:40:37,866	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:40:37,867	[INFO]	307	SUCCESS	+2.0	
2020-12-20 02:40:37,867	[DEBUG]	
2020-12-20 02:40:39,163	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:40:40,467	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:40:41,531	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:40:42,526	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:40:43,595	[INFO]	312	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-20 02:40:44,655	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:40:59,714	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:41:00,618	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:41:01,548	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:41:02,450	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:41:03,424	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:41:04,374	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:41:07,552	[INFO]	320	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:41:07,554	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:41:08,522	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:41:08,524	[INFO]	322	SUCCESS	+2.0	
2020-12-20 02:41:08,525	[DEBUG]	
2020-12-20 02:41:09,469	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:41:10,486	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:41:13,814	[INFO]	325	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:41:13,815	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:41:14,801	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:41:14,802	[INFO]	327	SUCCESS	+2.0	
2020-12-20 02:41:14,802	[DEBUG]	
2020-12-20 02:41:15,837	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:41:16,874	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:41:17,882	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:41:21,244	[INFO]	331	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:41:22,276	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:41:25,663	[INFO]	333	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:41:25,664	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:41:25,665	[INFO]	334	SUCCESS	+2.0	
2020-12-20 02:41:25,665	[DEBUG]	
2020-12-20 02:41:26,616	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:41:27,615	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:41:28,615	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:41:29,642	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:41:30,690	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:41:30,692	[INFO]	340	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:41:30,692	[DEBUG]	
2020-12-20 02:41:30,693	[INFO]	341	SUCCESS	+2.0	
2020-12-20 02:41:30,693	[DEBUG]	
2020-12-20 02:41:30,694	[INFO]	342	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:41:30,694	[DEBUG]	
2020-12-20 02:41:30,695	[INFO]	343	SUCCESS	+2.0	
2020-12-20 02:41:30,695	[DEBUG]	
2020-12-20 02:41:31,732	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:41:32,785	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:41:33,842	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:41:34,851	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:41:35,924	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:41:36,989	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:41:37,999	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:41:39,021	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:41:40,046	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:41:41,090	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:41:42,165	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:41:43,257	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:41:44,318	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:41:45,363	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:41:46,419	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:41:47,493	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:41:48,542	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:41:49,607	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:41:50,603	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:41:51,597	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:41:52,626	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:41:53,650	[INFO]	365	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:41:54,637	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:41:55,690	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:41:56,715	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:41:57,736	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:41:58,750	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:41:59,770	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:42:00,780	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:42:01,810	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:42:02,808	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:42:03,849	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:42:04,873	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:42:08,278	[INFO]	377	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:42:08,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:42:08,280	[INFO]	378	SUCCESS	+2.0	
2020-12-20 02:42:08,281	[DEBUG]	
2020-12-20 02:42:09,282	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:42:10,269	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:42:11,259	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:42:12,312	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:42:13,350	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:42:14,375	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:42:29,438	[INFO]	385	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:42:30,372	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:42:33,383	[INFO]	387	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:42:33,384	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:42:33,385	[INFO]	388	SUCCESS	+2.0	
2020-12-20 02:42:33,385	[DEBUG]	
2020-12-20 02:42:34,351	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:42:37,442	[INFO]	390	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:42:37,444	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-20 02:42:38,493	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:42:38,494	[INFO]	392	SUCCESS	+2.0	
2020-12-20 02:42:38,494	[DEBUG]	
2020-12-20 02:42:39,508	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:42:42,914	[INFO]	394	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:42:42,915	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 02:42:43,833	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:42:43,834	[INFO]	396	SUCCESS	+2.0	
2020-12-20 02:42:43,834	[DEBUG]	
2020-12-20 02:42:44,873	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:42:48,386	[INFO]	398	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:42:48,387	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:42:48,388	[INFO]	399	SUCCESS	+2.0	
2020-12-20 02:42:48,388	[DEBUG]	
2020-12-20 02:42:51,817	[INFO]	400	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:42:52,812	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:42:53,841	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:42:54,871	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:42:58,182	[INFO]	404	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:42:58,183	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:42:58,183	[INFO]	405	SUCCESS	+2.0	
2020-12-20 02:42:58,184	[DEBUG]	
2020-12-20 02:42:59,197	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:43:00,216	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:43:01,260	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:43:02,262	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:43:03,307	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:43:04,310	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:43:05,316	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:43:06,357	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:43:07,358	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:43:10,625	[INFO]	415	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:43:11,633	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:43:15,027	[INFO]	417	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:43:15,028	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:43:15,029	[INFO]	418	SUCCESS	+2.0	
2020-12-20 02:43:15,029	[DEBUG]	
2020-12-20 02:43:16,018	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:43:17,071	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:43:18,085	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:43:19,099	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:43:22,500	[INFO]	423	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:43:23,541	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:43:27,019	[INFO]	425	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:43:27,020	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:43:30,240	[INFO]	426	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:43:30,241	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  
***************
*** 48,53 ****
--- 47,53 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:43:31,199	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:43:31,202	[INFO]	428	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:43:31,203	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:43:31,204	[INFO]	429	SUCCESS	+2.0	
2020-12-20 02:43:31,205	[DEBUG]	
2020-12-20 02:43:32,250	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:43:33,270	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:43:34,319	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:43:35,321	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:43:38,686	[INFO]	434	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:43:38,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:43:39,633	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:43:39,635	[INFO]	436	SUCCESS	+2.0	
2020-12-20 02:43:39,636	[DEBUG]	
2020-12-20 02:43:40,637	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:43:41,646	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:43:42,644	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:43:43,671	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:43:44,710	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:43:45,790	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:43:46,854	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:43:47,889	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:43:48,910	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:43:49,944	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:43:50,997	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:43:51,972	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:43:55,242	[INFO]	449	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:43:55,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 02:43:55,244	[INFO]	450	SUCCESS	+2.0	
2020-12-20 02:43:55,244	[DEBUG]	
2020-12-20 02:43:55,245	[INFO]	451	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:43:55,245	[DEBUG]	
2020-12-20 02:43:58,664	[INFO]	452	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:43:58,665	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 02:43:58,666	[INFO]	453	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:43:58,666	[DEBUG]	
2020-12-20 02:43:59,650	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:43:59,651	[INFO]	455	SUCCESS	+2.0	
2020-12-20 02:43:59,651	[DEBUG]	
2020-12-20 02:44:03,030	[INFO]	456	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:44:03,031	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:44:04,022	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:44:04,024	[INFO]	458	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:44:04,024	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:44:04,025	[INFO]	459	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:44:04,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:44:04,027	[INFO]	460	SUCCESS	+2.0	
2020-12-20 02:44:04,027	[DEBUG]	
2020-12-20 02:44:04,028	[INFO]	461	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:44:04,028	[DEBUG]	
2020-12-20 02:44:04,029	[INFO]	462	SUCCESS	+2.0	
2020-12-20 02:44:04,029	[DEBUG]	
2020-12-20 02:44:05,038	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:44:06,049	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:44:07,079	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:44:08,092	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:44:08,093	[INFO]	467	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:44:08,094	[DEBUG]	
2020-12-20 02:44:08,094	[INFO]	468	SUCCESS	+2.0	
2020-12-20 02:44:08,095	[DEBUG]	
2020-12-20 02:44:09,124	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:44:10,153	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:44:11,168	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:44:12,202	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:44:13,236	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:44:14,249	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:44:15,254	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:44:16,243	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:44:17,257	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:44:20,679	[INFO]	478	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:44:21,635	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:44:22,687	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:44:23,732	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:44:24,783	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:44:25,797	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:44:26,827	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:44:27,826	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:44:28,814	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:44:29,822	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:44:30,868	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:44:31,858	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:44:31,860	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:44:32,884	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:44:33,934	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:44:34,968	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:44:35,984	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:44:36,998	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:44:38,029	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:44:39,034	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:44:40,060	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:44:41,064	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:44:42,129	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:44:42,130	[INFO]	==== END ====
2020-12-20 02:44:42,130	[INFO]	Reason: step budget
2020-12-20 02:44:42,131	[INFO]	
2020-12-20 02:44:42,131	[INFO]	========== EPOCH 8 ==========
2020-12-20 02:44:42,132	[INFO]	==== WARMUP ====
2020-12-20 02:44:45,509	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:44:45,509	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:44:48,972	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:44:48,972	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:44:52,187	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:44:52,187	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:44:55,488	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 02:44:55,488	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:44:55,489	[INFO]	==== START ====
2020-12-20 02:44:58,814	[INFO]	1	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:44:58,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 02:44:58,816	[INFO]	2	SUCCESS	+2.0	
2020-12-20 02:44:58,817	[DEBUG]	
2020-12-20 02:44:59,789	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:45:03,186	[INFO]	4	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:45:03,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-20 02:45:04,132	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:45:04,133	[INFO]	6	SUCCESS	+2.0	
2020-12-20 02:45:04,133	[DEBUG]	
2020-12-20 02:45:05,122	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:45:06,152	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:45:07,175	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:45:08,166	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:45:09,172	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:45:10,202	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:45:11,214	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:45:12,223	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:45:13,235	[INFO]	15	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 02:45:16,601	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:45:16,602	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:45:19,903	[INFO]	17	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:45:19,904	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 32,39 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:45:19,905	[INFO]	18	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:45:19,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:45:19,906	[INFO]	19	SUCCESS	+2.0	
2020-12-20 02:45:19,906	[DEBUG]	
2020-12-20 02:45:23,260	[INFO]	20	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:45:26,637	[INFO]	21	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:45:30,042	[INFO]	22	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:45:30,044	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:45:31,008	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:45:31,009	[INFO]	24	SUCCESS	+2.0	
2020-12-20 02:45:31,009	[DEBUG]	
2020-12-20 02:45:31,976	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:45:32,986	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:45:36,426	[INFO]	27	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:45:36,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-20 02:45:37,355	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:45:37,356	[INFO]	29	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:45:37,357	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-20 02:45:37,358	[INFO]	30	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:45:37,358	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-20 02:45:37,359	[INFO]	31	SUCCESS	+2.0	
2020-12-20 02:45:37,359	[DEBUG]	
2020-12-20 02:45:38,406	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:45:39,507	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:45:40,550	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:45:41,572	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:45:41,573	[INFO]	36	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:45:42,619	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:45:43,691	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:45:44,703	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:45:45,753	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:45:46,769	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:45:47,813	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:45:48,846	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:45:52,291	[INFO]	44	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:45:52,292	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:45:52,293	[INFO]	45	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:45:52,294	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:45:52,295	[INFO]	46	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:45:52,295	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:45:52,296	[INFO]	47	SUCCESS	+2.0	
2020-12-20 02:45:52,296	[DEBUG]	
2020-12-20 02:45:53,246	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:45:54,236	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:45:55,248	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:45:56,273	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:45:57,273	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:45:58,340	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:45:58,341	[INFO]	54	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:45:58,342	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:46:01,640	[INFO]	55	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:46:01,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 31,36 ****
--- 33,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:46:01,642	[INFO]	56	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:46:01,643	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 31,36 ****
--- 33,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:46:02,644	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:46:03,675	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:46:03,678	[INFO]	59	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:46:03,679	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:46:04,688	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:46:05,741	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:46:05,743	[INFO]	62	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:46:05,744	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:46:05,744	[INFO]	63	SUCCESS	+2.0	
2020-12-20 02:46:05,745	[DEBUG]	
2020-12-20 02:46:06,755	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:46:07,764	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:46:08,794	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:46:09,787	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:46:10,803	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:46:11,823	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:46:12,829	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:46:16,127	[INFO]	71	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:46:16,128	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:46:17,149	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:46:17,152	[INFO]	73	SUCCESS	+2.0	
2020-12-20 02:46:17,152	[DEBUG]	
2020-12-20 02:46:18,208	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:46:19,203	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:46:20,226	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:46:21,275	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:46:22,308	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:46:23,333	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:46:24,378	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:46:25,485	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:46:26,504	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:46:27,546	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:46:28,537	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:46:31,912	[INFO]	85	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:46:31,913	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:46:31,914	[INFO]	86	SUCCESS	+2.0	
2020-12-20 02:46:31,914	[DEBUG]	
2020-12-20 02:46:32,925	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:46:34,030	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:46:35,033	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:46:38,395	[INFO]	90	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:46:38,396	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:46:39,384	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:46:40,448	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:46:40,451	[INFO]	93	SUCCESS	+2.0	
2020-12-20 02:46:40,452	[DEBUG]	
2020-12-20 02:46:41,480	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:46:45,121	[INFO]	95	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:46:46,153	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:46:47,220	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:46:50,640	[INFO]	98	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:46:50,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:46:50,642	[INFO]	99	SUCCESS	+2.0	
2020-12-20 02:46:50,643	[DEBUG]	
2020-12-20 02:46:53,849	[INFO]	100	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:46:53,850	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 02:46:53,851	[INFO]	101	SUCCESS	+2.0	
2020-12-20 02:46:53,852	[DEBUG]	
2020-12-20 02:46:54,838	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:46:55,887	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:46:59,186	[INFO]	104	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:46:59,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:46:59,188	[INFO]	105	SUCCESS	+2.0	
2020-12-20 02:46:59,189	[DEBUG]	
2020-12-20 02:47:00,224	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:47:01,232	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:47:02,242	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:47:05,569	[INFO]	109	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:47:05,570	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:47:06,599	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:47:07,640	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:47:08,655	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:47:08,657	[INFO]	113	SUCCESS	+2.0	
2020-12-20 02:47:08,658	[DEBUG]	
2020-12-20 02:47:09,688	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:47:13,028	[INFO]	115	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:47:13,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-20 02:47:13,030	[INFO]	116	SUCCESS	+2.0	
2020-12-20 02:47:13,030	[DEBUG]	
2020-12-20 02:47:14,017	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:47:15,026	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:47:16,045	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:47:17,065	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:47:18,290	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:47:19,304	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:47:34,377	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:47:35,263	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:47:36,137	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:47:37,023	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:47:40,325	[INFO]	127	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:47:40,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:47:40,327	[INFO]	128	SUCCESS	+2.0	
2020-12-20 02:47:40,327	[DEBUG]	
2020-12-20 02:47:41,320	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:47:42,334	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:47:43,414	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:47:44,409	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:47:47,836	[INFO]	133	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:47:47,837	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:47:47,837	[INFO]	134	SUCCESS	+2.0	
2020-12-20 02:47:47,838	[DEBUG]	
2020-12-20 02:47:48,820	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:47:49,903	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:47:50,973	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:47:52,019	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:47:52,022	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:47:53,034	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:47:56,540	[INFO]	141	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:47:56,541	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:47:56,542	[INFO]	142	SUCCESS	+2.0	
2020-12-20 02:47:56,542	[DEBUG]	
2020-12-20 02:47:59,966	[INFO]	143	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:47:59,967	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:48:01,007	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:48:01,008	[INFO]	145	SUCCESS	+2.0	
2020-12-20 02:48:01,009	[DEBUG]	
2020-12-20 02:48:02,018	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:48:03,038	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:48:04,056	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:48:07,365	[INFO]	149	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:48:07,366	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:48:08,387	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:48:09,392	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:48:10,437	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:48:11,431	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:48:11,432	[INFO]	154	SUCCESS	+2.0	
2020-12-20 02:48:11,432	[DEBUG]	
2020-12-20 02:48:12,451	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:48:13,493	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:48:16,938	[INFO]	157	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:48:16,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,40 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:48:16,940	[INFO]	158	SUCCESS	+2.0	
2020-12-20 02:48:16,940	[DEBUG]	
2020-12-20 02:48:17,951	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:48:18,966	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:48:19,983	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:48:20,999	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:48:22,013	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:48:23,045	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:48:26,452	[INFO]	165	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:48:41,521	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:48:42,417	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:48:43,338	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:48:44,235	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:48:45,132	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:48:46,055	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:49:01,125	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:49:04,226	[INFO]	173	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:49:05,119	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:49:06,042	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:49:09,326	[INFO]	176	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:49:09,328	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:49:10,407	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:49:10,409	[INFO]	178	SUCCESS	+2.0	
2020-12-20 02:49:10,410	[DEBUG]	
2020-12-20 02:49:11,520	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:49:12,515	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:49:13,532	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:49:14,552	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:49:15,588	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:49:16,593	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:49:17,619	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:49:18,628	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:49:19,670	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:49:20,683	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:49:21,726	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:49:22,740	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:49:23,741	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:49:27,069	[INFO]	192	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:49:27,070	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 02:49:30,317	[INFO]	193	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:49:30,318	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 52,57 ****
--- 51,63 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 02:49:30,319	[INFO]	194	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:49:30,319	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 02:49:33,634	[INFO]	195	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:49:33,636	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 52,57 ****
--- 53,65 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 02:49:34,664	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:49:38,025	[INFO]	197	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:49:38,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:49:38,026	[INFO]	198	SUCCESS	+2.0	
2020-12-20 02:49:38,027	[DEBUG]	
2020-12-20 02:49:42,505	[INFO]	199	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-20 02:49:43,552	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:49:46,957	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:49:46,958	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:49:46,959	[INFO]	202	SUCCESS	+2.0	
2020-12-20 02:49:46,959	[DEBUG]	
2020-12-20 02:50:02,014	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:50:02,909	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:50:03,824	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:50:04,710	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:50:05,647	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:50:06,585	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:50:09,756	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:50:09,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 02:50:09,758	[INFO]	210	SUCCESS	+2.0	
2020-12-20 02:50:09,758	[DEBUG]	
2020-12-20 02:50:10,644	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:50:11,602	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:50:12,627	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:50:13,660	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:50:14,678	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:50:15,734	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:50:16,740	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:50:17,778	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:50:21,180	[INFO]	219	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:50:21,181	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:50:21,182	[INFO]	220	SUCCESS	+2.0	
2020-12-20 02:50:21,182	[DEBUG]	
2020-12-20 02:50:22,171	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:50:23,194	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:50:26,564	[INFO]	223	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:50:26,565	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:50:27,582	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:50:28,547	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:50:28,548	[INFO]	226	SUCCESS	+2.0	
2020-12-20 02:50:28,548	[DEBUG]	
2020-12-20 02:50:29,537	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:50:30,538	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:50:31,604	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:50:32,612	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:50:36,444	[INFO]	231	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:50:37,661	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:50:38,856	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:50:40,274	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:50:41,412	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:50:45,493	[INFO]	236	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:50:45,494	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:50:46,714	[INFO]	237	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:50:46,715	[INFO]	238	SUCCESS	+2.0	
2020-12-20 02:50:46,716	[DEBUG]	
2020-12-20 02:50:48,150	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:50:49,182	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:50:50,231	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:50:51,252	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:50:52,262	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:50:55,615	[INFO]	244	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:50:55,616	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-20 02:50:55,617	[INFO]	245	SUCCESS	+2.0	
2020-12-20 02:50:55,617	[DEBUG]	
2020-12-20 02:50:58,970	[INFO]	246	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:50:58,971	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:50:58,971	[INFO]	247	SUCCESS	+2.0	
2020-12-20 02:50:58,972	[DEBUG]	
2020-12-20 02:50:59,970	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:51:00,986	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:51:01,968	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:51:02,997	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:51:04,019	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:51:05,007	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:51:06,032	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-20 02:51:07,088	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:51:08,109	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:51:09,114	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:51:10,146	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:51:11,170	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:51:12,211	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:51:13,237	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:51:14,263	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:51:17,648	[INFO]	263	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:51:17,649	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:51:21,136	[INFO]	264	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:51:21,137	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 48,53 ****
--- 72,78 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:51:21,138	[INFO]	265	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:51:21,139	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:51:24,394	[INFO]	266	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:51:24,396	[INFO]	267	SUCCESS	+2.0	
2020-12-20 02:51:24,396	[DEBUG]	
2020-12-20 02:51:25,395	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:51:26,388	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:51:27,364	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:51:28,396	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:51:31,714	[INFO]	272	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 02:51:31,714	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:51:32,713	[INFO]	273	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:51:36,081	[INFO]	274	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:51:36,082	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 38,44 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:51:39,330	[INFO]	275	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:51:39,331	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-20 02:51:39,332	[INFO]	276	SUCCESS	+2.0	
2020-12-20 02:51:39,332	[DEBUG]	
2020-12-20 02:51:40,319	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:51:41,351	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:51:42,428	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:51:43,512	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:51:46,979	[INFO]	281	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:51:48,013	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:51:51,398	[INFO]	283	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:51:51,399	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:51:51,399	[INFO]	284	SUCCESS	+2.0	
2020-12-20 02:51:51,400	[DEBUG]	
2020-12-20 02:51:52,415	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:51:53,436	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:51:54,496	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:51:55,488	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:51:56,469	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:51:57,514	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:52:00,866	[INFO]	291	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:52:00,867	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:52:01,796	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:52:01,798	[INFO]	293	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:52:01,798	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:52:01,799	[INFO]	294	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:52:01,800	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 02:52:02,833	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:52:06,210	[INFO]	296	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-20 02:52:07,254	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:52:08,297	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:52:09,312	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:52:09,314	[INFO]	300	SUCCESS	+2.0	
2020-12-20 02:52:09,315	[DEBUG]	
2020-12-20 02:52:10,306	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:52:13,646	[INFO]	302	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:52:14,646	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:52:15,650	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:52:16,649	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:52:17,701	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:52:18,705	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:52:19,738	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:52:20,775	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:52:24,117	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:52:24,118	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 02:52:25,119	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:52:25,120	[INFO]	312	SUCCESS	+2.0	
2020-12-20 02:52:25,121	[DEBUG]	
2020-12-20 02:52:28,459	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:52:28,460	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:52:31,768	[INFO]	314	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:52:31,770	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,53 ****
--- 46,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:52:35,107	[INFO]	315	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:52:35,108	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:52:36,106	[INFO]	316	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:52:36,108	[INFO]	317	SUCCESS	+2.0	
2020-12-20 02:52:36,108	[DEBUG]	
2020-12-20 02:52:37,177	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:52:40,481	[INFO]	319	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:52:40,482	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:52:43,841	[INFO]	320	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:52:43,843	[INFO]	321	SUCCESS	+2.0	
2020-12-20 02:52:43,843	[DEBUG]	
2020-12-20 02:52:44,858	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:52:45,869	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:52:46,901	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:52:47,972	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:52:51,437	[INFO]	326	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:52:51,438	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:52:51,439	[INFO]	327	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:52:51,439	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:52:54,693	[INFO]	328	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:52:54,694	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 48,53 ****
--- 49,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:52:54,696	[INFO]	329	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:52:54,697	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 48,53 ****
--- 49,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:52:57,990	[INFO]	330	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:52:57,991	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:52:58,960	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:52:59,996	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:53:01,019	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:53:02,013	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:53:17,084	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:53:17,085	[INFO]	336	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:53:17,086	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:53:17,086	[INFO]	337	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:53:17,087	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:53:18,026	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:53:18,960	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:53:22,089	[INFO]	340	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:53:22,091	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  
***************
*** 48,53 ****
--- 47,53 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:53:25,354	[INFO]	341	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:53:25,356	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  
***************
*** 48,53 ****
--- 47,53 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:53:26,323	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:53:29,726	[INFO]	343	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:53:29,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 02:53:33,135	[INFO]	344	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:53:33,136	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:53:33,137	[INFO]	345	SUCCESS	+2.0	
2020-12-20 02:53:33,137	[DEBUG]	
2020-12-20 02:53:36,480	[INFO]	346	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:53:36,481	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 02:53:37,474	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:53:37,477	[INFO]	348	SUCCESS	+2.0	
2020-12-20 02:53:37,478	[DEBUG]	
2020-12-20 02:53:38,507	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:53:39,523	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:53:40,534	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 02:53:41,546	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:53:42,515	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:53:45,913	[INFO]	354	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:53:45,914	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 02:53:46,894	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:53:47,958	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:53:47,960	[INFO]	357	SUCCESS	+2.0	
2020-12-20 02:53:47,960	[DEBUG]	
2020-12-20 02:53:48,979	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:53:50,001	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:53:51,048	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:53:52,082	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:53:55,435	[INFO]	362	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:53:55,436	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:53:55,437	[INFO]	363	SUCCESS	+2.0	
2020-12-20 02:53:55,437	[DEBUG]	
2020-12-20 02:53:56,415	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:53:57,331	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:53:58,331	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:53:59,340	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:54:00,371	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:54:01,409	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:54:02,416	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:54:03,454	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:54:04,483	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:54:05,469	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:54:06,471	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:54:07,526	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:54:08,523	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:54:09,584	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:54:10,570	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:54:10,571	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:54:11,615	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:54:12,650	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:54:13,696	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:54:17,004	[INFO]	383	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:54:20,368	[INFO]	384	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:54:20,369	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 02:54:21,335	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:54:22,360	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:54:22,361	[INFO]	387	SUCCESS	+2.0	
2020-12-20 02:54:22,362	[DEBUG]	
2020-12-20 02:54:23,304	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:54:24,370	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:54:25,404	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:54:28,764	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:54:28,765	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:54:32,100	[INFO]	392	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:54:32,101	[INFO]	393	SUCCESS	+2.0	
2020-12-20 02:54:32,101	[DEBUG]	
2020-12-20 02:54:33,109	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:54:34,193	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:54:34,194	[INFO]	396	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:54:34,195	[DEBUG]	
2020-12-20 02:54:35,215	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:54:35,218	[INFO]	398	SUCCESS	+2.0	
2020-12-20 02:54:35,219	[DEBUG]	
2020-12-20 02:54:36,177	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:54:37,203	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:54:38,235	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:54:39,232	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:54:39,234	[INFO]	403	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:54:39,234	[DEBUG]	
2020-12-20 02:54:39,235	[INFO]	404	SUCCESS	+2.0	
2020-12-20 02:54:39,235	[DEBUG]	
2020-12-20 02:54:40,241	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:54:41,273	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:54:44,596	[INFO]	407	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:54:44,597	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:54:45,621	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:54:45,624	[INFO]	409	SUCCESS	+2.0	
2020-12-20 02:54:45,624	[DEBUG]	
2020-12-20 02:54:46,666	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:54:47,737	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:54:51,120	[INFO]	412	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:54:51,121	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:54:51,122	[INFO]	413	SUCCESS	+2.0	
2020-12-20 02:54:51,122	[DEBUG]	
2020-12-20 02:54:52,204	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:54:53,244	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:54:54,331	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:54:55,413	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:54:56,502	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:54:57,582	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:54:58,663	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:54:59,778	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:55:00,859	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:55:01,992	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:55:03,053	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:55:04,103	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:55:04,104	[INFO]	426	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:55:04,105	[DEBUG]	
2020-12-20 02:55:07,546	[INFO]	427	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:55:07,548	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,40 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:55:07,550	[INFO]	428	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:55:07,551	[DEBUG]	
2020-12-20 02:55:07,552	[INFO]	429	SUCCESS	+2.0	
2020-12-20 02:55:07,553	[DEBUG]	
2020-12-20 02:55:08,561	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:55:09,637	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:55:10,659	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:55:11,688	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:55:12,711	[INFO]	434	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:55:13,725	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:55:14,798	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:55:15,813	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:55:15,815	[INFO]	438	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:55:15,815	[DEBUG]	
2020-12-20 02:55:16,832	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:55:17,869	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:55:17,871	[INFO]	441	SUCCESS	+2.0	
2020-12-20 02:55:17,871	[DEBUG]	
2020-12-20 02:55:18,900	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:55:19,906	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:55:20,938	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:55:24,261	[INFO]	445	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:55:24,262	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 02:55:24,263	[INFO]	446	SUCCESS	+2.0	
2020-12-20 02:55:24,264	[DEBUG]	
2020-12-20 02:55:25,257	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:55:26,281	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:55:27,286	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:55:30,706	[INFO]	450	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:55:30,707	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:55:31,702	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:55:31,704	[INFO]	452	SUCCESS	+2.0	
2020-12-20 02:55:31,705	[DEBUG]	
2020-12-20 02:55:32,694	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:55:33,758	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:55:34,766	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 02:55:38,478	[INFO]	456	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:55:39,490	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:55:40,475	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:55:41,465	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:55:42,488	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:55:45,922	[INFO]	461	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:55:45,923	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 02:55:46,971	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:55:46,972	[INFO]	463	SUCCESS	+2.0	
2020-12-20 02:55:46,972	[DEBUG]	
2020-12-20 02:55:48,009	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 02:55:49,044	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:55:50,075	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:55:54,059	[INFO]	467	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:55:54,060	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 02:55:54,061	[INFO]	468	SUCCESS	+2.0	
2020-12-20 02:55:54,061	[DEBUG]	
2020-12-20 02:55:55,383	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:55:56,456	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:55:57,502	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:55:58,429	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:55:59,430	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:56:00,477	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:56:01,489	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:56:02,506	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:56:03,545	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 02:56:04,561	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:56:05,534	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 02:56:08,916	[INFO]	480	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:56:08,917	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:56:08,917	[INFO]	481	SUCCESS	+2.0	
2020-12-20 02:56:08,918	[DEBUG]	
2020-12-20 02:56:09,909	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:56:10,953	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:56:11,958	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:56:12,977	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:56:16,371	[INFO]	486	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:56:16,372	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 02:56:16,373	[INFO]	487	SUCCESS	+2.0	
2020-12-20 02:56:16,373	[DEBUG]	
2020-12-20 02:56:17,353	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:56:18,370	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 02:56:19,406	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:56:20,437	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:56:23,770	[INFO]	492	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:56:23,771	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 02:56:24,774	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:56:25,763	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:56:26,779	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:56:26,781	[INFO]	496	SUCCESS	+2.0	
2020-12-20 02:56:26,781	[DEBUG]	
2020-12-20 02:56:27,755	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 02:56:28,776	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:56:29,817	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:56:30,870	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:56:30,870	[INFO]	==== END ====
2020-12-20 02:56:30,870	[INFO]	Reason: step budget
2020-12-20 02:56:30,871	[INFO]	
2020-12-20 02:56:30,871	[INFO]	========== EPOCH 9 ==========
2020-12-20 02:56:30,871	[INFO]	==== WARMUP ====
2020-12-20 02:56:34,319	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:56:34,319	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:56:37,666	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:56:37,666	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:56:40,956	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 02:56:40,956	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:56:44,255	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 02:56:44,256	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 02:56:44,256	[INFO]	==== START ====
2020-12-20 02:56:45,271	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 02:56:46,278	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:56:47,355	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:56:48,355	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:56:49,378	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 02:56:50,414	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:56:51,434	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:56:52,455	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:56:53,449	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:56:53,451	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:56:54,457	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:56:55,506	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 02:57:10,576	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:57:25,641	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:57:28,619	[INFO]	15	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:57:29,549	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:57:30,423	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:57:31,325	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 02:57:32,276	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:57:33,264	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 02:57:34,329	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:57:35,353	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:57:36,377	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:57:37,399	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:57:38,456	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 02:57:39,501	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:57:40,522	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:57:41,516	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:57:42,510	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:57:43,512	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:57:44,512	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 02:57:45,522	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:57:48,859	[INFO]	33	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 02:57:48,860	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 02:57:52,179	[INFO]	34	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:57:52,180	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 23,28 ****
--- 24,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:57:55,523	[INFO]	35	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:57:55,524	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 02:57:56,578	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:57:57,661	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:57:58,725	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 02:57:59,786	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 02:57:59,789	[INFO]	40	SUCCESS	+2.0	
2020-12-20 02:57:59,790	[DEBUG]	
2020-12-20 02:57:59,792	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:58:00,862	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:58:04,313	[INFO]	43	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:58:04,315	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:58:07,821	[INFO]	44	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 02:58:07,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     minNode = node;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:58:07,824	[INFO]	45	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:58:07,824	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 02:58:08,863	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:58:08,865	[INFO]	47	SUCCESS	+2.0	
2020-12-20 02:58:08,866	[DEBUG]	
2020-12-20 02:58:08,868	[INFO]	48	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:58:08,869	[DEBUG]	
2020-12-20 02:58:09,919	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 02:58:10,936	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:58:10,939	[INFO]	51	SUCCESS	+2.0	
2020-12-20 02:58:10,940	[DEBUG]	
2020-12-20 02:58:11,960	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:58:12,949	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:58:13,962	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:58:14,976	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 02:58:15,978	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:58:19,381	[INFO]	57	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:58:19,382	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:58:19,383	[INFO]	58	SUCCESS	+2.0	
2020-12-20 02:58:19,383	[DEBUG]	
2020-12-20 02:58:20,433	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 02:58:21,365	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:58:22,374	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:58:25,765	[INFO]	62	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 02:58:25,766	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:58:25,767	[INFO]	63	SUCCESS	+2.0	
2020-12-20 02:58:25,767	[DEBUG]	
2020-12-20 02:58:25,768	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 02:58:29,413	[INFO]	65	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:58:29,414	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:58:30,832	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 02:58:32,339	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 02:58:33,729	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:58:34,983	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:58:38,540	[INFO]	70	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:58:38,542	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 34,39 ****
--- 36,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 02:58:39,532	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:58:39,536	[INFO]	72	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 02:58:39,537	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:58:39,539	[INFO]	73	SUCCESS	+2.0	
2020-12-20 02:58:39,539	[DEBUG]	
2020-12-20 02:58:40,540	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 02:58:41,549	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 02:58:45,042	[INFO]	76	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:58:45,043	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 02:58:45,044	[INFO]	77	SUCCESS	+2.0	
2020-12-20 02:58:45,044	[DEBUG]	
2020-12-20 02:58:48,402	[INFO]	78	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:58:48,403	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 02:58:49,390	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:58:50,385	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 02:58:51,438	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:58:51,440	[INFO]	82	SUCCESS	+2.0	
2020-12-20 02:58:51,441	[DEBUG]	
2020-12-20 02:58:54,778	[INFO]	83	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 02:58:58,271	[INFO]	84	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 02:59:01,531	[INFO]	85	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 02:59:01,532	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 02:59:02,556	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 02:59:03,556	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:59:03,558	[INFO]	88	SUCCESS	+2.0	
2020-12-20 02:59:03,558	[DEBUG]	
2020-12-20 02:59:04,580	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:59:05,616	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:59:06,620	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:59:07,655	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:59:08,645	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:59:11,996	[INFO]	94	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 02:59:11,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 02:59:11,998	[INFO]	95	SUCCESS	+2.0	
2020-12-20 02:59:11,998	[DEBUG]	
2020-12-20 02:59:12,979	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 02:59:14,009	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 02:59:15,030	[INFO]	98	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:59:16,062	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 02:59:17,099	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 02:59:18,166	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 02:59:19,172	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:59:20,181	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 02:59:21,212	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 02:59:24,582	[INFO]	105	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 02:59:24,583	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 02:59:24,584	[INFO]	106	SUCCESS	+2.0	
2020-12-20 02:59:24,585	[DEBUG]	
2020-12-20 02:59:27,998	[INFO]	107	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:59:28,000	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-20 02:59:31,300	[INFO]	108	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 02:59:31,301	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,68 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 02:59:32,338	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 02:59:33,368	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 02:59:33,371	[INFO]	111	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 02:59:33,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-20 02:59:33,372	[INFO]	112	SUCCESS	+2.0	
2020-12-20 02:59:33,373	[DEBUG]	
2020-12-20 02:59:34,430	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 02:59:35,443	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 02:59:36,460	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 02:59:39,831	[INFO]	116	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 02:59:39,833	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 02:59:40,853	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 02:59:55,924	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 02:59:55,925	[INFO]	119	SUCCESS	+2.0	
2020-12-20 02:59:55,925	[DEBUG]	
2020-12-20 02:59:56,830	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 02:59:57,755	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:00:00,734	[INFO]	122	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:00:00,735	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 03:00:00,735	[INFO]	123	SUCCESS	+2.0	
2020-12-20 03:00:00,736	[DEBUG]	
2020-12-20 03:00:01,710	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:00:02,738	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:00:02,741	[INFO]	126	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:00:02,742	[DEBUG]	
2020-12-20 03:00:03,765	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:00:04,759	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:00:08,210	[INFO]	129	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:00:08,211	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:00:08,212	[INFO]	130	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:00:08,213	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:00:08,213	[INFO]	131	SUCCESS	+2.0	
2020-12-20 03:00:08,213	[DEBUG]	
2020-12-20 03:00:09,182	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:00:10,203	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:00:10,204	[INFO]	134	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:00:10,205	[DEBUG]	
2020-12-20 03:00:10,205	[INFO]	135	SUCCESS	+2.0	
2020-12-20 03:00:10,205	[DEBUG]	
2020-12-20 03:00:11,143	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:00:14,490	[INFO]	137	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:00:15,484	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:00:16,507	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:00:17,552	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:00:17,554	[INFO]	141	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:00:17,555	[DEBUG]	
2020-12-20 03:00:18,585	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:00:19,645	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:00:20,635	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:00:21,646	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:00:22,640	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:00:23,654	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:00:24,662	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:00:25,685	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:00:25,687	[INFO]	150	SUCCESS	+2.0	
2020-12-20 03:00:25,687	[DEBUG]	
2020-12-20 03:00:26,693	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:00:30,005	[INFO]	152	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:00:30,006	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 03:00:30,007	[INFO]	153	SUCCESS	+2.0	
2020-12-20 03:00:30,007	[DEBUG]	
2020-12-20 03:00:31,006	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:00:34,416	[INFO]	155	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:00:34,416	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:00:34,417	[INFO]	156	SUCCESS	+2.0	
2020-12-20 03:00:34,418	[DEBUG]	
2020-12-20 03:00:35,511	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:00:38,910	[INFO]	158	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:00:38,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 03:00:39,901	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:00:41,014	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:00:44,614	[INFO]	161	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:00:44,615	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 44,49 ****
--- 47,53 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 03:00:48,109	[INFO]	162	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:00:48,110	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 44,49 ****
--- 47,53 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
***************
*** 52,57 ****
--- 56,62 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 03:00:51,539	[INFO]	163	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:00:51,541	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 52,57 ****
--- 55,61 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 03:00:52,515	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:00:55,835	[INFO]	165	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:00:55,836	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:00:56,859	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:00:56,863	[INFO]	167	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:00:56,864	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:00:56,866	[INFO]	168	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:00:56,867	[DEBUG]	
2020-12-20 03:00:56,868	[INFO]	169	SUCCESS	+2.0	
2020-12-20 03:00:56,869	[DEBUG]	
2020-12-20 03:00:57,940	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:00:58,980	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:01:00,029	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:01:01,030	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:01:02,024	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:01:03,039	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:01:06,349	[INFO]	176	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:01:06,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:01:07,363	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:01:07,365	[INFO]	178	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:01:07,365	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:01:07,366	[INFO]	179	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:01:07,366	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:01:10,694	[INFO]	180	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:01:11,710	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:01:12,744	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:01:15,973	[INFO]	183	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:01:15,974	[INFO]	184	SUCCESS	+2.0	
2020-12-20 03:01:15,974	[DEBUG]	
2020-12-20 03:01:16,968	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:01:17,972	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:01:19,013	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:01:20,023	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:01:21,072	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:01:22,075	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:01:23,090	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:01:24,107	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:01:25,153	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:01:28,466	[INFO]	194	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:01:31,846	[INFO]	195	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:01:31,847	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 Node minNode = null;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:01:32,831	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:01:32,832	[INFO]	197	SUCCESS	+2.0	
2020-12-20 03:01:32,832	[DEBUG]	
2020-12-20 03:01:36,250	[INFO]	198	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:01:36,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:01:36,253	[INFO]	199	SUCCESS	+2.0	
2020-12-20 03:01:36,254	[DEBUG]	
2020-12-20 03:01:37,221	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:01:38,282	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:01:39,330	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:01:42,786	[INFO]	203	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:01:42,787	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:01:43,841	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:01:43,843	[INFO]	205	SUCCESS	+2.0	
2020-12-20 03:01:43,844	[DEBUG]	
2020-12-20 03:01:44,901	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:01:45,931	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:01:46,980	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:01:50,386	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:01:50,387	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:01:50,388	[INFO]	210	SUCCESS	+2.0	
2020-12-20 03:01:50,388	[DEBUG]	
2020-12-20 03:01:51,361	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:01:52,385	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:01:53,424	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:01:56,824	[INFO]	214	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:01:56,825	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:01:56,826	[INFO]	215	SUCCESS	+2.0	
2020-12-20 03:01:56,826	[DEBUG]	
2020-12-20 03:02:00,110	[INFO]	216	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:02:00,111	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 03:02:01,101	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:02:02,135	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:02:03,162	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:02:03,163	[INFO]	220	SUCCESS	+2.0	
2020-12-20 03:02:03,164	[DEBUG]	
2020-12-20 03:02:04,172	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:02:07,600	[INFO]	222	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:02:07,601	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 03:02:07,602	[INFO]	223	SUCCESS	+2.0	
2020-12-20 03:02:07,602	[DEBUG]	
2020-12-20 03:02:08,482	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:02:09,485	[INFO]	225	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 03:02:10,489	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:02:11,545	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:02:12,545	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:02:13,574	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:02:14,643	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:02:15,687	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:02:16,642	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:02:17,682	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:02:21,157	[INFO]	234	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:02:21,159	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-20 03:02:24,428	[INFO]	235	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:02:24,429	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,43 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
          return Integer.MAX_VALUE;
      }
--- 34,44 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:02:27,806	[INFO]	236	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:02:27,807	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:02:27,808	[INFO]	237	SUCCESS	+2.0	
2020-12-20 03:02:27,808	[DEBUG]	
2020-12-20 03:02:28,912	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:02:32,290	[INFO]	239	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:02:32,291	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:02:32,292	[INFO]	240	SUCCESS	+2.0	
2020-12-20 03:02:32,292	[DEBUG]	
2020-12-20 03:02:33,259	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:02:34,271	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:02:35,273	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:02:38,612	[INFO]	244	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:02:38,613	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 03:02:38,614	[INFO]	245	SUCCESS	+2.0	
2020-12-20 03:02:38,614	[DEBUG]	
2020-12-20 03:02:39,619	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:02:40,630	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:02:41,647	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:02:42,658	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:02:43,707	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:02:44,718	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:02:45,724	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:02:49,161	[INFO]	253	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:02:49,162	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 03:02:49,163	[INFO]	254	SUCCESS	+2.0	
2020-12-20 03:02:49,163	[DEBUG]	
2020-12-20 03:02:50,147	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:02:51,155	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:02:54,909	[INFO]	257	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:02:55,890	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:02:56,924	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:03:11,983	[INFO]	260	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:03:12,901	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:03:13,776	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:03:14,701	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:03:15,589	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:03:16,531	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:03:17,425	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:03:18,376	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:03:19,370	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:03:20,370	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:03:21,390	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:03:22,434	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:03:23,474	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:03:24,461	[INFO]	273	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:03:25,521	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:03:26,538	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:03:27,536	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:03:28,546	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:03:29,562	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:03:30,589	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:03:34,032	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:03:34,033	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:03:35,025	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:03:38,623	[INFO]	282	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:03:38,626	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 38,43 ****
--- 41,48 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:03:39,662	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:03:43,011	[INFO]	284	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:03:43,012	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:03:43,013	[INFO]	285	SUCCESS	+2.0	
2020-12-20 03:03:43,013	[DEBUG]	
2020-12-20 03:03:46,379	[INFO]	286	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:03:46,380	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:03:46,381	[INFO]	287	SUCCESS	+2.0	
2020-12-20 03:03:46,382	[DEBUG]	
2020-12-20 03:03:47,408	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:03:50,923	[INFO]	289	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:03:51,930	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:03:52,930	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:03:56,257	[INFO]	292	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:03:56,257	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:03:57,298	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:03:57,300	[INFO]	294	SUCCESS	+2.0	
2020-12-20 03:03:57,301	[DEBUG]	
2020-12-20 03:03:58,302	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:03:59,354	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:04:00,383	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:04:01,393	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:04:02,423	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:04:03,439	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:04:04,440	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:04:05,473	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:04:06,504	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:04:09,899	[INFO]	304	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:04:09,900	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 03:04:10,856	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:04:10,857	[INFO]	306	SUCCESS	+2.0	
2020-12-20 03:04:10,858	[DEBUG]	
2020-12-20 03:04:11,860	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:04:12,902	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:04:13,919	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:04:17,333	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:04:17,334	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:04:17,335	[INFO]	311	SUCCESS	+2.0	
2020-12-20 03:04:17,335	[DEBUG]	
2020-12-20 03:04:18,320	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:04:21,644	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:04:21,644	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 03:04:21,645	[INFO]	314	SUCCESS	+2.0	
2020-12-20 03:04:21,645	[DEBUG]	
2020-12-20 03:04:22,658	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:04:23,700	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:04:24,677	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:04:25,690	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:04:26,702	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:04:27,708	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:04:28,720	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:04:29,746	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:04:30,742	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:04:31,761	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:04:32,791	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:04:33,837	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:04:34,887	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:04:35,919	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:04:36,856	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:04:37,878	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:04:41,245	[INFO]	331	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:04:42,243	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:04:43,296	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:04:44,345	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:04:45,396	[INFO]	335	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:04:48,834	[INFO]	336	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:04:48,835	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-20 03:04:49,858	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:04:49,859	[INFO]	338	SUCCESS	+2.0	
2020-12-20 03:04:49,860	[DEBUG]	
2020-12-20 03:04:50,864	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:04:51,939	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:04:55,405	[INFO]	341	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:04:55,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:04:55,408	[INFO]	342	SUCCESS	+2.0	
2020-12-20 03:04:55,408	[DEBUG]	
2020-12-20 03:04:55,410	[INFO]	343	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:04:55,410	[DEBUG]	
2020-12-20 03:04:55,411	[INFO]	344	SUCCESS	+2.0	
2020-12-20 03:04:55,412	[DEBUG]	
2020-12-20 03:04:56,393	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:04:59,722	[INFO]	346	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:04:59,724	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:05:00,768	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:05:00,770	[INFO]	348	SUCCESS	+2.0	
2020-12-20 03:05:00,771	[DEBUG]	
2020-12-20 03:05:04,053	[INFO]	349	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:05:04,054	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-20 03:05:04,991	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:05:05,995	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:05:06,976	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:05:06,978	[INFO]	353	SUCCESS	+2.0	
2020-12-20 03:05:06,979	[DEBUG]	
2020-12-20 03:05:07,987	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:05:08,986	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:05:10,053	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:05:11,054	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:05:12,062	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:05:13,060	[INFO]	359	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:05:16,472	[INFO]	360	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:05:16,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 03:05:17,423	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:05:17,424	[INFO]	362	SUCCESS	+2.0	
2020-12-20 03:05:17,424	[DEBUG]	
2020-12-20 03:05:18,428	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:05:19,453	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:05:20,483	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:05:21,519	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:05:24,926	[INFO]	367	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:05:24,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:05:25,931	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:05:25,934	[INFO]	369	SUCCESS	+2.0	
2020-12-20 03:05:25,934	[DEBUG]	
2020-12-20 03:05:26,932	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:05:30,242	[INFO]	371	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:05:30,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 03:05:30,244	[INFO]	372	SUCCESS	+2.0	
2020-12-20 03:05:30,244	[DEBUG]	
2020-12-20 03:05:33,596	[INFO]	373	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:05:33,597	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 03:05:34,628	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:05:35,914	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:05:35,916	[INFO]	376	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:05:35,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 03:05:37,360	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:05:37,361	[INFO]	378	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:05:37,362	[DEBUG]	
2020-12-20 03:05:37,363	[INFO]	379	SUCCESS	+2.0	
2020-12-20 03:05:37,363	[DEBUG]	
2020-12-20 03:05:38,486	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:05:39,813	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:05:43,437	[INFO]	382	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:05:43,438	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 03:05:44,515	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:05:47,982	[INFO]	384	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:05:47,983	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 49,54 ****
--- 53,59 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 03:05:49,002	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:05:50,016	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:05:51,054	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:05:51,057	[INFO]	388	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:05:51,058	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 03:05:52,087	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:05:53,124	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:05:53,125	[INFO]	391	SUCCESS	+2.0	
2020-12-20 03:05:53,126	[DEBUG]	
2020-12-20 03:05:53,127	[INFO]	392	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-20 03:05:53,127	[DEBUG]	
2020-12-20 03:05:53,128	[INFO]	393	SUCCESS	+2.0	
2020-12-20 03:05:53,128	[DEBUG]	
2020-12-20 03:05:54,126	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:05:55,152	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:05:58,551	[INFO]	396	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:05:58,552	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:06:01,917	[INFO]	397	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:06:01,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:06:01,919	[INFO]	398	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:06:01,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:06:01,920	[INFO]	399	SUCCESS	+2.0	
2020-12-20 03:06:01,921	[DEBUG]	
2020-12-20 03:06:02,907	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:06:02,909	[INFO]	401	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:06:02,910	[DEBUG]	
2020-12-20 03:06:06,267	[INFO]	402	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:06:09,591	[INFO]	403	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:06:09,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 03:06:09,595	[INFO]	404	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:06:09,596	[DEBUG]	
2020-12-20 03:06:09,597	[INFO]	405	SUCCESS	+2.0	
2020-12-20 03:06:09,598	[DEBUG]	
2020-12-20 03:06:10,651	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:06:13,974	[INFO]	407	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:06:13,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-20 03:06:13,976	[INFO]	408	SUCCESS	+2.0	
2020-12-20 03:06:13,976	[DEBUG]	
2020-12-20 03:06:17,380	[INFO]	409	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:06:17,381	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:06:18,351	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:06:18,352	[INFO]	411	SUCCESS	+2.0	
2020-12-20 03:06:18,353	[DEBUG]	
2020-12-20 03:06:21,699	[INFO]	412	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:06:21,700	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-20 03:06:22,724	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:06:22,725	[INFO]	414	SUCCESS	+2.0	
2020-12-20 03:06:22,725	[DEBUG]	
2020-12-20 03:06:23,753	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:06:27,461	[INFO]	416	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:06:27,463	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 03:06:28,487	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:06:29,530	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:06:30,607	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:06:30,609	[INFO]	420	SUCCESS	+2.0	
2020-12-20 03:06:30,610	[DEBUG]	
2020-12-20 03:06:31,666	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:06:32,670	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:06:36,012	[INFO]	423	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:06:36,013	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:06:36,013	[INFO]	424	SUCCESS	+2.0	
2020-12-20 03:06:36,014	[DEBUG]	
2020-12-20 03:06:37,023	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:06:40,473	[INFO]	426	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:06:40,475	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:06:40,476	[INFO]	427	SUCCESS	+2.0	
2020-12-20 03:06:40,477	[DEBUG]	
2020-12-20 03:06:41,450	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:06:42,475	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:06:45,889	[INFO]	430	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:06:45,890	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 03:06:45,891	[INFO]	431	SUCCESS	+2.0	
2020-12-20 03:06:45,892	[DEBUG]	
2020-12-20 03:06:46,885	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:06:47,943	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:06:48,939	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:06:49,958	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:06:50,975	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:06:52,026	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:06:53,028	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:06:54,082	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:06:55,086	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:06:58,535	[INFO]	441	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:06:58,536	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:06:58,537	[INFO]	442	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-20 03:06:58,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:06:59,503	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:06:59,504	[INFO]	444	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:06:59,505	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:06:59,505	[INFO]	445	SUCCESS	+2.0	
2020-12-20 03:06:59,506	[DEBUG]	
2020-12-20 03:07:02,866	[INFO]	446	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:07:03,832	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:07:07,193	[INFO]	448	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:07:07,194	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 03:07:08,225	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:07:08,227	[INFO]	450	SUCCESS	+2.0	
2020-12-20 03:07:08,228	[DEBUG]	
2020-12-20 03:07:11,528	[INFO]	451	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:07:12,511	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:07:13,541	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:07:14,560	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:07:15,691	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:07:16,715	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:07:17,716	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:07:18,731	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:07:19,761	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:07:20,752	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:07:20,753	[INFO]	461	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:07:20,754	[DEBUG]	
2020-12-20 03:07:20,754	[INFO]	462	SUCCESS	+2.0	
2020-12-20 03:07:20,755	[DEBUG]	
2020-12-20 03:07:21,776	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:07:22,775	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:07:23,796	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:07:24,806	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:07:29,589	[INFO]	467	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:07:29,590	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:07:29,590	[INFO]	468	SUCCESS	+2.0	
2020-12-20 03:07:29,591	[DEBUG]	
2020-12-20 03:07:30,846	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:07:32,050	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:07:33,317	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:07:34,496	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:07:38,786	[INFO]	473	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:07:39,769	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:07:40,803	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:07:44,168	[INFO]	476	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:07:44,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:07:45,148	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:07:48,538	[INFO]	478	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:07:48,539	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
! 
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:07:51,934	[INFO]	479	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:07:51,935	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
+ 
+                 int minDistance = Integer.MAX_VALUE;
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:07:55,366	[INFO]	480	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:07:55,368	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,70 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 int minDistance = Integer.MAX_VALUE;
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:07:56,399	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 03:07:57,445	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:07:58,480	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:07:59,508	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:08:02,977	[INFO]	485	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:08:02,978	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:08:03,980	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:08:03,981	[INFO]	487	SUCCESS	+2.0	
2020-12-20 03:08:03,982	[DEBUG]	
2020-12-20 03:08:05,029	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:08:06,043	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:08:07,064	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:08:08,089	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:08:11,379	[INFO]	492	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:08:11,380	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:08:14,775	[INFO]	493	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:08:14,777	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 59,65 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:08:15,759	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:08:16,763	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:08:20,144	[INFO]	496	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:08:20,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,33 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 21,45 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 59,65 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:08:23,600	[INFO]	497	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:08:23,601	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:08:26,924	[INFO]	498	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:08:26,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:08:26,926	[INFO]	499	SUCCESS	+2.0	
2020-12-20 03:08:26,926	[DEBUG]	
2020-12-20 03:08:27,920	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:08:27,921	[INFO]	==== END ====
2020-12-20 03:08:27,921	[INFO]	Reason: step budget
2020-12-20 03:08:27,923	[INFO]	
2020-12-20 03:08:27,923	[INFO]	========== EPOCH 10 ==========
2020-12-20 03:08:27,924	[INFO]	==== WARMUP ====
2020-12-20 03:08:31,280	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:08:31,281	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:08:34,679	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:08:34,679	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:08:38,090	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:08:38,091	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:08:41,436	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 03:08:41,436	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:08:41,436	[INFO]	==== START ====
2020-12-20 03:08:42,411	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:08:45,885	[INFO]	2	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:08:46,881	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:08:50,317	[INFO]	4	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:08:50,318	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:08:51,339	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:08:52,374	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:08:53,471	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:08:53,473	[INFO]	8	SUCCESS	+2.0	
2020-12-20 03:08:53,474	[DEBUG]	
2020-12-20 03:08:56,828	[INFO]	9	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:08:56,829	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:08:56,830	[INFO]	10	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:08:56,831	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:09:00,136	[INFO]	11	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:09:00,138	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:09:00,140	[INFO]	12	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:09:00,141	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:09:01,146	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:09:02,155	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:09:03,175	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:09:03,178	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:09:03,179	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:09:03,181	[INFO]	17	SUCCESS	+2.0	
2020-12-20 03:09:03,182	[DEBUG]	
2020-12-20 03:09:04,192	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:09:05,225	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:09:06,245	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:09:07,247	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:09:08,187	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:09:09,188	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:09:10,196	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:09:11,205	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:09:12,233	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:09:13,271	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:09:14,276	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:09:15,297	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:09:18,545	[INFO]	30	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:09:18,546	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:09:19,560	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:09:20,591	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:09:21,610	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:09:22,602	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:09:23,620	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:09:23,622	[INFO]	36	SUCCESS	+2.0	
2020-12-20 03:09:23,622	[DEBUG]	
2020-12-20 03:09:24,632	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:09:28,016	[INFO]	38	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:09:28,017	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:09:28,968	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:09:28,971	[INFO]	40	SUCCESS	+2.0	
2020-12-20 03:09:28,971	[DEBUG]	
2020-12-20 03:09:32,271	[INFO]	41	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:09:33,284	[INFO]	42	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:09:34,252	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:09:35,197	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:09:36,223	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:09:37,233	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:09:38,244	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:09:39,258	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:09:42,630	[INFO]	49	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:09:42,631	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     int minDistance = Integer.MAX_VALUE;
                      continue;
                  }
  

2020-12-20 03:09:43,622	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:09:44,631	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:09:45,660	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:09:46,708	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:09:46,710	[INFO]	54	SUCCESS	+2.0	
2020-12-20 03:09:46,711	[DEBUG]	
2020-12-20 03:09:47,766	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:09:48,778	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:09:49,797	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:09:50,794	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:09:54,098	[INFO]	59	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:09:55,136	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:09:56,168	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:09:57,161	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:10:12,231	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:10:13,141	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:10:14,057	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:10:14,978	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:10:30,043	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:10:33,058	[INFO]	68	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:10:33,059	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:10:33,060	[INFO]	69	SUCCESS	+2.0	
2020-12-20 03:10:33,060	[DEBUG]	
2020-12-20 03:10:34,032	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:10:34,940	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:10:36,072	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:10:37,118	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:10:38,183	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:10:39,232	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:10:42,612	[INFO]	76	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:10:42,613	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:10:42,615	[INFO]	77	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:10:42,615	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:10:43,646	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:10:44,683	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:10:44,686	[INFO]	80	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:10:44,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:10:45,744	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:10:46,748	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:10:46,749	[INFO]	83	SUCCESS	+2.0	
2020-12-20 03:10:46,750	[DEBUG]	
2020-12-20 03:10:50,157	[INFO]	84	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:10:50,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:10:50,158	[INFO]	85	SUCCESS	+2.0	
2020-12-20 03:10:50,159	[DEBUG]	
2020-12-20 03:10:50,160	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:10:51,157	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:10:54,537	[INFO]	88	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:10:54,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:10:54,539	[INFO]	89	SUCCESS	+2.0	
2020-12-20 03:10:54,539	[DEBUG]	
2020-12-20 03:10:55,510	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:10:56,565	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:10:57,611	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:10:58,615	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:10:59,654	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:11:00,721	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:11:01,769	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:11:02,798	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:11:03,905	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:11:05,009	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:11:06,009	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:11:07,017	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:11:08,050	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:11:11,404	[INFO]	103	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:11:11,405	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:11:11,406	[INFO]	104	SUCCESS	+2.0	
2020-12-20 03:11:11,406	[DEBUG]	
2020-12-20 03:11:12,398	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:11:13,398	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:11:16,800	[INFO]	107	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:11:17,841	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:11:18,894	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:11:19,916	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:11:20,943	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:11:24,426	[INFO]	112	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-20 03:11:25,402	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:11:28,788	[INFO]	114	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:11:28,789	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:11:29,788	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:11:33,146	[INFO]	116	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:11:34,201	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:11:35,218	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:11:35,221	[INFO]	119	SUCCESS	+2.0	
2020-12-20 03:11:35,222	[DEBUG]	
2020-12-20 03:11:36,260	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:11:36,261	[INFO]	121	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:11:36,262	[DEBUG]	
2020-12-20 03:11:36,263	[INFO]	122	SUCCESS	+2.0	
2020-12-20 03:11:36,264	[DEBUG]	
2020-12-20 03:11:37,302	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:11:40,636	[INFO]	124	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:11:44,065	[INFO]	125	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:11:44,066	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:11:45,059	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:11:48,458	[INFO]	127	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:11:48,460	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,37 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 25,41 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:11:48,461	[INFO]	128	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:11:48,461	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:11:51,749	[INFO]	129	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:11:51,750	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:11:52,742	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:11:53,780	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:11:57,170	[INFO]	132	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:11:57,171	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 03:11:57,171	[INFO]	133	SUCCESS	+2.0	
2020-12-20 03:11:57,172	[DEBUG]	
2020-12-20 03:11:58,181	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:11:59,220	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:12:00,268	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:12:03,747	[INFO]	137	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:12:03,748	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:12:07,186	[INFO]	138	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:12:07,188	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 46,51 ****
--- 59,65 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 03:12:07,189	[INFO]	139	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:12:07,189	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:12:08,244	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:12:09,272	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:12:09,274	[INFO]	142	SUCCESS	+2.0	
2020-12-20 03:12:09,275	[DEBUG]	
2020-12-20 03:12:12,607	[INFO]	143	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:12:12,608	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-20 03:12:12,608	[INFO]	144	SUCCESS	+2.0	
2020-12-20 03:12:12,609	[DEBUG]	
2020-12-20 03:12:13,629	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:12:16,998	[INFO]	146	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:12:18,011	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:12:19,050	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:12:20,069	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:12:21,097	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:12:24,452	[INFO]	151	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:12:24,454	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 03:12:25,512	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:12:25,514	[INFO]	153	SUCCESS	+2.0	
2020-12-20 03:12:25,515	[DEBUG]	
2020-12-20 03:12:29,029	[INFO]	154	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:12:29,030	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 03:12:30,087	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 03:12:31,143	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:12:31,144	[INFO]	157	SUCCESS	+2.0	
2020-12-20 03:12:31,144	[DEBUG]	
2020-12-20 03:12:32,203	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:12:47,276	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:12:48,186	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:12:49,137	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:12:50,199	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:12:51,284	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:12:52,357	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:12:53,431	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:12:54,483	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:12:55,604	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:12:56,731	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:12:57,817	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:12:58,889	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:13:02,398	[INFO]	171	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:13:02,399	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 03:13:03,439	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:13:03,440	[INFO]	173	SUCCESS	+2.0	
2020-12-20 03:13:03,441	[DEBUG]	
2020-12-20 03:13:04,531	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:13:05,640	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:13:06,717	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:13:10,148	[INFO]	177	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:13:10,148	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 03:13:10,149	[INFO]	178	SUCCESS	+2.0	
2020-12-20 03:13:10,150	[DEBUG]	
2020-12-20 03:13:11,162	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:13:12,187	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:13:13,218	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:13:14,223	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:13:17,560	[INFO]	183	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:13:17,560	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:13:20,942	[INFO]	184	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:13:20,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,34 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 21,33 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:13:24,244	[INFO]	185	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:13:24,246	[INFO]	186	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:13:24,247	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,34 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 21,33 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:13:24,248	[INFO]	187	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:13:24,249	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,34 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 21,33 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:13:25,251	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:13:26,327	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:13:26,330	[INFO]	190	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:13:26,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,34 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 21,33 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:13:26,334	[INFO]	191	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:13:26,336	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,34 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 21,33 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:13:26,337	[INFO]	192	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:13:26,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:13:27,314	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:13:28,346	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:13:28,350	[INFO]	195	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:13:28,351	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:13:29,393	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:13:32,738	[INFO]	197	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:13:32,739	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:13:32,740	[INFO]	198	SUCCESS	+2.0	
2020-12-20 03:13:32,740	[DEBUG]	
2020-12-20 03:13:33,803	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:13:34,760	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:13:38,108	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:13:38,109	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:13:38,110	[INFO]	202	SUCCESS	+2.0	
2020-12-20 03:13:38,110	[DEBUG]	
2020-12-20 03:13:39,142	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:13:40,178	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:13:41,185	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:13:42,189	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:13:43,211	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:13:44,228	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:13:45,287	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:13:48,701	[INFO]	210	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:13:48,702	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:13:48,702	[INFO]	211	SUCCESS	+2.0	
2020-12-20 03:13:48,703	[DEBUG]	
2020-12-20 03:13:49,688	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:13:50,715	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:13:51,736	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:13:52,741	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:13:53,830	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:13:57,243	[INFO]	217	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:13:57,244	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:13:57,244	[INFO]	218	SUCCESS	+2.0	
2020-12-20 03:13:57,245	[DEBUG]	
2020-12-20 03:13:58,161	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:13:59,165	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:14:00,227	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:14:01,245	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:14:02,278	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:14:03,284	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:14:04,302	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:14:05,342	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:14:06,368	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:14:09,709	[INFO]	228	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:14:09,710	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:14:10,758	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:14:11,826	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:14:11,827	[INFO]	231	SUCCESS	+2.0	
2020-12-20 03:14:11,828	[DEBUG]	
2020-12-20 03:14:12,878	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:14:13,914	[INFO]	233	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-20 03:14:14,954	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:14:15,981	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:14:16,961	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:14:17,987	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:14:18,997	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:14:20,024	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:14:21,029	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:14:22,028	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:14:23,074	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:14:24,108	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:14:27,570	[INFO]	244	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:14:27,571	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:14:28,543	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-20 03:14:28,544	[INFO]	246	SUCCESS	+2.0	
2020-12-20 03:14:28,544	[DEBUG]	
2020-12-20 03:14:29,558	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:14:30,543	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:14:31,555	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:14:32,569	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:14:35,980	[INFO]	251	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:14:35,981	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 03:14:35,982	[INFO]	252	SUCCESS	+2.0	
2020-12-20 03:14:35,983	[DEBUG]	
2020-12-20 03:14:35,984	[INFO]	253	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:14:35,984	[DEBUG]	
2020-12-20 03:14:35,985	[INFO]	254	SUCCESS	+2.0	
2020-12-20 03:14:35,985	[DEBUG]	
2020-12-20 03:14:36,996	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:14:38,007	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:14:39,023	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:14:40,005	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:14:43,303	[INFO]	259	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:14:44,291	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:14:44,292	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:14:47,676	[INFO]	262	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:14:47,678	[INFO]	263	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:14:47,678	[DEBUG]	
2020-12-20 03:14:48,660	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:14:48,661	[INFO]	265	SUCCESS	+2.0	
2020-12-20 03:14:48,661	[DEBUG]	
2020-12-20 03:14:49,683	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:14:50,718	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:14:51,717	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:14:55,045	[INFO]	269	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:14:55,046	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 03:14:55,047	[INFO]	270	SUCCESS	+2.0	
2020-12-20 03:14:55,048	[DEBUG]	
2020-12-20 03:14:58,480	[INFO]	271	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:14:58,481	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 03:14:58,482	[INFO]	272	SUCCESS	+2.0	
2020-12-20 03:14:58,482	[DEBUG]	
2020-12-20 03:14:59,476	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:15:00,482	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:15:01,530	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:15:04,858	[INFO]	276	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-20 03:15:05,840	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:15:06,871	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:15:10,250	[INFO]	279	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:15:10,251	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:15:11,294	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:15:12,337	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:15:12,338	[INFO]	282	SUCCESS	+2.0	
2020-12-20 03:15:12,338	[DEBUG]	
2020-12-20 03:15:15,777	[INFO]	283	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:15:15,779	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 03:15:16,774	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:15:17,772	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:15:17,773	[INFO]	286	SUCCESS	+2.0	
2020-12-20 03:15:17,773	[DEBUG]	
2020-12-20 03:15:18,780	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:15:19,811	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:15:20,818	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:15:21,892	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:15:22,974	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:15:24,049	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:15:25,171	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:15:26,220	[INFO]	294	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-20 03:15:27,229	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:15:30,583	[INFO]	296	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:15:30,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 Node minNode = null;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:15:30,585	[INFO]	297	SUCCESS	+2.0	
2020-12-20 03:15:30,585	[DEBUG]	
2020-12-20 03:15:31,609	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:15:32,631	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:15:32,634	[INFO]	300	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:15:32,635	[DEBUG]	
2020-12-20 03:15:32,636	[INFO]	301	SUCCESS	+2.0	
2020-12-20 03:15:32,637	[DEBUG]	
2020-12-20 03:15:33,655	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:15:34,740	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:15:35,998	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:15:37,449	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:15:41,205	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:15:41,206	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 03:15:42,232	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:15:43,223	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:15:46,568	[INFO]	309	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:15:46,569	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,57 ****
--- 49,59 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 03:15:47,610	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:15:50,943	[INFO]	311	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:15:50,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 03:15:54,253	[INFO]	312	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:15:54,254	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  
***************
*** 49,54 ****
--- 50,56 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 03:15:55,537	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:15:55,539	[INFO]	314	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:15:55,540	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  
***************
*** 49,54 ****
--- 50,56 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 03:15:55,541	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:15:55,542	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  
***************
*** 49,54 ****
--- 50,56 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 03:15:55,543	[INFO]	316	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:15:55,543	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 03:15:55,544	[INFO]	317	SUCCESS	+2.0	
2020-12-20 03:15:55,544	[DEBUG]	
2020-12-20 03:15:58,974	[INFO]	318	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:15:58,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 03:16:00,020	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:16:00,024	[INFO]	320	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:16:00,025	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 03:16:00,026	[INFO]	321	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:16:00,027	[DEBUG]	
2020-12-20 03:16:00,028	[INFO]	322	SUCCESS	+2.0	
2020-12-20 03:16:00,028	[DEBUG]	
2020-12-20 03:16:01,065	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:16:02,116	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:16:03,165	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:16:04,778	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:16:05,875	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 03:16:06,928	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:16:07,971	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:16:08,961	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:16:09,988	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:16:11,008	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:16:12,049	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:16:15,468	[INFO]	334	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:16:15,470	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:16:15,471	[INFO]	335	SUCCESS	+2.0	
2020-12-20 03:16:15,472	[DEBUG]	
2020-12-20 03:16:18,731	[INFO]	336	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:16:18,732	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:16:18,733	[INFO]	337	SUCCESS	+2.0	
2020-12-20 03:16:18,733	[DEBUG]	
2020-12-20 03:16:19,698	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:16:20,750	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:16:21,761	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:16:22,793	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:16:23,832	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:16:27,161	[INFO]	343	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:16:28,150	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:16:29,190	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:16:30,245	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:16:31,272	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:16:32,285	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:16:47,345	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:16:47,346	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:16:48,216	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:16:49,120	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:16:52,217	[INFO]	353	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:16:52,218	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:16:53,112	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:16:54,095	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:16:55,151	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:16:55,153	[INFO]	357	SUCCESS	+2.0	
2020-12-20 03:16:55,153	[DEBUG]	
2020-12-20 03:16:58,474	[INFO]	358	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:16:58,476	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 03:16:58,476	[INFO]	359	SUCCESS	+2.0	
2020-12-20 03:16:58,477	[DEBUG]	
2020-12-20 03:16:59,516	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:17:00,544	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:17:01,563	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:17:02,598	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:17:05,934	[INFO]	364	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:17:05,935	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-20 03:17:05,936	[INFO]	365	SUCCESS	+2.0	
2020-12-20 03:17:05,936	[DEBUG]	
2020-12-20 03:17:06,954	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:17:10,327	[INFO]	367	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:17:10,328	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:17:10,329	[INFO]	368	SUCCESS	+2.0	
2020-12-20 03:17:10,329	[DEBUG]	
2020-12-20 03:17:11,322	[INFO]	369	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-20 03:17:14,630	[INFO]	370	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:17:14,631	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:17:14,632	[INFO]	371	SUCCESS	+2.0	
2020-12-20 03:17:14,632	[DEBUG]	
2020-12-20 03:17:15,611	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:17:16,630	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:17:17,637	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:17:18,663	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:17:19,665	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:17:20,648	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:17:21,668	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:17:22,690	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:17:23,695	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:17:24,677	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:17:25,721	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:17:26,738	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:17:27,764	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:17:28,804	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:17:29,815	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:17:30,826	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:17:31,857	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:17:31,858	[INFO]	389	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:17:31,859	[DEBUG]	
2020-12-20 03:17:32,926	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:17:34,012	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:17:34,014	[INFO]	392	SUCCESS	+2.0	
2020-12-20 03:17:34,015	[DEBUG]	
2020-12-20 03:17:35,062	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:17:38,536	[INFO]	394	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-20 03:17:39,513	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:17:40,498	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:17:41,496	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:17:42,538	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:17:43,542	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:17:44,585	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:17:45,607	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:17:46,586	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:17:47,641	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:17:48,578	[INFO]	404	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:17:51,928	[INFO]	405	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:17:51,929	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-20 03:17:51,930	[INFO]	406	SUCCESS	+2.0	
2020-12-20 03:17:51,930	[DEBUG]	
2020-12-20 03:17:52,930	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:17:53,954	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:17:55,002	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:17:58,416	[INFO]	410	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:17:58,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:18:01,632	[INFO]	411	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:18:01,633	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,42 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-20 03:18:01,634	[INFO]	412	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:18:01,635	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:18:01,636	[INFO]	413	SUCCESS	+2.0	
2020-12-20 03:18:01,636	[DEBUG]	
2020-12-20 03:18:01,637	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:18:02,677	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:18:03,677	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:18:04,681	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:18:05,721	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:18:06,729	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:18:07,793	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:18:08,833	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:18:09,866	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:18:10,921	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:18:14,307	[INFO]	424	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:18:14,308	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 03:18:14,309	[INFO]	425	SUCCESS	+2.0	
2020-12-20 03:18:14,310	[DEBUG]	
2020-12-20 03:18:15,251	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:18:18,442	[INFO]	427	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:18:18,443	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:18:18,444	[INFO]	428	SUCCESS	+2.0	
2020-12-20 03:18:18,444	[DEBUG]	
2020-12-20 03:18:19,444	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:18:20,461	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:18:21,506	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:18:22,524	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:18:23,514	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:18:24,522	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:18:25,531	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:18:26,552	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:18:27,599	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:18:28,581	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:18:29,589	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:18:30,603	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:18:34,048	[INFO]	441	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:18:35,026	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:18:36,027	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:18:37,033	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:18:38,062	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:18:41,480	[INFO]	446	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:18:41,483	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      continue;
                  }
  

2020-12-20 03:18:41,486	[INFO]	447	SUCCESS	+2.0	
2020-12-20 03:18:41,487	[DEBUG]	
2020-12-20 03:18:42,476	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:18:43,466	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:18:44,489	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:18:45,492	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:18:48,873	[INFO]	452	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:18:48,874	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:18:48,875	[INFO]	453	SUCCESS	+2.0	
2020-12-20 03:18:48,875	[DEBUG]	
2020-12-20 03:18:49,893	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:18:50,841	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:18:54,155	[INFO]	456	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:18:54,156	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 03:18:57,394	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:18:57,397	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-20 03:18:57,399	[INFO]	458	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:18:57,400	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 03:18:57,401	[INFO]	459	SUCCESS	+2.0	
2020-12-20 03:18:57,402	[DEBUG]	
2020-12-20 03:18:58,463	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:18:59,543	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:19:02,876	[INFO]	462	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:19:03,837	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:19:04,847	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:19:05,890	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:19:06,909	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:19:07,914	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:19:08,945	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:19:09,955	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:19:13,338	[INFO]	470	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:19:13,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:19:14,296	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:19:17,620	[INFO]	472	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:19:17,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 47,52 ****
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 03:19:18,656	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:19:22,025	[INFO]	474	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:19:22,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 03:19:22,027	[INFO]	475	SUCCESS	+2.0	
2020-12-20 03:19:22,027	[DEBUG]	
2020-12-20 03:19:23,064	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:19:24,086	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:19:25,089	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:19:28,392	[INFO]	479	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:19:28,393	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:19:29,383	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:19:30,409	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:19:31,411	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:19:31,412	[INFO]	483	SUCCESS	+2.0	
2020-12-20 03:19:31,413	[DEBUG]	
2020-12-20 03:19:32,409	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:19:33,432	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:19:34,458	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:19:35,474	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:19:36,487	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:19:37,479	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:19:38,524	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:19:39,533	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:19:40,533	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:19:41,560	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:19:42,565	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:19:45,907	[INFO]	495	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:19:49,269	[INFO]	496	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:19:49,270	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-20 03:19:49,271	[INFO]	497	SUCCESS	+2.0	
2020-12-20 03:19:49,271	[DEBUG]	
2020-12-20 03:19:50,276	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:19:53,612	[INFO]	499	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:19:53,613	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-20 03:19:53,614	[INFO]	500	SUCCESS	+2.0	
2020-12-20 03:19:53,614	[DEBUG]	
2020-12-20 03:19:53,614	[INFO]	==== END ====
2020-12-20 03:19:53,614	[INFO]	Reason: step budget
2020-12-20 03:19:53,615	[INFO]	
2020-12-20 03:19:53,615	[INFO]	========== EPOCH 11 ==========
2020-12-20 03:19:53,615	[INFO]	==== WARMUP ====
2020-12-20 03:19:57,083	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:19:57,083	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:20:00,362	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:20:00,362	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:20:03,708	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:20:03,708	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:20:07,036	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 03:20:07,036	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:20:07,036	[INFO]	==== START ====
2020-12-20 03:20:07,037	[INFO]	1	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:20:07,038	[DEBUG]	
2020-12-20 03:20:07,038	[INFO]	2	SUCCESS	+2.0	
2020-12-20 03:20:07,038	[DEBUG]	
2020-12-20 03:20:08,064	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:20:11,479	[INFO]	4	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:20:11,480	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 03:20:14,944	[INFO]	5	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:20:14,945	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  
***************
*** 52,57 ****
--- 64,76 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 03:20:18,338	[INFO]	6	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:20:18,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-20 03:20:18,340	[INFO]	7	SUCCESS	+2.0	
2020-12-20 03:20:18,340	[DEBUG]	
2020-12-20 03:20:21,627	[INFO]	8	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:20:21,628	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-20 03:20:21,628	[INFO]	9	SUCCESS	+2.0	
2020-12-20 03:20:21,629	[DEBUG]	
2020-12-20 03:20:21,630	[INFO]	10	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:20:21,630	[DEBUG]	
2020-12-20 03:20:25,023	[INFO]	11	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:20:25,024	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 03:20:26,000	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:20:26,001	[INFO]	13	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:20:26,002	[DEBUG]	
2020-12-20 03:20:26,003	[INFO]	14	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:20:26,003	[DEBUG]	
2020-12-20 03:20:26,004	[INFO]	15	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:20:26,004	[DEBUG]	
2020-12-20 03:20:29,328	[INFO]	16	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:20:29,329	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:20:32,643	[INFO]	17	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:20:32,644	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 03:20:32,645	[INFO]	18	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:20:32,646	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 03:20:33,646	[INFO]	19	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:20:33,650	[INFO]	20	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:20:33,652	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:20:34,672	[INFO]	21	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:20:38,312	[INFO]	22	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:20:38,313	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,37 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 25,41 ----
              }
              visitedNodes.add(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:20:38,314	[INFO]	23	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:20:38,314	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:20:38,315	[INFO]	24	SUCCESS	+2.0	
2020-12-20 03:20:38,315	[DEBUG]	
2020-12-20 03:20:41,630	[INFO]	25	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:20:41,631	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:20:41,632	[INFO]	26	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:20:41,633	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:20:45,003	[INFO]	27	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:20:45,004	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-20 03:20:45,005	[INFO]	28	SUCCESS	+2.0	
2020-12-20 03:20:45,005	[DEBUG]	
2020-12-20 03:20:45,984	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:20:47,013	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:20:48,115	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:20:49,157	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:20:52,715	[INFO]	33	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:20:52,716	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:20:52,717	[INFO]	34	SUCCESS	+2.0	
2020-12-20 03:20:52,717	[DEBUG]	
2020-12-20 03:20:53,736	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:20:54,760	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:20:58,215	[INFO]	37	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:20:58,216	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 03:20:59,241	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:21:00,284	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:21:03,622	[INFO]	40	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:21:03,623	[INFO]	41	SUCCESS	+2.0	
2020-12-20 03:21:03,623	[DEBUG]	
2020-12-20 03:21:04,625	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:21:05,637	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:21:06,671	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:21:07,671	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:21:08,698	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:21:12,015	[INFO]	47	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:21:12,016	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:21:12,017	[INFO]	48	SUCCESS	+2.0	
2020-12-20 03:21:12,017	[DEBUG]	
2020-12-20 03:21:15,413	[INFO]	49	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:21:15,415	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:21:18,788	[INFO]	50	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:21:18,789	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,29 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 20,33 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:21:19,776	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:21:19,778	[INFO]	52	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:21:19,779	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,29 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 20,33 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:21:23,054	[INFO]	53	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:21:23,055	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,42 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 20,35 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:21:24,002	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:21:27,271	[INFO]	55	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:21:27,274	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,42 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 20,35 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             visitedNodes.add(node);
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:21:28,261	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:21:28,263	[INFO]	57	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:21:28,264	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,42 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 20,35 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:21:28,266	[INFO]	58	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:21:28,267	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,42 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 20,35 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:21:28,268	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:21:29,216	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:21:30,188	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:21:31,125	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:21:31,127	[INFO]	63	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:21:31,128	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,42 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 20,35 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:21:32,055	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:21:33,011	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:21:36,369	[INFO]	66	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:21:36,370	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:21:36,371	[INFO]	67	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:21:36,372	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:21:37,286	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:21:37,287	[INFO]	69	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:21:37,288	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:21:38,262	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:21:38,266	[INFO]	71	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:21:38,267	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:21:41,658	[INFO]	72	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:21:41,658	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:21:41,659	[INFO]	73	SUCCESS	+2.0	
2020-12-20 03:21:41,660	[DEBUG]	
2020-12-20 03:21:42,598	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:21:43,594	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:21:47,116	[INFO]	76	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:21:47,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 03:21:47,118	[INFO]	77	SUCCESS	+2.0	
2020-12-20 03:21:47,118	[DEBUG]	
2020-12-20 03:21:50,456	[INFO]	78	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:21:51,471	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:21:52,453	[INFO]	80	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-20 03:21:55,785	[INFO]	81	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:21:56,784	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:21:57,783	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:21:58,797	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:21:59,811	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:22:00,876	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:22:01,910	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:22:02,858	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:22:06,229	[INFO]	89	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:22:06,230	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-20 03:22:09,554	[INFO]	90	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:22:12,904	[INFO]	91	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:22:12,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     continue;
+                 }
+ 
+                 if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  

2020-12-20 03:22:13,914	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:22:14,914	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:22:18,364	[INFO]	94	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:22:18,365	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:22:18,365	[INFO]	95	SUCCESS	+2.0	
2020-12-20 03:22:18,365	[DEBUG]	
2020-12-20 03:22:19,347	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:22:20,282	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:22:21,301	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:22:22,329	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:22:23,345	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:22:24,372	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:22:25,394	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:22:26,450	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:22:29,789	[INFO]	104	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:22:29,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:22:29,791	[INFO]	105	SUCCESS	+2.0	
2020-12-20 03:22:29,791	[DEBUG]	
2020-12-20 03:22:33,178	[INFO]	106	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:22:33,179	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:22:34,191	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:22:35,219	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:22:36,344	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:22:39,740	[INFO]	111	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:22:40,757	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:22:41,775	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:22:42,801	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:22:43,831	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:22:44,803	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:22:45,802	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:22:46,860	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:22:50,253	[INFO]	119	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:22:50,254	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:22:50,254	[INFO]	120	SUCCESS	+2.0	
2020-12-20 03:22:50,255	[DEBUG]	
2020-12-20 03:22:53,651	[INFO]	121	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 03:22:53,652	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:22:54,623	[INFO]	122	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:22:54,625	[INFO]	123	SUCCESS	+2.0	
2020-12-20 03:22:54,626	[DEBUG]	
2020-12-20 03:22:55,618	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:22:56,644	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:22:57,680	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:22:58,697	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:22:59,708	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:23:00,740	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:23:01,765	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:23:02,777	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:23:03,830	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:23:04,761	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:23:05,772	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:23:06,838	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:23:07,853	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:23:08,850	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:23:09,866	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:23:10,905	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:23:11,952	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:23:12,957	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:23:13,981	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:23:14,989	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:23:16,020	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:23:17,029	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:23:18,031	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:23:19,041	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:23:20,050	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:23:21,070	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:23:22,106	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:23:23,120	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:23:24,163	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:23:27,638	[INFO]	153	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:23:27,639	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:23:27,639	[INFO]	154	SUCCESS	+2.0	
2020-12-20 03:23:27,640	[DEBUG]	
2020-12-20 03:23:28,620	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:23:32,082	[INFO]	156	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:23:32,083	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 03:23:32,083	[INFO]	157	SUCCESS	+2.0	
2020-12-20 03:23:32,084	[DEBUG]	
2020-12-20 03:23:33,062	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:23:34,123	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:23:35,132	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:23:36,203	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:23:39,511	[INFO]	162	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:23:39,512	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:23:39,513	[INFO]	163	SUCCESS	+2.0	
2020-12-20 03:23:39,513	[DEBUG]	
2020-12-20 03:23:40,496	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:23:41,529	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:23:42,580	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:23:43,608	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:23:44,602	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:23:45,633	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:23:46,647	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:23:47,633	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:23:51,040	[INFO]	172	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:23:51,041	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:23:51,042	[INFO]	173	SUCCESS	+2.0	
2020-12-20 03:23:51,042	[DEBUG]	
2020-12-20 03:23:52,004	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:23:55,355	[INFO]	175	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-20 03:23:55,356	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:23:55,357	[INFO]	176	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:23:55,357	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:23:55,358	[INFO]	177	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:23:55,358	[DEBUG]	
2020-12-20 03:23:58,744	[INFO]	178	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:23:58,747	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:23:59,767	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:24:00,791	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:24:00,793	[INFO]	181	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:24:00,793	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:24:00,794	[INFO]	182	SUCCESS	+2.0	
2020-12-20 03:24:00,794	[DEBUG]	
2020-12-20 03:24:01,818	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:24:02,863	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:24:03,889	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:24:04,898	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:24:05,935	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:24:06,962	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:24:07,964	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:24:08,974	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:24:09,993	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:24:10,978	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:24:11,999	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:24:12,949	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:24:13,966	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:24:15,005	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:24:16,025	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:24:17,032	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:24:18,058	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:24:19,051	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:24:20,070	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:24:23,495	[INFO]	202	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:24:23,496	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-20 03:24:24,471	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:24:24,472	[INFO]	204	SUCCESS	+2.0	
2020-12-20 03:24:24,472	[DEBUG]	
2020-12-20 03:24:25,497	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:24:26,508	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:24:27,541	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:24:30,841	[INFO]	208	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:24:30,842	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-20 03:24:34,234	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:24:34,236	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,32 ****
--- 23,38 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      continue;
                  }
  

2020-12-20 03:24:34,237	[INFO]	210	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:24:34,237	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-20 03:24:35,254	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:24:35,255	[INFO]	212	SUCCESS	+2.0	
2020-12-20 03:24:35,256	[DEBUG]	
2020-12-20 03:24:36,270	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:24:36,272	[INFO]	214	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-20 03:24:36,273	[DEBUG]	
2020-12-20 03:24:36,274	[INFO]	215	SUCCESS	+2.0	
2020-12-20 03:24:36,275	[DEBUG]	
2020-12-20 03:24:37,265	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:24:38,323	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:24:39,338	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:24:40,330	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:24:43,759	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:24:43,760	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 03:24:44,734	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:24:48,118	[INFO]	222	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:24:48,119	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 45,50 ****
--- 57,63 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 03:24:51,472	[INFO]	223	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:24:51,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:24:52,513	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:24:52,515	[INFO]	225	SUCCESS	+2.0	
2020-12-20 03:24:52,515	[DEBUG]	
2020-12-20 03:24:55,812	[INFO]	226	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:24:55,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:24:55,814	[INFO]	227	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:24:55,815	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:24:55,816	[INFO]	228	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:24:55,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:24:55,817	[INFO]	229	SUCCESS	+2.0	
2020-12-20 03:24:55,817	[DEBUG]	
2020-12-20 03:24:59,037	[INFO]	230	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:24:59,038	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:25:00,052	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:25:01,059	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:25:02,126	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:25:02,128	[INFO]	234	SUCCESS	+2.0	
2020-12-20 03:25:02,129	[DEBUG]	
2020-12-20 03:25:03,125	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:25:04,160	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:25:05,202	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:25:06,234	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:25:07,277	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:25:08,291	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:25:09,314	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:25:12,729	[INFO]	242	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-20 03:25:13,778	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:25:14,773	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:25:15,792	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:25:16,798	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:25:17,808	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:25:18,823	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:25:22,175	[INFO]	249	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:25:22,176	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:25:22,177	[INFO]	250	SUCCESS	+2.0	
2020-12-20 03:25:22,177	[DEBUG]	
2020-12-20 03:25:23,157	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:25:24,142	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:25:25,148	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:25:26,167	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:25:27,167	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:25:30,434	[INFO]	256	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:25:31,435	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:25:34,942	[INFO]	258	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:25:34,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:25:36,248	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:25:36,250	[INFO]	260	SUCCESS	+2.0	
2020-12-20 03:25:36,250	[DEBUG]	
2020-12-20 03:25:37,551	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:25:38,779	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:25:40,072	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:25:41,249	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:25:42,457	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:25:43,820	[INFO]	266	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-20 03:25:44,873	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:25:46,158	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:25:47,404	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:25:48,446	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:25:49,498	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:25:52,886	[INFO]	272	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:25:52,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:25:53,909	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:25:54,941	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:25:58,407	[INFO]	275	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:25:58,408	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(startnode, 0);
              }
          }
  

2020-12-20 03:25:58,409	[INFO]	276	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:25:58,409	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:25:59,490	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:26:00,542	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:26:01,579	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:26:01,581	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:26:01,582	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:26:02,628	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:26:05,970	[INFO]	282	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:26:05,971	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:26:05,972	[INFO]	283	SUCCESS	+2.0	
2020-12-20 03:26:05,972	[DEBUG]	
2020-12-20 03:26:06,968	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:26:10,419	[INFO]	285	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:26:10,420	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:26:10,421	[INFO]	286	SUCCESS	+2.0	
2020-12-20 03:26:10,422	[DEBUG]	
2020-12-20 03:26:13,700	[INFO]	287	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:26:13,701	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:26:13,702	[INFO]	288	SUCCESS	+2.0	
2020-12-20 03:26:13,702	[DEBUG]	
2020-12-20 03:26:14,734	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:26:15,758	[INFO]	290	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 03:26:16,741	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:26:17,781	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:26:17,783	[INFO]	293	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:26:17,784	[DEBUG]	
2020-12-20 03:26:17,785	[INFO]	294	SUCCESS	+2.0	
2020-12-20 03:26:17,785	[DEBUG]	
2020-12-20 03:26:18,781	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:26:22,197	[INFO]	296	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:26:22,198	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:26:25,607	[INFO]	297	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:26:25,609	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 38,43 ****
--- 39,46 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:26:26,630	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:26:29,992	[INFO]	299	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:26:29,994	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
--- 26,37 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 38,43 ****
--- 41,48 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:26:29,995	[INFO]	300	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:26:29,996	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 38,43 ****
--- 39,46 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:26:29,997	[INFO]	301	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:26:29,998	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 38,43 ****
--- 39,46 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:26:29,999	[INFO]	302	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:26:30,000	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 38,43 ****
--- 39,46 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:26:30,001	[INFO]	303	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-20 03:26:30,002	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 38,43 ****
--- 39,46 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:26:31,011	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:26:31,013	[INFO]	305	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:26:31,014	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 38,43 ****
--- 39,46 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:26:34,406	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:26:34,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:26:34,408	[INFO]	307	SUCCESS	+2.0	
2020-12-20 03:26:34,408	[DEBUG]	
2020-12-20 03:26:35,453	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:26:36,509	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:26:37,516	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:26:38,549	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:26:38,551	[INFO]	312	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-20 03:26:38,552	[DEBUG]	
2020-12-20 03:26:38,552	[INFO]	313	SUCCESS	+2.0	
2020-12-20 03:26:38,553	[DEBUG]	
2020-12-20 03:26:39,546	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:26:42,942	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:26:42,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:26:42,944	[INFO]	316	SUCCESS	+2.0	
2020-12-20 03:26:42,944	[DEBUG]	
2020-12-20 03:26:58,014	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:27:01,079	[INFO]	318	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:27:01,079	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:27:01,080	[INFO]	319	SUCCESS	+2.0	
2020-12-20 03:27:01,080	[DEBUG]	
2020-12-20 03:27:01,967	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:27:02,899	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:27:03,931	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:27:07,223	[INFO]	323	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:27:08,244	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:27:09,239	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:27:10,242	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:27:11,303	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:27:12,318	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:27:13,317	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:27:14,371	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:27:15,382	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:27:18,736	[INFO]	332	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:27:18,737	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:27:18,738	[INFO]	333	SUCCESS	+2.0	
2020-12-20 03:27:18,738	[DEBUG]	
2020-12-20 03:27:22,062	[INFO]	334	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:27:22,063	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 03:27:25,390	[INFO]	335	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:27:25,392	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,31 ****
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:27:25,393	[INFO]	336	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:27:25,393	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 03:27:28,625	[INFO]	337	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:27:28,626	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,32 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:27:31,888	[INFO]	338	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:27:31,889	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:27:32,837	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:27:32,838	[INFO]	340	SUCCESS	+2.0	
2020-12-20 03:27:32,838	[DEBUG]	
2020-12-20 03:27:34,018	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:27:35,030	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:27:36,043	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:27:37,078	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:27:38,109	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:27:39,114	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:27:40,122	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:27:41,150	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:27:41,152	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:27:42,181	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:27:43,190	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:27:43,191	[INFO]	352	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:27:43,192	[DEBUG]	
2020-12-20 03:27:43,193	[INFO]	353	SUCCESS	+2.0	
2020-12-20 03:27:43,193	[DEBUG]	
2020-12-20 03:27:44,221	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:27:45,235	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:27:46,240	[INFO]	356	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:27:47,307	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:27:48,334	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:27:49,340	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:27:52,709	[INFO]	360	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:27:52,710	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:27:52,711	[INFO]	361	SUCCESS	+2.0	
2020-12-20 03:27:52,711	[DEBUG]	
2020-12-20 03:27:56,016	[INFO]	362	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:27:56,017	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:27:56,018	[INFO]	363	SUCCESS	+2.0	
2020-12-20 03:27:56,018	[DEBUG]	
2020-12-20 03:27:57,038	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:27:58,063	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:27:59,035	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:28:00,121	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:28:01,123	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:28:02,171	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:28:03,201	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:28:06,525	[INFO]	371	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:28:06,527	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:28:07,525	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:28:07,527	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:28:08,533	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:28:09,547	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:28:10,576	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:28:11,578	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:28:12,576	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:28:13,574	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:28:14,582	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:28:14,584	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:28:15,605	[INFO]	383	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:28:16,589	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:28:17,605	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:28:18,617	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:28:19,652	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:28:20,676	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:28:35,754	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:28:36,683	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:28:37,618	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:28:38,507	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:28:41,448	[INFO]	393	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:28:41,449	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:28:41,450	[INFO]	394	SUCCESS	+2.0	
2020-12-20 03:28:41,450	[DEBUG]	
2020-12-20 03:28:42,486	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:28:43,460	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:28:44,513	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:28:47,919	[INFO]	398	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:28:47,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:28:47,921	[INFO]	399	SUCCESS	+2.0	
2020-12-20 03:28:47,921	[DEBUG]	
2020-12-20 03:28:48,911	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:28:52,303	[INFO]	401	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:28:52,304	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:28:52,305	[INFO]	402	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:28:52,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:28:53,328	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:28:54,352	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:28:55,390	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:28:55,393	[INFO]	406	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:28:55,395	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:28:56,408	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:28:56,410	[INFO]	408	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-20 03:28:56,410	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:28:57,418	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:28:57,419	[INFO]	410	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:28:57,420	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:28:58,427	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:29:02,111	[INFO]	412	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:29:02,113	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 24,29 ****
--- 26,35 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:29:03,117	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:29:04,180	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:29:07,530	[INFO]	415	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:29:07,531	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 25,35 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
! 
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:29:10,887	[INFO]	416	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:29:10,888	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 25,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:29:11,887	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:29:12,915	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:29:13,917	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:29:17,192	[INFO]	420	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:29:17,193	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:29:17,194	[INFO]	421	SUCCESS	+2.0	
2020-12-20 03:29:17,194	[DEBUG]	
2020-12-20 03:29:18,218	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:29:19,248	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:29:20,356	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:29:23,659	[INFO]	425	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:29:23,660	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:29:24,658	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:29:25,701	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:29:25,703	[INFO]	428	SUCCESS	+2.0	
2020-12-20 03:29:25,704	[DEBUG]	
2020-12-20 03:29:29,030	[INFO]	429	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:29:29,031	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-20 03:29:29,032	[INFO]	430	SUCCESS	+2.0	
2020-12-20 03:29:29,032	[DEBUG]	
2020-12-20 03:29:29,958	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:29:33,339	[INFO]	432	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:29:33,340	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 03:29:34,358	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:29:37,748	[INFO]	434	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:29:37,749	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  
***************
*** 46,51 ****
--- 47,53 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Set<Node> visitedNodes = new HashSet<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 03:29:41,089	[INFO]	435	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:29:41,091	[INFO]	436	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:29:41,091	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 03:29:41,092	[INFO]	437	SUCCESS	+2.0	
2020-12-20 03:29:41,092	[DEBUG]	
2020-12-20 03:29:42,092	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:29:45,454	[INFO]	439	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:29:45,455	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 03:29:45,456	[INFO]	440	SUCCESS	+2.0	
2020-12-20 03:29:45,456	[DEBUG]	
2020-12-20 03:29:46,490	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:29:47,550	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:29:48,566	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:29:49,580	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:29:50,596	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:29:51,626	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:29:51,628	[INFO]	447	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:29:51,628	[DEBUG]	
2020-12-20 03:29:52,629	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:29:55,952	[INFO]	449	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:29:56,956	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:29:56,959	[INFO]	451	SUCCESS	+2.0	
2020-12-20 03:29:56,960	[DEBUG]	
2020-12-20 03:30:00,457	[INFO]	452	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:30:00,461	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:30:00,463	[INFO]	453	SUCCESS	+2.0	
2020-12-20 03:30:00,464	[DEBUG]	
2020-12-20 03:30:01,409	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:30:02,471	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:30:03,500	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:30:04,556	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:30:05,546	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:30:06,581	[INFO]	459	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-20 03:30:07,592	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:30:08,622	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:30:09,634	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:30:10,672	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:30:11,681	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:30:12,710	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:30:13,737	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:30:17,098	[INFO]	467	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:30:17,099	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 03:30:17,100	[INFO]	468	SUCCESS	+2.0	
2020-12-20 03:30:17,100	[DEBUG]	
2020-12-20 03:30:18,101	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:30:19,110	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:30:22,450	[INFO]	471	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:30:23,449	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:30:24,472	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:30:25,529	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:30:26,587	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:30:29,925	[INFO]	476	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:30:29,926	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:30:33,204	[INFO]	477	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:30:34,221	[INFO]	478	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:30:35,350	[INFO]	479	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:30:36,404	[INFO]	480	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:30:36,405	[INFO]	481	SUCCESS	+2.0	
2020-12-20 03:30:36,405	[DEBUG]	
2020-12-20 03:30:37,416	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:30:38,483	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:30:39,526	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:30:42,869	[INFO]	485	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:30:42,870	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:30:43,814	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:30:44,844	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:30:44,845	[INFO]	488	SUCCESS	+2.0	
2020-12-20 03:30:44,846	[DEBUG]	
2020-12-20 03:30:45,916	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:30:49,284	[INFO]	490	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:30:49,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:30:49,286	[INFO]	491	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:30:49,287	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:30:49,288	[INFO]	492	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:30:49,288	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:30:50,335	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:30:50,336	[INFO]	494	SUCCESS	+2.0	
2020-12-20 03:30:50,336	[DEBUG]	
2020-12-20 03:31:05,395	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:31:06,287	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:31:07,181	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:31:10,320	[INFO]	498	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:31:13,569	[INFO]	499	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:31:13,570	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 03:31:16,961	[INFO]	500	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:31:16,963	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 44,49 ****
--- 45,51 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 03:31:16,964	[INFO]	==== END ====
2020-12-20 03:31:16,964	[INFO]	Reason: step budget
2020-12-20 03:31:16,965	[INFO]	
2020-12-20 03:31:16,965	[INFO]	========== EPOCH 12 ==========
2020-12-20 03:31:16,966	[INFO]	==== WARMUP ====
2020-12-20 03:31:20,269	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:31:20,269	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:31:23,632	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:31:23,633	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:31:27,053	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:31:27,054	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:31:30,413	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 03:31:30,414	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:31:30,414	[INFO]	==== START ====
2020-12-20 03:31:31,389	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:31:32,452	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:31:33,488	[INFO]	3	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-20 03:31:34,515	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:31:35,646	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:31:36,682	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:31:37,728	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:31:41,073	[INFO]	8	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:31:41,074	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 03:31:42,141	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:31:42,143	[INFO]	10	SUCCESS	+2.0	
2020-12-20 03:31:42,143	[DEBUG]	
2020-12-20 03:31:43,199	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:31:44,251	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:31:45,263	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:31:46,270	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:31:47,314	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:31:48,364	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:31:49,396	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:31:50,444	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:31:51,455	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:31:52,504	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:31:53,483	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:31:53,484	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:31:54,485	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:31:55,515	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:31:56,528	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:31:57,529	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:31:58,560	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:31:59,589	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:32:00,621	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:32:01,639	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:32:02,701	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:32:03,772	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:32:04,816	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:32:05,854	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:32:06,868	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:32:07,877	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:32:11,310	[INFO]	37	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:32:11,311	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:32:12,277	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:32:12,278	[INFO]	39	SUCCESS	+2.0	
2020-12-20 03:32:12,278	[DEBUG]	
2020-12-20 03:32:13,275	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:32:14,328	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:32:15,351	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:32:16,353	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:32:17,367	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:32:18,435	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:32:18,437	[INFO]	46	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:32:18,437	[DEBUG]	
2020-12-20 03:32:18,438	[INFO]	47	SUCCESS	+2.0	
2020-12-20 03:32:18,438	[DEBUG]	
2020-12-20 03:32:19,460	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:32:20,503	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:32:21,551	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:32:24,959	[INFO]	51	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:32:28,277	[INFO]	52	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:32:28,278	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:32:29,285	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:32:30,311	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:32:30,314	[INFO]	55	SUCCESS	+2.0	
2020-12-20 03:32:30,314	[DEBUG]	
2020-12-20 03:32:31,360	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:32:32,406	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:32:33,436	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:32:34,488	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:32:37,828	[INFO]	60	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:32:37,828	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:32:37,829	[INFO]	61	SUCCESS	+2.0	
2020-12-20 03:32:37,829	[DEBUG]	
2020-12-20 03:32:38,883	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:32:42,173	[INFO]	63	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:32:42,174	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:32:42,174	[INFO]	64	SUCCESS	+2.0	
2020-12-20 03:32:42,175	[DEBUG]	
2020-12-20 03:32:43,174	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:32:44,167	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:32:45,127	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:32:46,142	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:32:49,422	[INFO]	69	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:32:50,423	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:32:51,466	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:32:52,518	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:32:53,515	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:32:54,579	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:32:55,628	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:32:56,661	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:32:57,667	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:32:58,711	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:32:59,760	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:33:03,156	[INFO]	80	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:33:03,157	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:33:03,158	[INFO]	81	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:33:03,159	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:33:03,160	[INFO]	82	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:33:03,160	[DEBUG]	
2020-12-20 03:33:06,541	[INFO]	83	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:33:06,542	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 03:33:07,546	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:33:08,553	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:33:12,006	[INFO]	86	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:33:12,007	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 32,38 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:33:12,964	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:33:16,342	[INFO]	88	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:33:16,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:33:16,344	[INFO]	89	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:33:16,345	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:33:16,345	[INFO]	90	SUCCESS	+2.0	
2020-12-20 03:33:16,345	[DEBUG]	
2020-12-20 03:33:17,327	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:33:18,340	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:33:19,344	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:33:22,728	[INFO]	94	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:33:22,728	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:33:22,729	[INFO]	95	SUCCESS	+2.0	
2020-12-20 03:33:22,730	[DEBUG]	
2020-12-20 03:33:23,743	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:33:24,774	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:33:24,775	[INFO]	98	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:33:24,776	[DEBUG]	
2020-12-20 03:33:25,741	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:33:25,744	[INFO]	100	SUCCESS	+2.0	
2020-12-20 03:33:25,744	[DEBUG]	
2020-12-20 03:33:26,750	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:33:27,764	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:33:28,751	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:33:29,763	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:33:30,796	[INFO]	105	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:33:30,798	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:33:31,842	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:33:32,927	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:33:33,971	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:33:49,042	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:33:49,992	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:33:50,953	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:33:51,877	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:33:52,805	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:33:55,938	[INFO]	115	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:33:55,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:33:55,940	[INFO]	116	SUCCESS	+2.0	
2020-12-20 03:33:55,940	[DEBUG]	
2020-12-20 03:33:56,920	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:33:57,918	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:33:58,964	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:34:00,013	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:34:01,032	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:34:02,075	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:34:03,078	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:34:04,112	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:34:19,214	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:34:22,168	[INFO]	126	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:34:22,168	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:34:22,169	[INFO]	127	SUCCESS	+2.0	
2020-12-20 03:34:22,169	[DEBUG]	
2020-12-20 03:34:25,552	[INFO]	128	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:34:25,553	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:34:25,554	[INFO]	129	SUCCESS	+2.0	
2020-12-20 03:34:25,554	[DEBUG]	
2020-12-20 03:34:26,551	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:34:27,556	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:34:28,573	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:34:29,613	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:34:33,004	[INFO]	134	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:34:33,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:34:34,057	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:34:34,058	[INFO]	136	SUCCESS	+2.0	
2020-12-20 03:34:34,058	[DEBUG]	
2020-12-20 03:34:35,080	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:34:36,110	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:34:37,172	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:34:38,241	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:34:39,268	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:34:40,306	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:34:43,615	[INFO]	143	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:34:43,616	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:34:44,658	[INFO]	144	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:34:44,660	[INFO]	145	SUCCESS	+2.0	
2020-12-20 03:34:44,661	[DEBUG]	
2020-12-20 03:34:45,677	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:34:46,679	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:34:50,095	[INFO]	148	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:34:50,096	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:34:53,425	[INFO]	149	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:34:53,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,32 ****
--- 21,36 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      continue;
                  }
  

2020-12-20 03:34:53,427	[INFO]	150	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:34:53,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:34:54,509	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:34:57,826	[INFO]	152	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:34:57,827	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,28 ****
--- 21,30 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 03:34:57,828	[INFO]	153	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:34:57,829	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:34:57,829	[INFO]	154	SUCCESS	+2.0	
2020-12-20 03:34:57,830	[DEBUG]	
2020-12-20 03:35:01,330	[INFO]	155	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:35:01,331	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:35:01,332	[INFO]	156	SUCCESS	+2.0	
2020-12-20 03:35:01,332	[DEBUG]	
2020-12-20 03:35:04,671	[INFO]	157	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:35:04,672	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-20 03:35:08,090	[INFO]	158	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:35:08,092	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 18,23 ****
--- 19,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:35:09,048	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:35:10,058	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:35:11,103	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:35:11,105	[INFO]	162	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:35:11,106	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-20 03:35:11,107	[INFO]	163	SUCCESS	+2.0	
2020-12-20 03:35:11,108	[DEBUG]	
2020-12-20 03:35:14,512	[INFO]	164	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:35:15,463	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:35:16,432	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:35:17,439	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:35:18,403	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:35:19,410	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:35:20,375	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:35:21,395	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:35:22,459	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:35:23,534	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:35:24,548	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:35:25,583	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:35:26,601	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:35:27,612	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:35:30,952	[INFO]	178	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:35:30,953	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 03:35:31,960	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:35:31,962	[INFO]	180	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:35:31,962	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 03:35:31,963	[INFO]	181	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:35:31,964	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 03:35:31,965	[INFO]	182	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:35:31,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 03:35:32,987	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:35:32,989	[INFO]	184	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:35:32,990	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 03:35:32,991	[INFO]	185	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:35:32,992	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 03:35:34,033	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:35:34,035	[INFO]	187	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:35:34,036	[DEBUG]	
2020-12-20 03:35:34,037	[INFO]	188	SUCCESS	+2.0	
2020-12-20 03:35:34,037	[DEBUG]	
2020-12-20 03:35:35,070	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:35:39,360	[INFO]	190	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:35:39,362	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:35:39,363	[INFO]	191	SUCCESS	+2.0	
2020-12-20 03:35:39,364	[DEBUG]	
2020-12-20 03:35:40,571	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:35:41,627	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:35:45,022	[INFO]	194	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:35:45,023	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:35:46,046	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:35:46,047	[INFO]	196	SUCCESS	+2.0	
2020-12-20 03:35:46,047	[DEBUG]	
2020-12-20 03:35:47,081	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:35:48,124	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:35:49,128	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:35:50,163	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:35:51,174	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:35:51,176	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:35:52,196	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:35:53,229	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:35:54,249	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:35:55,240	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:35:56,259	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:35:57,319	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:35:58,352	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:35:59,408	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:36:00,434	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:36:01,461	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:36:02,529	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:36:03,569	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:36:04,562	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:36:05,570	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:36:06,590	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:36:07,611	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:36:08,593	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:36:09,612	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:36:12,987	[INFO]	221	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:36:12,988	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 03:36:12,989	[INFO]	222	SUCCESS	+2.0	
2020-12-20 03:36:12,989	[DEBUG]	
2020-12-20 03:36:13,976	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:36:15,030	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:36:16,043	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:36:17,051	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:36:17,053	[INFO]	227	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:36:17,054	[DEBUG]	
2020-12-20 03:36:18,058	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:36:18,060	[INFO]	229	SUCCESS	+2.0	
2020-12-20 03:36:18,060	[DEBUG]	
2020-12-20 03:36:19,080	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:36:19,084	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:36:22,471	[INFO]	232	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:36:22,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-20 03:36:23,515	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:36:24,551	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:36:24,552	[INFO]	235	SUCCESS	+2.0	
2020-12-20 03:36:24,552	[DEBUG]	
2020-12-20 03:36:25,498	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:36:28,877	[INFO]	237	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:36:28,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 03:36:29,889	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:36:29,890	[INFO]	239	SUCCESS	+2.0	
2020-12-20 03:36:29,890	[DEBUG]	
2020-12-20 03:36:30,932	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:36:31,984	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:36:33,036	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:36:36,471	[INFO]	243	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:36:36,472	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 03:36:36,472	[INFO]	244	SUCCESS	+2.0	
2020-12-20 03:36:36,473	[DEBUG]	
2020-12-20 03:36:39,817	[INFO]	245	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:36:39,818	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:36:40,872	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:36:41,911	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:36:42,971	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:36:42,972	[INFO]	249	SUCCESS	+2.0	
2020-12-20 03:36:42,973	[DEBUG]	
2020-12-20 03:36:44,036	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:36:45,152	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:36:46,203	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:36:46,206	[INFO]	253	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:36:46,207	[DEBUG]	
2020-12-20 03:36:46,208	[INFO]	254	SUCCESS	+2.0	
2020-12-20 03:36:46,209	[DEBUG]	
2020-12-20 03:36:47,252	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:36:48,269	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:36:49,297	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:36:52,686	[INFO]	258	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:36:52,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:36:56,043	[INFO]	259	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:36:56,044	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 38,43 ****
--- 40,47 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:36:57,049	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:36:58,078	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:36:58,079	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:36:58,080	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:36:59,067	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:36:59,068	[INFO]	264	SUCCESS	+2.0	
2020-12-20 03:36:59,068	[DEBUG]	
2020-12-20 03:36:59,069	[INFO]	265	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:36:59,070	[DEBUG]	
2020-12-20 03:37:00,104	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:37:15,175	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:37:16,061	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:37:16,980	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:37:16,982	[INFO]	270	SUCCESS	+2.0	
2020-12-20 03:37:16,983	[DEBUG]	
2020-12-20 03:37:17,898	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:37:20,964	[INFO]	272	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-20 03:37:21,983	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:37:25,336	[INFO]	274	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:37:25,337	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:37:25,338	[INFO]	275	SUCCESS	+2.0	
2020-12-20 03:37:25,338	[DEBUG]	
2020-12-20 03:37:28,664	[INFO]	276	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:37:28,665	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:37:29,673	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:37:29,674	[INFO]	278	SUCCESS	+2.0	
2020-12-20 03:37:29,674	[DEBUG]	
2020-12-20 03:37:30,705	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:37:31,735	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:37:32,735	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:37:32,736	[INFO]	282	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:37:32,737	[DEBUG]	
2020-12-20 03:37:33,761	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:37:33,763	[INFO]	284	SUCCESS	+2.0	
2020-12-20 03:37:33,763	[DEBUG]	
2020-12-20 03:37:34,795	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:37:35,835	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:37:36,825	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:37:37,872	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:37:41,366	[INFO]	289	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:37:41,368	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:37:44,617	[INFO]	290	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:37:45,655	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:37:45,657	[INFO]	292	SUCCESS	+2.0	
2020-12-20 03:37:45,657	[DEBUG]	
2020-12-20 03:37:46,664	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:37:47,741	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:37:48,757	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:37:49,773	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:37:53,220	[INFO]	297	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:37:53,221	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:37:53,222	[INFO]	298	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:37:53,223	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:37:54,183	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:37:55,253	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:37:56,245	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:37:57,257	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:37:57,259	[INFO]	303	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:37:57,259	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:37:58,320	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:37:59,335	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:37:59,338	[INFO]	306	SUCCESS	+2.0	
2020-12-20 03:37:59,338	[DEBUG]	
2020-12-20 03:38:00,336	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:38:03,723	[INFO]	308	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:38:03,724	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:38:04,691	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:38:05,710	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:38:06,761	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:38:07,740	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:38:08,757	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:38:08,759	[INFO]	314	SUCCESS	+2.0	
2020-12-20 03:38:08,760	[DEBUG]	
2020-12-20 03:38:09,776	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:38:10,796	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:38:11,830	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:38:12,837	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:38:13,869	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:38:14,890	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:38:15,923	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:38:16,937	[INFO]	322	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:38:17,984	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:38:18,973	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:38:20,009	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:38:21,028	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:38:24,504	[INFO]	327	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:38:24,505	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:38:25,503	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:38:25,504	[INFO]	329	SUCCESS	+2.0	
2020-12-20 03:38:25,504	[DEBUG]	
2020-12-20 03:38:26,529	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:38:27,538	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:38:28,562	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:38:29,590	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:38:29,592	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:38:30,519	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:38:31,527	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:38:34,968	[INFO]	337	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:38:35,959	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:38:36,987	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:38:38,059	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:38:39,050	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:38:42,499	[INFO]	342	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:38:42,500	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:38:43,421	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:38:43,422	[INFO]	344	SUCCESS	+2.0	
2020-12-20 03:38:43,422	[DEBUG]	
2020-12-20 03:38:44,428	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:38:45,476	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:38:48,880	[INFO]	347	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-20 03:38:48,881	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:38:52,349	[INFO]	348	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:38:52,350	[INFO]	349	SUCCESS	+2.0	
2020-12-20 03:38:52,350	[DEBUG]	
2020-12-20 03:38:53,326	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:38:54,264	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:38:55,290	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:38:56,261	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:38:56,264	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:38:57,269	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:38:57,270	[INFO]	356	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:38:57,270	[DEBUG]	
2020-12-20 03:38:57,271	[INFO]	357	SUCCESS	+2.0	
2020-12-20 03:38:57,271	[DEBUG]	
2020-12-20 03:38:58,318	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:38:59,335	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:39:14,408	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:39:15,300	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:39:18,314	[INFO]	362	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:39:18,315	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:39:19,234	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:39:20,216	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:39:21,325	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:39:22,340	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:39:23,393	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:39:23,395	[INFO]	368	SUCCESS	+2.0	
2020-12-20 03:39:23,395	[DEBUG]	
2020-12-20 03:39:24,428	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:39:25,526	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:39:28,959	[INFO]	371	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:39:28,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:39:28,961	[INFO]	372	SUCCESS	+2.0	
2020-12-20 03:39:28,961	[DEBUG]	
2020-12-20 03:39:44,030	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:39:44,931	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:39:47,915	[INFO]	375	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:39:47,916	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:39:47,917	[INFO]	376	SUCCESS	+2.0	
2020-12-20 03:39:47,917	[DEBUG]	
2020-12-20 03:39:48,812	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:39:52,119	[INFO]	378	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:39:52,120	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-20 03:39:53,059	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:39:53,060	[INFO]	380	SUCCESS	+2.0	
2020-12-20 03:39:53,060	[DEBUG]	
2020-12-20 03:39:54,105	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:39:55,132	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:39:56,148	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:39:59,586	[INFO]	384	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:39:59,587	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:39:59,588	[INFO]	385	SUCCESS	+2.0	
2020-12-20 03:39:59,588	[DEBUG]	
2020-12-20 03:40:02,972	[INFO]	386	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:40:02,973	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:40:02,973	[INFO]	387	SUCCESS	+2.0	
2020-12-20 03:40:02,974	[DEBUG]	
2020-12-20 03:40:06,412	[INFO]	388	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:40:06,413	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 03:40:06,414	[INFO]	389	SUCCESS	+2.0	
2020-12-20 03:40:06,414	[DEBUG]	
2020-12-20 03:40:09,705	[INFO]	390	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:40:09,706	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:40:10,743	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:40:10,745	[INFO]	392	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:40:10,746	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:40:11,777	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:40:11,778	[INFO]	394	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:40:11,779	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:40:11,780	[INFO]	395	SUCCESS	+2.0	
2020-12-20 03:40:11,780	[DEBUG]	
2020-12-20 03:40:12,831	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:40:13,865	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:40:14,867	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:40:18,183	[INFO]	399	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:40:18,184	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-20 03:40:18,185	[INFO]	400	SUCCESS	+2.0	
2020-12-20 03:40:18,185	[DEBUG]	
2020-12-20 03:40:19,166	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:40:20,172	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:40:21,200	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:40:22,220	[INFO]	404	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:40:23,264	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:40:24,292	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:40:25,307	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:40:26,347	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:40:27,342	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:40:28,366	[INFO]	410	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:40:29,424	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:40:32,790	[INFO]	412	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:40:33,819	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:40:34,802	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:40:35,956	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:40:35,957	[INFO]	416	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:40:35,957	[DEBUG]	
2020-12-20 03:40:39,311	[INFO]	417	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:40:39,312	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:40:40,338	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:40:41,319	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:40:41,322	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:40:41,324	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:40:41,325	[INFO]	421	SUCCESS	+2.0	
2020-12-20 03:40:41,326	[DEBUG]	
2020-12-20 03:40:42,355	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:40:43,352	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:40:44,348	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:40:45,392	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:40:48,768	[INFO]	426	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:40:48,770	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:40:49,748	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:40:50,765	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:40:50,766	[INFO]	429	SUCCESS	+2.0	
2020-12-20 03:40:50,766	[DEBUG]	
2020-12-20 03:40:51,768	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:40:52,807	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:40:53,830	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:40:54,862	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:40:55,911	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:40:56,927	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:41:00,361	[INFO]	436	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:41:01,331	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:41:02,374	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:41:03,382	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:41:06,774	[INFO]	440	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:41:06,775	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 03:41:07,807	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:41:08,812	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:41:08,813	[INFO]	443	SUCCESS	+2.0	
2020-12-20 03:41:08,814	[DEBUG]	
2020-12-20 03:41:12,210	[INFO]	444	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:41:12,211	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:41:12,212	[INFO]	445	SUCCESS	+2.0	
2020-12-20 03:41:12,212	[DEBUG]	
2020-12-20 03:41:12,213	[INFO]	446	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:41:12,213	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:41:13,182	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:41:14,179	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:41:14,180	[INFO]	449	SUCCESS	+2.0	
2020-12-20 03:41:14,181	[DEBUG]	
2020-12-20 03:41:15,185	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:41:18,564	[INFO]	451	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:41:18,565	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-20 03:41:19,497	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:41:19,498	[INFO]	453	SUCCESS	+2.0	
2020-12-20 03:41:19,498	[DEBUG]	
2020-12-20 03:41:22,864	[INFO]	454	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:41:22,865	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-20 03:41:23,880	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:41:23,881	[INFO]	456	SUCCESS	+2.0	
2020-12-20 03:41:23,882	[DEBUG]	
2020-12-20 03:41:24,926	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:41:25,960	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:41:26,997	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:41:28,006	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:41:29,039	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:41:30,055	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:41:31,058	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:41:32,100	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:41:33,116	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:41:36,593	[INFO]	466	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-20 03:41:39,938	[INFO]	467	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:41:39,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:41:40,937	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:41:40,940	[INFO]	469	SUCCESS	+2.0	
2020-12-20 03:41:40,941	[DEBUG]	
2020-12-20 03:41:41,968	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:41:42,942	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:41:43,984	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:41:45,119	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:41:46,215	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:41:47,289	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:41:48,313	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:41:51,648	[INFO]	477	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:41:51,649	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 03:41:51,650	[INFO]	478	SUCCESS	+2.0	
2020-12-20 03:41:51,651	[DEBUG]	
2020-12-20 03:41:55,000	[INFO]	479	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:41:56,009	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:41:57,001	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:42:00,282	[INFO]	482	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:42:00,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:42:00,284	[INFO]	483	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:42:00,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:42:01,212	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:42:01,215	[INFO]	485	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:42:01,216	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:42:01,219	[INFO]	486	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:42:01,220	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:42:01,222	[INFO]	487	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:42:01,224	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:42:02,155	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:42:03,437	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:42:03,438	[INFO]	490	SUCCESS	+2.0	
2020-12-20 03:42:03,439	[DEBUG]	
2020-12-20 03:42:04,455	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:42:07,828	[INFO]	492	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:42:07,829	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-20 03:42:08,818	[INFO]	493	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:42:09,842	[INFO]	494	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:42:24,919	[INFO]	495	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:42:25,863	[INFO]	496	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:42:25,865	[INFO]	497	SUCCESS	+2.0	
2020-12-20 03:42:25,865	[DEBUG]	
2020-12-20 03:42:25,867	[INFO]	498	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:42:25,868	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:42:26,767	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:42:27,721	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:42:27,722	[INFO]	==== END ====
2020-12-20 03:42:27,722	[INFO]	Reason: step budget
2020-12-20 03:42:27,723	[INFO]	
2020-12-20 03:42:27,723	[INFO]	========== EPOCH 13 ==========
2020-12-20 03:42:27,723	[INFO]	==== WARMUP ====
2020-12-20 03:42:31,106	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:42:31,106	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:42:34,442	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:42:34,443	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:42:37,796	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:42:37,796	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:42:41,136	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 03:42:41,136	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:42:41,136	[INFO]	==== START ====
2020-12-20 03:42:42,121	[INFO]	1	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:42:43,076	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:42:44,099	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:42:45,138	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:42:48,541	[INFO]	5	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:42:48,542	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 03:42:48,542	[INFO]	6	SUCCESS	+2.0	
2020-12-20 03:42:48,543	[DEBUG]	
2020-12-20 03:42:49,617	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:42:49,618	[INFO]	8	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:42:49,619	[DEBUG]	
2020-12-20 03:42:52,992	[INFO]	9	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:42:52,993	[INFO]	10	SUCCESS	+2.0	
2020-12-20 03:42:52,994	[DEBUG]	
2020-12-20 03:42:53,933	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:42:57,337	[INFO]	12	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:42:57,337	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 03:42:57,338	[INFO]	13	SUCCESS	+2.0	
2020-12-20 03:42:57,339	[DEBUG]	
2020-12-20 03:42:58,340	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:42:59,369	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:43:00,386	[INFO]	16	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:43:01,420	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:43:02,427	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:43:03,497	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:43:04,497	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:43:05,533	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:43:06,605	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:43:07,587	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:43:08,609	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:43:11,909	[INFO]	25	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:43:11,910	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 03:43:12,875	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:43:12,877	[INFO]	27	SUCCESS	+2.0	
2020-12-20 03:43:12,878	[DEBUG]	
2020-12-20 03:43:13,914	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:43:14,961	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:43:14,964	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:43:18,327	[INFO]	31	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:43:18,328	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:43:18,329	[INFO]	32	SUCCESS	+2.0	
2020-12-20 03:43:18,329	[DEBUG]	
2020-12-20 03:43:19,335	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:43:20,346	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:43:21,377	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:43:22,389	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:43:23,434	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:43:24,379	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:43:27,714	[INFO]	39	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:43:27,716	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:43:28,713	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:43:29,728	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:43:32,958	[INFO]	42	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:43:32,959	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:43:32,960	[INFO]	43	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:43:32,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:43:34,018	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:43:35,020	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:43:36,052	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:43:37,047	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:43:37,048	[INFO]	48	SUCCESS	+2.0	
2020-12-20 03:43:37,048	[DEBUG]	
2020-12-20 03:43:38,075	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:43:39,077	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:43:40,104	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:43:43,397	[INFO]	52	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:43:43,398	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:43:44,407	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:43:44,409	[INFO]	54	SUCCESS	+2.0	
2020-12-20 03:43:44,410	[DEBUG]	
2020-12-20 03:43:45,409	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:43:45,410	[INFO]	56	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-20 03:43:45,411	[DEBUG]	
2020-12-20 03:43:46,416	[INFO]	57	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:43:47,493	[INFO]	58	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:43:47,496	[INFO]	59	SUCCESS	+2.0	
2020-12-20 03:43:47,499	[DEBUG]	
2020-12-20 03:43:50,896	[INFO]	60	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:43:50,897	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:43:50,898	[INFO]	61	SUCCESS	+2.0	
2020-12-20 03:43:50,898	[DEBUG]	
2020-12-20 03:43:51,855	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:43:52,895	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:43:53,921	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:43:54,914	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:43:55,950	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:43:56,978	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:43:57,978	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:43:58,991	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:43:59,939	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:44:03,311	[INFO]	71	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:44:03,312	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:44:03,313	[INFO]	72	SUCCESS	+2.0	
2020-12-20 03:44:03,313	[DEBUG]	
2020-12-20 03:44:03,314	[INFO]	73	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:44:03,314	[DEBUG]	
2020-12-20 03:44:03,315	[INFO]	74	SUCCESS	+2.0	
2020-12-20 03:44:03,315	[DEBUG]	
2020-12-20 03:44:04,343	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:44:05,414	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:44:06,454	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:44:07,453	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:44:08,498	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:44:09,523	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:44:10,530	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:44:11,597	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:44:14,959	[INFO]	83	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:44:14,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:44:14,960	[INFO]	84	SUCCESS	+2.0	
2020-12-20 03:44:14,961	[DEBUG]	
2020-12-20 03:44:15,974	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:44:16,987	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:44:17,996	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:44:19,067	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:44:20,068	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:44:21,078	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:44:22,068	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:44:23,117	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:44:24,164	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:44:25,189	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:44:28,577	[INFO]	95	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:44:28,578	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 03:44:29,567	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:44:29,568	[INFO]	97	SUCCESS	+2.0	
2020-12-20 03:44:29,568	[DEBUG]	
2020-12-20 03:44:32,936	[INFO]	98	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:44:32,937	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:44:33,972	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:44:35,029	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:44:35,031	[INFO]	101	SUCCESS	+2.0	
2020-12-20 03:44:35,032	[DEBUG]	
2020-12-20 03:44:36,075	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:44:37,128	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:44:40,501	[INFO]	104	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 03:44:40,502	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:44:40,504	[INFO]	105	SUCCESS	+2.0	
2020-12-20 03:44:40,505	[DEBUG]	
2020-12-20 03:44:41,505	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:44:42,522	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:44:43,548	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:44:44,544	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:44:45,595	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:44:46,584	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:44:47,631	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:44:48,659	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:44:49,693	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:44:50,696	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:44:51,722	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:44:52,752	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:44:53,787	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:44:54,816	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:44:55,838	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:44:56,871	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:44:57,910	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:44:58,932	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:44:59,985	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:45:01,029	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:45:04,425	[INFO]	126	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:45:04,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 03:45:04,427	[INFO]	127	SUCCESS	+2.0	
2020-12-20 03:45:04,427	[DEBUG]	
2020-12-20 03:45:07,731	[INFO]	128	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:45:07,732	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 03:45:11,070	[INFO]	129	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:45:11,071	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  
***************
*** 48,53 ****
--- 49,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:45:12,097	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:45:13,115	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:45:16,432	[INFO]	132	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:45:16,433	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:45:17,439	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:45:17,440	[INFO]	134	SUCCESS	+2.0	
2020-12-20 03:45:17,440	[DEBUG]	
2020-12-20 03:45:18,398	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:45:19,407	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:45:20,370	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:45:23,786	[INFO]	138	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:45:23,787	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-20 03:45:24,768	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:45:24,770	[INFO]	140	SUCCESS	+2.0	
2020-12-20 03:45:24,770	[DEBUG]	
2020-12-20 03:45:25,797	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:45:26,902	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:45:27,947	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:45:28,965	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:45:29,994	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:45:31,002	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:45:32,048	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:45:35,576	[INFO]	148	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:45:37,031	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:45:37,033	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:45:38,196	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:45:39,602	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:45:40,927	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:45:42,187	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:45:43,557	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:45:44,776	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:45:45,773	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:45:47,114	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:45:50,710	[INFO]	159	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:45:50,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 03:45:51,629	[INFO]	160	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:45:52,610	[INFO]	161	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:45:52,611	[INFO]	162	SUCCESS	+2.0	
2020-12-20 03:45:52,611	[DEBUG]	
2020-12-20 03:45:53,626	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:45:54,630	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:45:55,671	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:45:56,727	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:45:57,758	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:45:58,810	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:45:59,846	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:46:03,180	[INFO]	170	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:46:03,181	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:46:04,176	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:46:04,177	[INFO]	172	SUCCESS	+2.0	
2020-12-20 03:46:04,178	[DEBUG]	
2020-12-20 03:46:05,202	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:46:08,636	[INFO]	174	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:46:08,637	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:46:09,633	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:46:09,634	[INFO]	176	SUCCESS	+2.0	
2020-12-20 03:46:09,634	[DEBUG]	
2020-12-20 03:46:10,652	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:46:11,650	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:46:15,098	[INFO]	179	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:46:18,442	[INFO]	180	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:46:18,443	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:46:18,444	[INFO]	181	SUCCESS	+2.0	
2020-12-20 03:46:18,444	[DEBUG]	
2020-12-20 03:46:21,834	[INFO]	182	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:46:21,835	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:46:21,836	[INFO]	183	SUCCESS	+2.0	
2020-12-20 03:46:21,836	[DEBUG]	
2020-12-20 03:46:21,837	[INFO]	184	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:46:21,838	[DEBUG]	
2020-12-20 03:46:21,839	[INFO]	185	SUCCESS	+2.0	
2020-12-20 03:46:21,839	[DEBUG]	
2020-12-20 03:46:22,846	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:46:37,948	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:46:38,857	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:46:41,779	[INFO]	189	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:46:41,779	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-20 03:46:45,035	[INFO]	190	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:46:46,055	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:46:49,533	[INFO]	192	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:46:49,534	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
--- 27,44 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:46:50,525	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:46:53,968	[INFO]	194	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:46:53,969	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-20 03:46:54,945	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:46:55,903	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:46:56,921	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:46:56,922	[INFO]	198	SUCCESS	+2.0	
2020-12-20 03:46:56,922	[DEBUG]	
2020-12-20 03:46:57,925	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:47:01,248	[INFO]	200	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:47:04,641	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:47:04,642	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 03:47:07,957	[INFO]	202	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:47:07,958	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
+             }
+         }
          return minNode;
      }
  }

2020-12-20 03:47:11,344	[INFO]	203	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:47:12,391	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:47:15,821	[INFO]	205	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:47:15,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 52,57 ****
--- 53,65 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
+             }
+         }
          return minNode;
      }
  }

2020-12-20 03:47:16,846	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:47:20,168	[INFO]	207	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:47:20,170	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 52,57 ****
--- 53,65 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 03:47:23,602	[INFO]	208	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:47:23,603	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:47:26,982	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:47:26,983	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 31,36 ****
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:47:28,028	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:47:31,231	[INFO]	211	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:47:31,233	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:32,175	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:47:33,143	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:47:33,144	[INFO]	214	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:47:33,145	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:33,146	[INFO]	215	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:47:33,147	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:34,137	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:47:35,179	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:47:38,461	[INFO]	218	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:47:38,462	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:39,462	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:47:39,465	[INFO]	220	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:47:39,466	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:40,447	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:47:41,456	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:47:42,405	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:47:43,340	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:47:46,631	[INFO]	225	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:47:46,633	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:46,634	[INFO]	226	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:47:46,635	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:46,636	[INFO]	227	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:47:46,637	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:46,638	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:47:46,639	[INFO]	229	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:47:46,639	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:46,640	[INFO]	230	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:47:46,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:46,642	[INFO]	231	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:47:46,642	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:47:47,639	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:47:47,640	[INFO]	233	SUCCESS	+2.0	
2020-12-20 03:47:47,641	[DEBUG]	
2020-12-20 03:47:50,958	[INFO]	234	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:47:50,959	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:47:50,960	[INFO]	235	SUCCESS	+2.0	
2020-12-20 03:47:50,960	[DEBUG]	
2020-12-20 03:47:51,955	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:47:52,968	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:47:53,982	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:47:55,014	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:47:56,078	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:47:57,097	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:47:58,128	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:48:01,454	[INFO]	243	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:48:01,455	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-20 03:48:02,485	[INFO]	244	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:48:02,486	[INFO]	245	SUCCESS	+2.0	
2020-12-20 03:48:02,486	[DEBUG]	
2020-12-20 03:48:03,499	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:48:04,502	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:48:05,599	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:48:06,678	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:48:07,712	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:48:08,746	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:48:09,761	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:48:10,800	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:48:11,838	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:48:12,848	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:48:13,872	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:48:17,177	[INFO]	257	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:48:18,131	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:48:19,163	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:48:22,586	[INFO]	260	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:48:25,827	[INFO]	261	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:48:25,827	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:48:26,803	[INFO]	262	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:48:27,855	[INFO]	263	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:48:27,856	[INFO]	264	SUCCESS	+2.0	
2020-12-20 03:48:27,856	[DEBUG]	
2020-12-20 03:48:28,884	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:48:28,886	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:48:29,912	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:48:30,930	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:48:31,960	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:48:32,978	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:48:34,039	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:48:35,058	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:48:36,162	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:48:37,210	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:48:38,214	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:48:39,271	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:48:40,357	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:48:41,387	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:48:42,437	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:48:43,467	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:48:44,457	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:48:47,833	[INFO]	282	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:48:47,834	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 03:48:48,829	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:48:49,900	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:48:50,923	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:48:51,924	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:48:52,965	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:48:53,970	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:48:54,999	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:48:56,017	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:48:56,961	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:48:57,988	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:48:57,989	[INFO]	293	SUCCESS	+2.0	
2020-12-20 03:48:57,990	[DEBUG]	
2020-12-20 03:48:59,012	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:49:02,278	[INFO]	295	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:49:02,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:49:02,280	[INFO]	296	SUCCESS	+2.0	
2020-12-20 03:49:02,280	[DEBUG]	
2020-12-20 03:49:03,339	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:49:04,361	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:49:05,386	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:49:08,775	[INFO]	300	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:49:08,776	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:49:12,179	[INFO]	301	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:49:12,181	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 39,44 ****
--- 40,47 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:49:13,211	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:49:16,608	[INFO]	303	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:49:16,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 27,32 ****
--- 28,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  
***************
*** 38,43 ****
--- 41,48 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         unvisitedNodes.put(startnode, 0);
  
          return Integer.MAX_VALUE;
      }

2020-12-20 03:49:17,612	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:49:17,614	[INFO]	305	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:49:17,615	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 39,44 ****
--- 40,47 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:49:20,938	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:49:20,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:49:20,939	[INFO]	307	SUCCESS	+2.0	
2020-12-20 03:49:20,940	[DEBUG]	
2020-12-20 03:49:21,966	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:49:25,418	[INFO]	309	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:49:25,418	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 03:49:25,419	[INFO]	310	SUCCESS	+2.0	
2020-12-20 03:49:25,419	[DEBUG]	
2020-12-20 03:49:28,674	[INFO]	311	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:49:29,692	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:49:33,154	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:49:33,155	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 visitedNodes.add(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:49:33,156	[INFO]	314	SUCCESS	+2.0	
2020-12-20 03:49:33,156	[DEBUG]	
2020-12-20 03:49:36,623	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:49:36,624	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:49:36,625	[INFO]	316	SUCCESS	+2.0	
2020-12-20 03:49:36,625	[DEBUG]	
2020-12-20 03:49:37,634	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:49:38,696	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:49:41,995	[INFO]	319	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:49:41,996	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:49:41,996	[INFO]	320	SUCCESS	+2.0	
2020-12-20 03:49:41,997	[DEBUG]	
2020-12-20 03:49:43,019	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:49:44,038	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:49:45,047	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:49:46,059	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:49:47,087	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:49:48,147	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:49:49,140	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:49:50,206	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:49:51,228	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:49:52,235	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:49:53,267	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:49:54,295	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:49:57,691	[INFO]	333	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:49:57,692	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-20 03:49:57,693	[INFO]	334	SUCCESS	+2.0	
2020-12-20 03:49:57,694	[DEBUG]	
2020-12-20 03:49:58,624	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:49:59,655	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:50:00,689	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:50:01,694	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:50:05,113	[INFO]	339	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:50:05,114	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:50:06,095	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:50:07,116	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-20 03:50:07,119	[INFO]	342	SUCCESS	+2.0	
2020-12-20 03:50:07,119	[DEBUG]	
2020-12-20 03:50:10,452	[INFO]	343	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:50:10,453	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 03:50:10,454	[INFO]	344	SUCCESS	+2.0	
2020-12-20 03:50:10,454	[DEBUG]	
2020-12-20 03:50:11,529	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:50:12,565	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:50:13,597	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:50:14,629	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:50:18,054	[INFO]	349	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:50:19,051	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:50:20,053	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:50:21,072	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:50:22,110	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:50:23,119	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:50:24,165	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:50:25,191	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:50:26,236	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:50:27,256	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:50:28,309	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:50:29,318	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:50:30,367	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:50:31,409	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:50:34,812	[INFO]	363	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:50:34,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:50:35,945	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:50:35,946	[INFO]	365	SUCCESS	+2.0	
2020-12-20 03:50:35,947	[DEBUG]	
2020-12-20 03:50:36,961	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:50:37,998	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:50:41,305	[INFO]	368	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:50:41,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-20 03:50:41,307	[INFO]	369	SUCCESS	+2.0	
2020-12-20 03:50:41,307	[DEBUG]	
2020-12-20 03:50:42,353	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:50:43,388	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:50:44,406	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:50:45,394	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:50:46,403	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:50:47,476	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:50:48,507	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:50:49,502	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:50:52,832	[INFO]	378	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:50:52,834	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:50:53,846	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:50:57,208	[INFO]	381	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:50:57,209	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:50:58,221	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:50:59,252	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:51:00,277	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:51:00,280	[INFO]	385	SUCCESS	+2.0	
2020-12-20 03:51:00,281	[DEBUG]	
2020-12-20 03:51:01,290	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:51:02,312	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:51:03,350	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:51:04,383	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:51:07,740	[INFO]	390	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:51:07,741	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:51:07,742	[INFO]	391	SUCCESS	+2.0	
2020-12-20 03:51:07,742	[DEBUG]	
2020-12-20 03:51:08,741	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:51:09,724	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:51:13,042	[INFO]	394	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:51:13,043	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-20 03:51:14,014	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:51:14,979	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:51:15,929	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:51:16,861	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:51:16,862	[INFO]	399	SUCCESS	+2.0	
2020-12-20 03:51:16,863	[DEBUG]	
2020-12-20 03:51:17,891	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:51:18,915	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:51:19,919	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:51:20,927	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:51:24,342	[INFO]	404	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:51:24,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:51:24,343	[INFO]	405	SUCCESS	+2.0	
2020-12-20 03:51:24,344	[DEBUG]	
2020-12-20 03:51:27,662	[INFO]	406	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:51:27,663	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 03:51:27,664	[INFO]	407	SUCCESS	+2.0	
2020-12-20 03:51:27,664	[DEBUG]	
2020-12-20 03:51:30,919	[INFO]	408	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:51:30,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:51:34,274	[INFO]	409	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:51:34,275	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,38 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,41 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:51:37,621	[INFO]	410	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:51:37,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-20 03:51:37,623	[INFO]	411	SUCCESS	+2.0	
2020-12-20 03:51:37,623	[DEBUG]	
2020-12-20 03:51:38,652	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:51:42,089	[INFO]	413	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:51:42,090	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 03:51:43,180	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:51:44,275	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:51:47,656	[INFO]	416	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:51:47,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:51:47,658	[INFO]	417	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:51:47,659	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 03:51:47,660	[INFO]	418	SUCCESS	+2.0	
2020-12-20 03:51:47,660	[DEBUG]	
2020-12-20 03:51:48,676	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:51:51,973	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:51:51,974	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:51:51,975	[INFO]	421	SUCCESS	+2.0	
2020-12-20 03:51:51,975	[DEBUG]	
2020-12-20 03:51:52,951	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:51:53,966	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:51:57,293	[INFO]	424	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:51:57,295	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 03:51:57,296	[INFO]	425	SUCCESS	+2.0	
2020-12-20 03:51:57,296	[DEBUG]	
2020-12-20 03:51:58,323	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:51:59,342	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:52:02,731	[INFO]	428	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:52:02,732	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-20 03:52:02,733	[INFO]	429	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:52:02,734	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-20 03:52:02,735	[INFO]	430	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:52:02,735	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-20 03:52:06,042	[INFO]	431	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:52:06,043	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 27,32 ****
--- 28,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-20 03:52:07,092	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:52:08,121	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:52:11,457	[INFO]	434	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:52:11,459	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-20 03:52:11,460	[INFO]	435	SUCCESS	+2.0	
2020-12-20 03:52:11,461	[DEBUG]	
2020-12-20 03:52:12,469	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:52:13,467	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:52:14,491	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:52:15,550	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:52:16,575	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:52:19,975	[INFO]	441	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:52:19,976	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 03:52:19,977	[INFO]	442	SUCCESS	+2.0	
2020-12-20 03:52:19,977	[DEBUG]	
2020-12-20 03:52:20,982	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:52:22,002	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:52:25,396	[INFO]	445	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:52:25,397	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 03:52:26,510	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:52:26,512	[INFO]	447	SUCCESS	+2.0	
2020-12-20 03:52:26,512	[DEBUG]	
2020-12-20 03:52:26,513	[INFO]	448	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:52:26,513	[DEBUG]	
2020-12-20 03:52:27,539	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:52:27,540	[INFO]	450	SUCCESS	+2.0	
2020-12-20 03:52:27,541	[DEBUG]	
2020-12-20 03:52:28,555	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:52:31,943	[INFO]	452	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:52:31,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:52:31,944	[INFO]	453	SUCCESS	+2.0	
2020-12-20 03:52:31,945	[DEBUG]	
2020-12-20 03:52:32,952	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:52:32,954	[INFO]	455	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:52:32,954	[DEBUG]	
2020-12-20 03:52:32,955	[INFO]	456	SUCCESS	+2.0	
2020-12-20 03:52:32,956	[DEBUG]	
2020-12-20 03:52:36,376	[INFO]	457	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:52:36,377	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:52:37,402	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:52:37,405	[INFO]	459	SUCCESS	+2.0	
2020-12-20 03:52:37,406	[DEBUG]	
2020-12-20 03:52:38,435	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:52:39,453	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:52:40,496	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:52:41,518	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:52:42,522	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:52:43,535	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:52:44,591	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:52:45,668	[INFO]	467	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:52:46,684	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:52:50,101	[INFO]	469	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:52:50,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-20 03:52:50,102	[INFO]	470	SUCCESS	+2.0	
2020-12-20 03:52:50,103	[DEBUG]	
2020-12-20 03:53:05,162	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:53:08,112	[INFO]	472	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:53:09,023	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:53:09,924	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:53:10,861	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:53:11,850	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:53:12,854	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:53:13,863	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:53:14,878	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:53:15,895	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:53:16,916	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:53:17,922	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:53:18,944	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:53:19,959	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:53:20,996	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:53:22,024	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:53:25,413	[INFO]	487	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:53:25,414	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 03:53:25,415	[INFO]	488	SUCCESS	+2.0	
2020-12-20 03:53:25,415	[DEBUG]	
2020-12-20 03:53:26,393	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:53:27,320	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:53:28,272	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:53:31,660	[INFO]	492	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:53:31,661	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:53:35,044	[INFO]	493	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:53:35,045	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,53 ****
--- 61,67 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 03:53:38,482	[INFO]	494	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:53:38,483	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:53:38,484	[INFO]	495	SUCCESS	+2.0	
2020-12-20 03:53:38,484	[DEBUG]	
2020-12-20 03:53:39,483	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:53:40,512	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:53:43,865	[INFO]	498	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:53:43,866	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 03:53:44,838	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:53:45,881	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:53:45,881	[INFO]	==== END ====
2020-12-20 03:53:45,881	[INFO]	Reason: step budget
2020-12-20 03:53:45,883	[INFO]	
2020-12-20 03:53:45,883	[INFO]	========== EPOCH 14 ==========
2020-12-20 03:53:45,883	[INFO]	==== WARMUP ====
2020-12-20 03:53:49,347	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:53:49,348	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:53:52,635	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:53:52,635	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:53:55,950	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 03:53:55,950	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:53:59,278	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 03:53:59,278	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 03:53:59,278	[INFO]	==== START ====
2020-12-20 03:54:02,582	[INFO]	1	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:54:02,583	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 03:54:03,629	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:54:03,632	[INFO]	3	SUCCESS	+2.0	
2020-12-20 03:54:03,632	[DEBUG]	
2020-12-20 03:54:06,991	[INFO]	4	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:54:06,992	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-20 03:54:07,987	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:54:07,989	[INFO]	6	SUCCESS	+2.0	
2020-12-20 03:54:07,990	[DEBUG]	
2020-12-20 03:54:08,968	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:54:10,091	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:54:13,484	[INFO]	9	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:54:13,485	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 03:54:14,498	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:54:15,544	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:54:18,788	[INFO]	12	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:54:18,789	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:54:18,790	[INFO]	13	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:54:18,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 03:54:19,735	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:54:20,703	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:54:20,706	[INFO]	16	SUCCESS	+2.0	
2020-12-20 03:54:20,707	[DEBUG]	
2020-12-20 03:54:21,718	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:54:22,733	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:54:26,143	[INFO]	19	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:54:26,144	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:54:26,145	[INFO]	20	SUCCESS	+2.0	
2020-12-20 03:54:26,145	[DEBUG]	
2020-12-20 03:54:29,446	[INFO]	21	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:54:29,447	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-20 03:54:29,448	[INFO]	22	SUCCESS	+2.0	
2020-12-20 03:54:29,448	[DEBUG]	
2020-12-20 03:54:29,449	[INFO]	23	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:54:29,449	[DEBUG]	
2020-12-20 03:54:29,450	[INFO]	24	SUCCESS	+2.0	
2020-12-20 03:54:29,450	[DEBUG]	
2020-12-20 03:54:30,428	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:54:31,467	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:54:32,552	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:54:33,583	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:54:34,654	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:54:35,630	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:54:35,632	[INFO]	31	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:54:35,632	[DEBUG]	
2020-12-20 03:54:35,633	[INFO]	32	SUCCESS	+2.0	
2020-12-20 03:54:35,633	[DEBUG]	
2020-12-20 03:54:36,654	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:54:37,681	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:54:38,725	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:54:39,736	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:54:40,782	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:54:41,818	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:54:42,850	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:54:43,879	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:54:44,878	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:54:45,863	[INFO]	42	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:54:46,877	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:54:47,939	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:54:48,977	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:54:50,029	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:54:51,040	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:54:52,095	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:54:53,091	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 03:54:54,150	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:54:57,560	[INFO]	51	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:54:57,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 03:54:58,553	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:54:59,575	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:55:00,636	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:55:01,718	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:55:01,721	[INFO]	56	SUCCESS	+2.0	
2020-12-20 03:55:01,722	[DEBUG]	
2020-12-20 03:55:02,754	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:55:03,787	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:55:04,822	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:55:05,843	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:55:06,849	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:55:10,381	[INFO]	62	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:55:11,368	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:55:12,348	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:55:13,365	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:55:16,762	[INFO]	66	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:55:16,763	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:55:20,372	[INFO]	67	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:55:20,374	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:55:20,376	[INFO]	68	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:55:20,376	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:55:23,784	[INFO]	69	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:55:23,785	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 50,56 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 03:55:24,910	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:55:28,237	[INFO]	71	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:55:28,238	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:55:29,256	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:55:30,319	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:55:30,321	[INFO]	74	SUCCESS	+2.0	
2020-12-20 03:55:30,321	[DEBUG]	
2020-12-20 03:55:31,367	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:55:32,334	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:55:33,363	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:55:37,353	[INFO]	78	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:55:37,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-20 03:55:38,441	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:55:42,160	[INFO]	80	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:55:42,162	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         Node minNode = null;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 21,26 ****
--- 22,30 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:55:45,481	[INFO]	81	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:55:45,482	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 03:55:45,482	[INFO]	82	SUCCESS	+2.0	
2020-12-20 03:55:45,483	[DEBUG]	
2020-12-20 03:55:46,481	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:55:49,876	[INFO]	84	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 03:55:49,877	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 03:55:50,902	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:55:51,880	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:55:51,882	[INFO]	87	SUCCESS	+2.0	
2020-12-20 03:55:51,883	[DEBUG]	
2020-12-20 03:55:52,896	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:55:53,874	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:55:54,905	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:55:55,994	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:55:59,372	[INFO]	92	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:55:59,373	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 03:56:00,385	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:56:15,450	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:56:15,451	[INFO]	95	SUCCESS	+2.0	
2020-12-20 03:56:15,452	[DEBUG]	
2020-12-20 03:56:16,392	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:56:19,256	[INFO]	97	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:56:19,257	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 03:56:20,153	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:56:21,069	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:56:21,071	[INFO]	100	SUCCESS	+2.0	
2020-12-20 03:56:21,071	[DEBUG]	
2020-12-20 03:56:24,427	[INFO]	101	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:56:25,478	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:56:26,479	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:56:27,480	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:56:28,479	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:56:29,480	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:56:32,956	[INFO]	107	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:56:32,957	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 03:56:33,984	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:56:35,029	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:56:35,031	[INFO]	110	SUCCESS	+2.0	
2020-12-20 03:56:35,031	[DEBUG]	
2020-12-20 03:56:36,064	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:56:37,097	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:56:38,171	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:56:39,193	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:56:40,224	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:56:41,264	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 03:56:42,218	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:56:43,264	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:56:44,314	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:56:45,382	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 03:56:46,431	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:56:47,499	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:56:48,580	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:56:51,939	[INFO]	124	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:56:51,940	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:56:52,929	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:56:53,874	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:56:53,875	[INFO]	127	SUCCESS	+2.0	
2020-12-20 03:56:53,875	[DEBUG]	
2020-12-20 03:56:54,890	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:56:55,915	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:56:56,939	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:56:57,981	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:56:58,988	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:57:00,004	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:57:03,367	[INFO]	134	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:57:03,368	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:57:03,369	[INFO]	135	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:57:03,369	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:57:04,369	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 03:57:04,370	[INFO]	137	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:57:04,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:57:05,368	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:57:08,759	[INFO]	139	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:57:08,761	[INFO]	140	SUCCESS	+2.0	
2020-12-20 03:57:08,762	[DEBUG]	
2020-12-20 03:57:09,750	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:57:09,752	[INFO]	142	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:57:09,752	[DEBUG]	
2020-12-20 03:57:09,753	[INFO]	143	SUCCESS	+2.0	
2020-12-20 03:57:09,753	[DEBUG]	
2020-12-20 03:57:10,767	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:57:14,086	[INFO]	145	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:57:14,087	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:57:15,092	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:57:15,093	[INFO]	147	SUCCESS	+2.0	
2020-12-20 03:57:15,094	[DEBUG]	
2020-12-20 03:57:18,470	[INFO]	148	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:57:18,471	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 03:57:19,477	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:57:19,480	[INFO]	150	SUCCESS	+2.0	
2020-12-20 03:57:19,481	[DEBUG]	
2020-12-20 03:57:20,507	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 03:57:21,532	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:57:22,534	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:57:23,579	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:57:24,588	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:57:25,626	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:57:26,641	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 03:57:27,680	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:57:28,705	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:57:29,700	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:57:30,698	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:57:31,796	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:57:32,851	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:57:36,415	[INFO]	164	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:57:36,416	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 03:57:36,416	[INFO]	165	SUCCESS	+2.0	
2020-12-20 03:57:36,417	[DEBUG]	
2020-12-20 03:57:37,383	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:57:37,385	[INFO]	167	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-20 03:57:37,386	[DEBUG]	
2020-12-20 03:57:37,387	[INFO]	168	SUCCESS	+2.0	
2020-12-20 03:57:37,388	[DEBUG]	
2020-12-20 03:57:52,460	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:57:55,565	[INFO]	170	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:57:55,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 03:57:55,567	[INFO]	171	SUCCESS	+2.0	
2020-12-20 03:57:55,567	[DEBUG]	
2020-12-20 03:57:56,439	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 03:57:57,327	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:58:00,744	[INFO]	174	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 03:58:00,746	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 03:58:00,747	[INFO]	175	SUCCESS	+2.0	
2020-12-20 03:58:00,747	[DEBUG]	
2020-12-20 03:58:01,736	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:58:05,098	[INFO]	177	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:58:05,100	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-20 03:58:08,535	[INFO]	178	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:58:08,537	[INFO]	179	SUCCESS	+2.0	
2020-12-20 03:58:08,537	[DEBUG]	
2020-12-20 03:58:09,524	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:58:10,543	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:58:11,589	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:58:12,632	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:58:13,627	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:58:14,654	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:58:17,986	[INFO]	186	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:58:17,987	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:58:18,975	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:58:20,034	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 03:58:20,036	[INFO]	189	SUCCESS	+2.0	
2020-12-20 03:58:20,037	[DEBUG]	
2020-12-20 03:58:23,436	[INFO]	190	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:58:23,437	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 03:58:23,438	[INFO]	191	SUCCESS	+2.0	
2020-12-20 03:58:23,438	[DEBUG]	
2020-12-20 03:58:24,416	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 03:58:25,425	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 03:58:26,432	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 03:58:27,444	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:58:27,446	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:58:28,471	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:58:29,861	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:58:29,862	[INFO]	199	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:58:29,863	[DEBUG]	
2020-12-20 03:58:29,863	[INFO]	200	SUCCESS	+2.0	
2020-12-20 03:58:29,864	[DEBUG]	
2020-12-20 03:58:31,240	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:58:32,720	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:58:36,977	[INFO]	203	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:58:36,978	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:58:37,971	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:58:37,972	[INFO]	205	SUCCESS	+2.0	
2020-12-20 03:58:37,973	[DEBUG]	
2020-12-20 03:58:38,972	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 03:58:40,018	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 03:58:55,090	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 03:58:56,010	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:58:56,957	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 03:58:57,882	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 03:59:01,037	[INFO]	212	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-20 03:59:01,038	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 03:59:01,039	[INFO]	213	SUCCESS	+2.0	
2020-12-20 03:59:01,040	[DEBUG]	
2020-12-20 03:59:02,061	[INFO]	214	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:59:03,091	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:59:04,138	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 03:59:05,111	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 03:59:06,146	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:59:07,242	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:59:08,225	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 03:59:09,284	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:59:10,284	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 03:59:11,321	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:59:12,337	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 03:59:13,402	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 03:59:14,438	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 03:59:15,457	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 03:59:16,487	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 03:59:17,496	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 03:59:18,535	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 03:59:21,813	[INFO]	231	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 03:59:21,814	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 03:59:21,815	[INFO]	232	SUCCESS	+2.0	
2020-12-20 03:59:21,815	[DEBUG]	
2020-12-20 03:59:25,166	[INFO]	233	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:59:25,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 03:59:25,168	[INFO]	234	SUCCESS	+2.0	
2020-12-20 03:59:25,168	[DEBUG]	
2020-12-20 03:59:26,196	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 03:59:27,189	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 03:59:28,218	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 03:59:31,565	[INFO]	238	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 03:59:31,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 03:59:31,566	[INFO]	239	SUCCESS	+2.0	
2020-12-20 03:59:31,567	[DEBUG]	
2020-12-20 03:59:32,591	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:59:33,641	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 03:59:34,697	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:59:38,090	[INFO]	243	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 03:59:39,119	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 03:59:40,153	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 03:59:41,162	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 03:59:42,224	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 03:59:45,585	[INFO]	248	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 03:59:45,586	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 03:59:45,587	[INFO]	249	SUCCESS	+2.0	
2020-12-20 03:59:45,587	[DEBUG]	
2020-12-20 03:59:46,560	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 03:59:47,605	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 03:59:48,599	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 03:59:49,596	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 03:59:50,604	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 03:59:51,608	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 03:59:54,907	[INFO]	256	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 03:59:54,908	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 03:59:54,909	[INFO]	257	SUCCESS	+2.0	
2020-12-20 03:59:54,910	[DEBUG]	
2020-12-20 03:59:55,857	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 03:59:56,858	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 03:59:57,894	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 03:59:58,924	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 03:59:59,944	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:00:00,942	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:00:01,969	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:00:02,931	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:00:03,955	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:00:03,956	[INFO]	267	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:00:03,957	[DEBUG]	
2020-12-20 04:00:04,985	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:00:04,988	[INFO]	269	SUCCESS	+2.0	
2020-12-20 04:00:04,988	[DEBUG]	
2020-12-20 04:00:06,019	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:00:07,048	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:00:08,056	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:00:09,123	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:00:12,422	[INFO]	274	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:00:13,408	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:00:14,427	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:00:15,447	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:00:16,459	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:00:17,477	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:00:18,508	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:00:19,437	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:00:20,379	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:00:21,438	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:00:22,454	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:00:23,457	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:00:26,797	[INFO]	286	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:00:26,799	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-20 04:00:26,801	[INFO]	287	SUCCESS	+2.0	
2020-12-20 04:00:26,801	[DEBUG]	
2020-12-20 04:00:30,182	[INFO]	288	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:00:30,183	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 04:00:30,184	[INFO]	289	SUCCESS	+2.0	
2020-12-20 04:00:30,184	[DEBUG]	
2020-12-20 04:00:30,185	[INFO]	290	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:00:30,185	[DEBUG]	
2020-12-20 04:00:30,186	[INFO]	291	SUCCESS	+2.0	
2020-12-20 04:00:30,186	[DEBUG]	
2020-12-20 04:00:31,168	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:00:32,183	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:00:33,170	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:00:34,220	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:00:35,425	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:00:36,577	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:00:37,615	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:00:38,657	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:00:39,668	[INFO]	300	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-20 04:00:40,691	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:00:41,722	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:00:42,898	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:00:46,293	[INFO]	304	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:00:46,294	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:00:49,638	[INFO]	305	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-20 04:00:49,639	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:00:50,648	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:00:50,652	[INFO]	307	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:00:50,654	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:00:53,958	[INFO]	308	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:00:53,959	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,41 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 53,59 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:00:57,241	[INFO]	309	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:00:57,242	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,41 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:00:57,243	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:00:57,244	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:00:58,287	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:00:59,342	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:01:00,405	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:01:00,408	[INFO]	314	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:01:00,408	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:01:00,409	[INFO]	315	SUCCESS	+2.0	
2020-12-20 04:01:00,410	[DEBUG]	
2020-12-20 04:01:01,403	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:01:02,426	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:01:03,411	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:01:04,521	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:01:07,878	[INFO]	320	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:01:07,879	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 04:01:07,880	[INFO]	321	SUCCESS	+2.0	
2020-12-20 04:01:07,880	[DEBUG]	
2020-12-20 04:01:07,881	[INFO]	322	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:01:07,881	[DEBUG]	
2020-12-20 04:01:07,882	[INFO]	323	SUCCESS	+2.0	
2020-12-20 04:01:07,882	[DEBUG]	
2020-12-20 04:01:08,902	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:01:09,955	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:01:11,000	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:01:12,000	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:01:15,326	[INFO]	328	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:01:15,327	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:01:16,341	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:01:16,342	[INFO]	330	SUCCESS	+2.0	
2020-12-20 04:01:16,342	[DEBUG]	
2020-12-20 04:01:17,363	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:01:20,629	[INFO]	332	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:01:21,618	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:01:22,630	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:01:23,655	[INFO]	335	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:01:24,692	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:01:25,626	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:01:25,627	[INFO]	338	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:01:25,628	[DEBUG]	
2020-12-20 04:01:25,628	[INFO]	339	SUCCESS	+2.0	
2020-12-20 04:01:25,629	[DEBUG]	
2020-12-20 04:01:26,643	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:01:27,652	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:01:28,662	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:01:29,598	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:01:33,021	[INFO]	344	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:01:33,022	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:01:33,023	[INFO]	345	SUCCESS	+2.0	
2020-12-20 04:01:33,023	[DEBUG]	
2020-12-20 04:01:34,064	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:01:35,059	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:01:36,165	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:01:37,194	[INFO]	349	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:01:38,265	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:01:39,304	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:01:40,366	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:01:43,818	[INFO]	353	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:01:43,819	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:01:43,820	[INFO]	354	SUCCESS	+2.0	
2020-12-20 04:01:43,821	[DEBUG]	
2020-12-20 04:01:44,841	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:01:45,831	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:01:49,242	[INFO]	357	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:01:49,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:01:49,244	[INFO]	358	SUCCESS	+2.0	
2020-12-20 04:01:49,244	[DEBUG]	
2020-12-20 04:01:52,624	[INFO]	359	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:01:55,943	[INFO]	360	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:01:55,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 04:01:55,945	[INFO]	361	SUCCESS	+2.0	
2020-12-20 04:01:55,945	[DEBUG]	
2020-12-20 04:01:56,935	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:01:57,932	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:01:58,945	[INFO]	364	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:01:59,956	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:02:03,357	[INFO]	366	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:02:04,311	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:02:05,328	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:02:06,360	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:02:07,345	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:02:08,417	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:02:09,453	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:02:12,921	[INFO]	373	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:02:12,922	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:02:12,923	[INFO]	374	SUCCESS	+2.0	
2020-12-20 04:02:12,923	[DEBUG]	
2020-12-20 04:02:12,924	[INFO]	375	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:02:12,924	[DEBUG]	
2020-12-20 04:02:12,925	[INFO]	376	SUCCESS	+2.0	
2020-12-20 04:02:12,925	[DEBUG]	
2020-12-20 04:02:13,952	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:02:14,980	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:02:16,014	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:02:19,281	[INFO]	380	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:02:19,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:02:19,284	[INFO]	381	SUCCESS	+2.0	
2020-12-20 04:02:19,284	[DEBUG]	
2020-12-20 04:02:20,282	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:02:20,285	[INFO]	383	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:02:20,286	[DEBUG]	
2020-12-20 04:02:20,288	[INFO]	384	SUCCESS	+2.0	
2020-12-20 04:02:20,289	[DEBUG]	
2020-12-20 04:02:21,309	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:02:22,319	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:02:23,339	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:02:24,360	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:02:25,337	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:02:26,373	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:02:27,385	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:02:28,453	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:02:29,484	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:02:32,900	[INFO]	394	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:02:32,901	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-20 04:02:33,943	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:02:33,944	[INFO]	396	SUCCESS	+2.0	
2020-12-20 04:02:33,944	[DEBUG]	
2020-12-20 04:02:34,961	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:02:36,002	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:02:37,064	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:02:38,098	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:02:39,125	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:02:42,497	[INFO]	402	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:02:42,499	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:02:43,524	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:02:43,525	[INFO]	404	SUCCESS	+2.0	
2020-12-20 04:02:43,526	[DEBUG]	
2020-12-20 04:02:44,567	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:02:45,560	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:02:48,965	[INFO]	407	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:02:48,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:02:49,969	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:02:49,970	[INFO]	409	SUCCESS	+2.0	
2020-12-20 04:02:49,970	[DEBUG]	
2020-12-20 04:03:05,032	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:03:05,924	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:03:06,877	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:03:07,800	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:03:08,729	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:03:09,665	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:03:12,963	[INFO]	416	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:03:12,964	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 04:03:13,998	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:03:15,056	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:03:16,077	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:03:17,078	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:03:17,079	[INFO]	421	SUCCESS	+2.0	
2020-12-20 04:03:17,080	[DEBUG]	
2020-12-20 04:03:18,127	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:03:19,105	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:03:20,145	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:03:21,135	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:03:22,176	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:03:25,554	[INFO]	427	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:03:25,555	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:03:25,556	[INFO]	428	SUCCESS	+2.0	
2020-12-20 04:03:25,556	[DEBUG]	
2020-12-20 04:03:26,577	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:03:27,582	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:03:28,599	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:03:29,630	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:03:33,049	[INFO]	433	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:03:34,089	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:03:35,100	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:03:38,482	[INFO]	436	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:03:38,483	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 04:03:38,484	[INFO]	437	SUCCESS	+2.0	
2020-12-20 04:03:38,484	[DEBUG]	
2020-12-20 04:03:39,516	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:03:42,890	[INFO]	439	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:03:42,891	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 04:03:42,892	[INFO]	440	SUCCESS	+2.0	
2020-12-20 04:03:42,892	[DEBUG]	
2020-12-20 04:03:43,885	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:03:44,910	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:03:45,906	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:03:46,933	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:03:47,971	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:03:49,012	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:03:50,054	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:03:51,111	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:03:52,130	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:03:55,550	[INFO]	450	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:03:55,551	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:03:58,925	[INFO]	451	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:03:58,926	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,41 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:03:58,927	[INFO]	452	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:03:58,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:03:59,934	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:03:59,937	[INFO]	454	SUCCESS	+2.0	
2020-12-20 04:03:59,938	[DEBUG]	
2020-12-20 04:04:00,980	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:04:00,984	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:04:01,993	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:04:05,413	[INFO]	458	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:04:05,414	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 04:04:05,415	[INFO]	459	SUCCESS	+2.0	
2020-12-20 04:04:05,415	[DEBUG]	
2020-12-20 04:04:06,440	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:04:07,455	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:04:10,842	[INFO]	462	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:04:10,843	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:04:11,861	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:04:11,862	[INFO]	464	SUCCESS	+2.0	
2020-12-20 04:04:11,862	[DEBUG]	
2020-12-20 04:04:12,887	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:04:13,897	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:04:14,943	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:04:15,939	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:04:16,991	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:04:18,018	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:04:19,041	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:04:20,037	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:04:21,085	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:04:22,123	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:04:23,114	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:04:26,498	[INFO]	476	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:04:26,499	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-20 04:04:26,500	[INFO]	477	SUCCESS	+2.0	
2020-12-20 04:04:26,500	[DEBUG]	
2020-12-20 04:04:27,424	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:04:28,464	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:04:29,464	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:04:30,481	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:04:31,530	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:04:32,518	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:04:33,525	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:04:34,572	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:04:37,905	[INFO]	486	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:04:37,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 04:04:38,901	[INFO]	487	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:04:38,902	[INFO]	488	SUCCESS	+2.0	
2020-12-20 04:04:38,903	[DEBUG]	
2020-12-20 04:04:39,963	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:04:40,978	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:04:41,951	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:04:42,952	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:04:44,005	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:04:45,008	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:04:46,035	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:04:47,075	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:04:48,097	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:04:49,134	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:04:50,222	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:04:51,256	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:04:51,256	[INFO]	==== END ====
2020-12-20 04:04:51,257	[INFO]	Reason: step budget
2020-12-20 04:04:51,258	[INFO]	
2020-12-20 04:04:51,258	[INFO]	========== EPOCH 15 ==========
2020-12-20 04:04:51,259	[INFO]	==== WARMUP ====
2020-12-20 04:04:54,621	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:04:54,621	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:04:57,941	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:04:57,942	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:05:01,372	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:05:01,373	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:05:04,653	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 04:05:04,653	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:05:04,653	[INFO]	==== START ====
2020-12-20 04:05:05,682	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:05:09,049	[INFO]	2	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:05:09,049	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:05:09,050	[INFO]	3	SUCCESS	+2.0	
2020-12-20 04:05:09,051	[DEBUG]	
2020-12-20 04:05:10,039	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:05:13,390	[INFO]	5	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:05:14,407	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:05:14,410	[INFO]	7	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:05:14,411	[DEBUG]	
2020-12-20 04:05:15,455	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:05:18,817	[INFO]	9	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:05:18,818	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:05:18,819	[INFO]	10	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:05:18,820	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:05:22,090	[INFO]	11	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:05:22,091	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,42 ****
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 19,32 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+             unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:05:22,994	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:05:26,282	[INFO]	13	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:05:26,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:05:26,284	[INFO]	14	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:05:26,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:05:26,286	[INFO]	15	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:05:26,286	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:05:26,287	[INFO]	16	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:05:26,288	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:05:26,289	[INFO]	17	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:05:26,289	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:05:26,290	[INFO]	18	SUCCESS	+2.0	
2020-12-20 04:05:26,290	[DEBUG]	
2020-12-20 04:05:27,323	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:05:28,357	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:05:29,430	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:05:32,749	[INFO]	22	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:05:32,750	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:05:33,803	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:05:33,805	[INFO]	24	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:05:33,805	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:05:37,934	[INFO]	25	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:05:37,935	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:05:37,936	[INFO]	26	SUCCESS	+2.0	
2020-12-20 04:05:37,936	[DEBUG]	
2020-12-20 04:05:42,270	[INFO]	27	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 04:05:42,271	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:05:43,554	[INFO]	28	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:05:44,679	[INFO]	29	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:05:44,681	[INFO]	30	SUCCESS	+2.0	
2020-12-20 04:05:44,681	[DEBUG]	
2020-12-20 04:05:45,824	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:05:47,102	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:05:48,139	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:05:48,141	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:05:51,516	[INFO]	35	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:05:51,517	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-20 04:05:52,434	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:05:53,385	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:05:53,386	[INFO]	38	SUCCESS	+2.0	
2020-12-20 04:05:53,387	[DEBUG]	
2020-12-20 04:05:54,396	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:05:57,784	[INFO]	40	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:05:57,785	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 04:05:57,786	[INFO]	41	SUCCESS	+2.0	
2020-12-20 04:05:57,786	[DEBUG]	
2020-12-20 04:05:58,833	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:06:00,174	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:06:01,222	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:06:02,278	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:06:02,280	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:06:03,323	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:06:04,354	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:06:07,766	[INFO]	49	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:06:07,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:06:08,786	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:06:08,788	[INFO]	51	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:06:08,789	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:06:09,794	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:06:10,837	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:06:10,838	[INFO]	54	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:06:10,839	[DEBUG]	
2020-12-20 04:06:11,864	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:06:11,865	[INFO]	56	SUCCESS	+2.0	
2020-12-20 04:06:11,865	[DEBUG]	
2020-12-20 04:06:12,891	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:06:13,934	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:06:14,952	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:06:15,941	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:06:16,970	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:06:17,987	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:06:19,021	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:06:20,030	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:06:21,051	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:06:22,050	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:06:23,090	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:06:24,131	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:06:25,154	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:06:26,200	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:06:27,197	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:06:28,194	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:06:29,190	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:06:32,570	[INFO]	74	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:06:32,571	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:06:32,572	[INFO]	75	SUCCESS	+2.0	
2020-12-20 04:06:32,572	[DEBUG]	
2020-12-20 04:06:33,594	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:06:34,654	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:06:35,682	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:06:36,720	[INFO]	79	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:06:40,122	[INFO]	80	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:06:40,122	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 04:06:41,172	[INFO]	81	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:06:41,173	[INFO]	82	SUCCESS	+2.0	
2020-12-20 04:06:41,173	[DEBUG]	
2020-12-20 04:06:44,558	[INFO]	83	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:06:44,559	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 04:06:45,551	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:06:45,552	[INFO]	85	SUCCESS	+2.0	
2020-12-20 04:06:45,552	[DEBUG]	
2020-12-20 04:06:46,587	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:06:47,644	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:06:47,646	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:06:48,646	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:06:49,669	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:06:50,678	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:06:51,660	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:06:55,055	[INFO]	93	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:06:55,056	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 04:06:55,057	[INFO]	94	SUCCESS	+2.0	
2020-12-20 04:06:55,057	[DEBUG]	
2020-12-20 04:06:56,044	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:06:57,077	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:06:58,055	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:07:01,510	[INFO]	98	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:07:01,511	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:07:04,879	[INFO]	99	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:07:04,880	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 39,44 ****
--- 51,58 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:07:04,881	[INFO]	100	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:07:04,882	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:07:08,273	[INFO]	101	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:07:08,275	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 48,53 ****
--- 60,66 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:07:11,656	[INFO]	102	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:07:11,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:07:12,646	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:07:13,722	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:07:14,731	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:07:15,750	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:07:19,064	[INFO]	107	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:07:19,065	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,53 ****
--- 43,55 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:07:20,177	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:07:20,181	[INFO]	109	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:07:20,182	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:07:20,184	[INFO]	110	SUCCESS	+2.0	
2020-12-20 04:07:20,185	[DEBUG]	
2020-12-20 04:07:21,195	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:07:24,558	[INFO]	112	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:07:24,559	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:07:24,559	[INFO]	113	SUCCESS	+2.0	
2020-12-20 04:07:24,560	[DEBUG]	
2020-12-20 04:07:25,582	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:07:28,988	[INFO]	115	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:07:28,989	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:07:28,989	[INFO]	116	SUCCESS	+2.0	
2020-12-20 04:07:28,990	[DEBUG]	
2020-12-20 04:07:29,996	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:07:30,992	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:07:32,045	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:07:33,041	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:07:34,146	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:07:37,513	[INFO]	122	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:07:37,514	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:07:37,515	[INFO]	123	SUCCESS	+2.0	
2020-12-20 04:07:37,515	[DEBUG]	
2020-12-20 04:07:38,544	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:07:39,596	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:07:40,626	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:07:41,648	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:07:45,060	[INFO]	128	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:07:45,060	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
+                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:07:46,047	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:07:46,048	[INFO]	130	SUCCESS	+2.0	
2020-12-20 04:07:46,048	[DEBUG]	
2020-12-20 04:07:46,049	[INFO]	131	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:07:46,049	[DEBUG]	
2020-12-20 04:07:46,050	[INFO]	132	SUCCESS	+2.0	
2020-12-20 04:07:46,050	[DEBUG]	
2020-12-20 04:07:46,051	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:08:01,117	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:08:04,056	[INFO]	135	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:08:04,056	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 04:08:04,057	[INFO]	136	SUCCESS	+2.0	
2020-12-20 04:08:04,057	[DEBUG]	
2020-12-20 04:08:04,964	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:08:08,162	[INFO]	138	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:08:08,163	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:08:08,163	[INFO]	139	SUCCESS	+2.0	
2020-12-20 04:08:08,164	[DEBUG]	
2020-12-20 04:08:09,222	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:08:10,231	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:08:13,942	[INFO]	142	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:08:13,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:08:14,925	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:08:14,928	[INFO]	144	SUCCESS	+2.0	
2020-12-20 04:08:14,929	[DEBUG]	
2020-12-20 04:08:18,259	[INFO]	145	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:08:18,260	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 04:08:19,269	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:08:19,272	[INFO]	147	SUCCESS	+2.0	
2020-12-20 04:08:19,272	[DEBUG]	
2020-12-20 04:08:20,307	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:08:21,320	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:08:24,725	[INFO]	150	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:08:24,726	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:08:24,727	[INFO]	151	SUCCESS	+2.0	
2020-12-20 04:08:24,727	[DEBUG]	
2020-12-20 04:08:28,118	[INFO]	152	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:08:28,120	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 04:08:28,120	[INFO]	153	SUCCESS	+2.0	
2020-12-20 04:08:28,121	[DEBUG]	
2020-12-20 04:08:31,491	[INFO]	154	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:08:31,492	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:08:31,492	[INFO]	155	SUCCESS	+2.0	
2020-12-20 04:08:31,493	[DEBUG]	
2020-12-20 04:08:32,469	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:08:33,459	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:08:34,519	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:08:35,568	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:08:36,628	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:08:39,926	[INFO]	161	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:08:39,928	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 04:08:40,882	[INFO]	162	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:08:40,883	[INFO]	163	SUCCESS	+2.0	
2020-12-20 04:08:40,884	[DEBUG]	
2020-12-20 04:08:55,944	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:08:58,905	[INFO]	165	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:08:58,905	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 04:08:59,775	[INFO]	166	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:08:59,776	[INFO]	167	SUCCESS	+2.0	
2020-12-20 04:08:59,776	[DEBUG]	
2020-12-20 04:09:00,673	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:09:01,616	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:09:02,602	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:09:05,974	[INFO]	171	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:09:05,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:09:06,969	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:09:07,955	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:09:07,956	[INFO]	174	SUCCESS	+2.0	
2020-12-20 04:09:07,956	[DEBUG]	
2020-12-20 04:09:08,964	[INFO]	175	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-20 04:09:09,996	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:09:10,990	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:09:12,040	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:09:13,077	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:09:14,133	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:09:15,122	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:09:16,182	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:09:17,218	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:09:18,240	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:09:19,244	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:09:20,254	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:09:20,256	[INFO]	187	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:09:20,256	[DEBUG]	
2020-12-20 04:09:20,257	[INFO]	188	SUCCESS	+2.0	
2020-12-20 04:09:20,257	[DEBUG]	
2020-12-20 04:09:21,268	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:09:22,278	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:09:23,253	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:09:24,256	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:09:27,651	[INFO]	193	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:09:27,653	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:09:27,655	[INFO]	194	SUCCESS	+2.0	
2020-12-20 04:09:27,655	[DEBUG]	
2020-12-20 04:09:28,641	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:09:29,673	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:09:30,689	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:09:31,773	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:09:32,817	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:09:33,843	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:09:34,880	[INFO]	201	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:09:35,898	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:09:39,283	[INFO]	203	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:09:39,284	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:09:42,649	[INFO]	204	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:09:42,650	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 52,57 ****
--- 53,59 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 04:09:45,936	[INFO]	205	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:09:45,937	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 04:09:45,938	[INFO]	206	SUCCESS	+2.0	
2020-12-20 04:09:45,938	[DEBUG]	
2020-12-20 04:09:46,969	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:09:48,070	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:09:51,406	[INFO]	209	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:09:52,398	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:10:07,458	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:10:08,362	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:10:09,259	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:10:10,192	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:10:11,140	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:10:12,070	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:10:15,310	[INFO]	217	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:10:15,311	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:10:16,299	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:10:16,300	[INFO]	219	SUCCESS	+2.0	
2020-12-20 04:10:16,300	[DEBUG]	
2020-12-20 04:10:17,324	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:10:18,353	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:10:21,768	[INFO]	222	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:10:21,768	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-20 04:10:21,769	[INFO]	223	SUCCESS	+2.0	
2020-12-20 04:10:21,769	[DEBUG]	
2020-12-20 04:10:22,754	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:10:26,099	[INFO]	225	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-20 04:10:26,099	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:10:26,100	[INFO]	226	SUCCESS	+2.0	
2020-12-20 04:10:26,101	[DEBUG]	
2020-12-20 04:10:27,157	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:10:28,212	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:10:29,197	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:10:30,200	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:10:31,214	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:10:34,539	[INFO]	232	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:10:35,639	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:10:36,705	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:10:40,143	[INFO]	235	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:10:41,155	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:10:42,181	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:10:45,549	[INFO]	238	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:10:45,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-20 04:10:45,550	[INFO]	239	SUCCESS	+2.0	
2020-12-20 04:10:45,551	[DEBUG]	
2020-12-20 04:10:46,533	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:10:49,917	[INFO]	241	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:10:49,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-20 04:10:49,919	[INFO]	242	SUCCESS	+2.0	
2020-12-20 04:10:49,919	[DEBUG]	
2020-12-20 04:10:50,917	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:10:54,267	[INFO]	244	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:10:54,268	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:10:55,215	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:10:55,218	[INFO]	246	SUCCESS	+2.0	
2020-12-20 04:10:55,219	[DEBUG]	
2020-12-20 04:10:56,233	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:10:59,624	[INFO]	248	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:10:59,625	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:11:00,660	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:11:01,672	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:11:01,675	[INFO]	251	SUCCESS	+2.0	
2020-12-20 04:11:01,675	[DEBUG]	
2020-12-20 04:11:02,696	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:11:03,720	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:11:04,759	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:11:05,814	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:11:06,854	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:11:07,871	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:11:08,918	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:11:09,936	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:11:10,988	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:11:14,411	[INFO]	261	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:11:14,412	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:11:17,672	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:11:17,673	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 52,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 04:11:17,674	[INFO]	263	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:11:17,675	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:11:17,676	[INFO]	264	SUCCESS	+2.0	
2020-12-20 04:11:17,676	[DEBUG]	
2020-12-20 04:11:20,978	[INFO]	265	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:11:20,979	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:11:20,980	[INFO]	266	SUCCESS	+2.0	
2020-12-20 04:11:20,980	[DEBUG]	
2020-12-20 04:11:21,978	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:11:23,054	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:11:24,119	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:11:25,184	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:11:26,185	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:11:29,628	[INFO]	272	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:11:29,629	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:11:29,630	[INFO]	273	SUCCESS	+2.0	
2020-12-20 04:11:29,630	[DEBUG]	
2020-12-20 04:11:30,601	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:11:31,632	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:11:32,639	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:11:33,654	[INFO]	277	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:11:34,754	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:11:35,759	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:11:36,764	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:11:37,770	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:11:38,815	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:11:39,888	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:11:43,519	[INFO]	284	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:11:43,520	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-20 04:11:43,521	[INFO]	285	SUCCESS	+2.0	
2020-12-20 04:11:43,522	[DEBUG]	
2020-12-20 04:11:46,881	[INFO]	286	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:11:46,883	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:11:46,884	[INFO]	287	SUCCESS	+2.0	
2020-12-20 04:11:46,884	[DEBUG]	
2020-12-20 04:11:50,268	[INFO]	288	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:11:50,269	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:11:51,567	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:11:52,946	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:11:53,987	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:11:53,988	[INFO]	292	SUCCESS	+2.0	
2020-12-20 04:11:53,989	[DEBUG]	
2020-12-20 04:11:55,006	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:11:56,005	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:11:57,036	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:11:58,071	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:11:59,078	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:12:00,108	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:12:01,104	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:12:02,210	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:12:03,240	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:12:04,265	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:12:07,565	[INFO]	303	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:12:07,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 04:12:07,567	[INFO]	304	SUCCESS	+2.0	
2020-12-20 04:12:07,567	[DEBUG]	
2020-12-20 04:12:08,576	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:12:09,590	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:12:10,666	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:12:25,725	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:12:28,875	[INFO]	309	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:12:28,875	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:12:29,752	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:12:29,753	[INFO]	311	SUCCESS	+2.0	
2020-12-20 04:12:29,753	[DEBUG]	
2020-12-20 04:12:32,812	[INFO]	312	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:12:32,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-20 04:12:36,107	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:12:36,109	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:12:37,123	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:12:40,511	[INFO]	315	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:12:40,512	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:12:41,552	[INFO]	316	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-20 04:12:42,558	[INFO]	317	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:12:43,557	[INFO]	318	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:12:46,923	[INFO]	319	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:12:46,924	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:12:47,873	[INFO]	320	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:12:47,874	[INFO]	321	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:12:47,874	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:12:47,875	[INFO]	322	SUCCESS	+2.0	
2020-12-20 04:12:47,875	[DEBUG]	
2020-12-20 04:12:51,278	[INFO]	323	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:12:51,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:12:52,274	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:12:52,275	[INFO]	325	SUCCESS	+2.0	
2020-12-20 04:12:52,275	[DEBUG]	
2020-12-20 04:12:53,324	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:12:54,385	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:12:55,394	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:12:58,703	[INFO]	329	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:13:01,970	[INFO]	330	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:13:01,971	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 04:13:01,973	[INFO]	331	SUCCESS	+2.0	
2020-12-20 04:13:01,973	[DEBUG]	
2020-12-20 04:13:02,981	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:13:04,014	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:13:07,544	[INFO]	334	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:13:07,545	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:13:08,515	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:13:09,552	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:13:09,553	[INFO]	337	SUCCESS	+2.0	
2020-12-20 04:13:09,553	[DEBUG]	
2020-12-20 04:13:10,594	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:13:11,622	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:13:15,005	[INFO]	340	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:13:15,006	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:13:15,007	[INFO]	341	SUCCESS	+2.0	
2020-12-20 04:13:15,007	[DEBUG]	
2020-12-20 04:13:15,963	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:13:16,946	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:13:17,947	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:13:21,301	[INFO]	345	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:13:21,302	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:13:21,303	[INFO]	346	SUCCESS	+2.0	
2020-12-20 04:13:21,303	[DEBUG]	
2020-12-20 04:13:24,670	[INFO]	347	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:13:24,671	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 04:13:25,676	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:13:25,678	[INFO]	349	SUCCESS	+2.0	
2020-12-20 04:13:25,678	[DEBUG]	
2020-12-20 04:13:26,677	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:13:30,069	[INFO]	351	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:13:30,070	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:31,083	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:13:32,136	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:13:32,140	[INFO]	354	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:13:32,141	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:32,144	[INFO]	355	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:13:32,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:32,148	[INFO]	356	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:13:32,150	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:33,189	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:13:34,238	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:13:35,291	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:13:36,224	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:13:36,228	[INFO]	361	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:13:36,229	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:37,267	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:13:38,334	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:13:39,313	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:13:40,340	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:13:43,654	[INFO]	366	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:13:43,655	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-20 04:13:44,576	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:13:44,578	[INFO]	368	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:13:44,579	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:45,581	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:13:45,583	[INFO]	370	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:13:45,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:45,585	[INFO]	371	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:13:45,585	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:45,586	[INFO]	372	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:13:45,587	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:45,588	[INFO]	373	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:13:45,588	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:13:45,589	[INFO]	374	SUCCESS	+2.0	
2020-12-20 04:13:45,589	[DEBUG]	
2020-12-20 04:13:46,598	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:13:50,077	[INFO]	376	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:13:50,078	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:13:50,078	[INFO]	377	SUCCESS	+2.0	
2020-12-20 04:13:50,079	[DEBUG]	
2020-12-20 04:13:51,061	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:13:52,073	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:13:53,080	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:13:54,103	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:13:55,121	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:13:56,156	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:13:57,195	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:13:58,190	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:13:59,203	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:14:00,234	[INFO]	387	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:14:01,250	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:14:02,268	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:14:05,622	[INFO]	390	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:14:06,648	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:14:09,959	[INFO]	392	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:14:09,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:14:09,961	[INFO]	393	SUCCESS	+2.0	
2020-12-20 04:14:09,961	[DEBUG]	
2020-12-20 04:14:10,986	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:14:10,989	[INFO]	395	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:14:10,990	[DEBUG]	
2020-12-20 04:14:11,936	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:14:12,951	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:14:12,954	[INFO]	398	SUCCESS	+2.0	
2020-12-20 04:14:12,955	[DEBUG]	
2020-12-20 04:14:13,981	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:14:14,995	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:14:16,032	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:14:17,037	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:14:18,034	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:14:21,364	[INFO]	404	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:14:21,364	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-20 04:14:22,365	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:14:22,366	[INFO]	406	SUCCESS	+2.0	
2020-12-20 04:14:22,367	[DEBUG]	
2020-12-20 04:14:23,394	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:14:26,694	[INFO]	408	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:14:26,695	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:14:26,696	[INFO]	409	SUCCESS	+2.0	
2020-12-20 04:14:26,696	[DEBUG]	
2020-12-20 04:14:27,692	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:14:28,680	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:14:29,711	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:14:30,667	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:14:31,689	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:14:35,122	[INFO]	415	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:14:36,107	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:14:37,124	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:14:38,152	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:14:41,515	[INFO]	419	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:14:41,516	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:14:42,412	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:14:43,422	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:14:44,559	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:14:44,561	[INFO]	423	SUCCESS	+2.0	
2020-12-20 04:14:44,562	[DEBUG]	
2020-12-20 04:14:45,585	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:14:46,594	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:14:47,665	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:14:48,698	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:14:49,715	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:14:50,729	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:14:51,726	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:14:52,744	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:14:53,788	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:14:57,152	[INFO]	433	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:14:57,153	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      continue;
                  }
  

2020-12-20 04:14:58,124	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:14:59,208	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:14:59,209	[INFO]	436	SUCCESS	+2.0	
2020-12-20 04:14:59,210	[DEBUG]	
2020-12-20 04:15:14,279	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:15:15,177	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:15:16,083	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:15:16,988	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:15:17,894	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:15:18,851	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:15:19,844	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:15:20,838	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:15:24,132	[INFO]	445	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:15:24,133	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-20 04:15:24,134	[INFO]	446	SUCCESS	+2.0	
2020-12-20 04:15:24,134	[DEBUG]	
2020-12-20 04:15:25,152	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:15:25,154	[INFO]	448	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:15:26,172	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:15:27,189	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:15:28,281	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:15:29,333	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:15:30,362	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:15:31,377	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:15:34,753	[INFO]	455	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:15:34,754	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:15:34,755	[INFO]	456	SUCCESS	+2.0	
2020-12-20 04:15:34,756	[DEBUG]	
2020-12-20 04:15:38,947	[INFO]	457	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:15:38,949	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-20 04:15:40,200	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:15:40,202	[INFO]	459	SUCCESS	+2.0	
2020-12-20 04:15:40,202	[DEBUG]	
2020-12-20 04:15:55,269	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:15:58,157	[INFO]	461	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:15:58,157	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-20 04:15:58,158	[INFO]	462	SUCCESS	+2.0	
2020-12-20 04:15:58,158	[DEBUG]	
2020-12-20 04:15:59,074	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:16:02,376	[INFO]	464	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:16:02,376	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Set<Node> visitedNodes = new HashSet<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 04:16:02,377	[INFO]	465	SUCCESS	+2.0	
2020-12-20 04:16:02,378	[DEBUG]	
2020-12-20 04:16:03,455	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:16:18,521	[INFO]	467	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:16:19,412	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:16:20,308	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:16:23,319	[INFO]	470	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:16:24,226	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:16:25,186	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:16:28,624	[INFO]	473	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:16:28,625	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 04:16:28,625	[INFO]	474	SUCCESS	+2.0	
2020-12-20 04:16:28,626	[DEBUG]	
2020-12-20 04:16:29,613	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:16:30,657	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:16:34,116	[INFO]	477	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:16:34,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:16:34,118	[INFO]	478	SUCCESS	+2.0	
2020-12-20 04:16:34,118	[DEBUG]	
2020-12-20 04:16:35,094	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:16:38,493	[INFO]	480	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:16:41,864	[INFO]	481	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:16:41,865	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-20 04:16:42,869	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:16:42,870	[INFO]	483	SUCCESS	+2.0	
2020-12-20 04:16:42,871	[DEBUG]	
2020-12-20 04:16:46,280	[INFO]	484	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:16:46,281	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:16:46,282	[INFO]	485	SUCCESS	+2.0	
2020-12-20 04:16:46,282	[DEBUG]	
2020-12-20 04:16:47,303	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:16:50,679	[INFO]	487	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:16:50,680	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:16:51,699	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:16:51,701	[INFO]	489	SUCCESS	+2.0	
2020-12-20 04:16:51,701	[DEBUG]	
2020-12-20 04:16:52,716	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:16:53,714	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:16:54,796	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:16:58,149	[INFO]	493	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:16:59,227	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:17:00,272	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:17:03,650	[INFO]	496	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:17:03,651	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:17:04,642	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:17:04,645	[INFO]	498	SUCCESS	+2.0	
2020-12-20 04:17:04,645	[DEBUG]	
2020-12-20 04:17:05,660	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:17:06,699	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:17:06,700	[INFO]	==== END ====
2020-12-20 04:17:06,700	[INFO]	Reason: step budget
2020-12-20 04:17:06,702	[INFO]	
2020-12-20 04:17:06,702	[INFO]	========== EPOCH 16 ==========
2020-12-20 04:17:06,703	[INFO]	==== WARMUP ====
2020-12-20 04:17:10,029	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:17:10,029	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:17:13,345	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:17:13,346	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:17:16,754	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:17:16,754	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:17:20,053	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 04:17:20,053	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:17:20,053	[INFO]	==== START ====
2020-12-20 04:17:21,105	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:17:22,140	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:17:23,163	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:17:24,189	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:17:25,194	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:17:26,281	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:17:27,359	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:17:30,748	[INFO]	8	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:17:30,750	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:17:31,806	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:17:31,809	[INFO]	10	SUCCESS	+2.0	
2020-12-20 04:17:31,809	[DEBUG]	
2020-12-20 04:17:32,839	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:17:33,874	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:17:34,842	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:17:35,882	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:17:39,343	[INFO]	15	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:17:39,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 04:17:39,345	[INFO]	16	SUCCESS	+2.0	
2020-12-20 04:17:39,345	[DEBUG]	
2020-12-20 04:17:40,314	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:17:41,305	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:17:42,318	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:17:43,325	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:17:44,343	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:17:44,345	[INFO]	22	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:17:44,345	[DEBUG]	
2020-12-20 04:17:44,346	[INFO]	23	SUCCESS	+2.0	
2020-12-20 04:17:44,346	[DEBUG]	
2020-12-20 04:17:45,360	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:17:46,386	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:17:47,448	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:17:48,483	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:17:49,449	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:17:52,828	[INFO]	29	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:17:52,829	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 04:17:52,830	[INFO]	30	SUCCESS	+2.0	
2020-12-20 04:17:52,830	[DEBUG]	
2020-12-20 04:17:53,802	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:17:54,800	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:17:58,163	[INFO]	33	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:17:58,164	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:17:59,161	[INFO]	34	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:18:00,206	[INFO]	35	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:18:03,648	[INFO]	36	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:18:03,649	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:18:03,650	[INFO]	37	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:18:03,650	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:18:03,651	[INFO]	38	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:18:03,651	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:18:06,993	[INFO]	39	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:18:06,994	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,18 ****
--- 13,42 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 51,57 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:18:06,995	[INFO]	40	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:18:06,996	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,18 ****
--- 13,42 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 51,57 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:18:06,997	[INFO]	41	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:18:06,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:18:06,998	[INFO]	42	SUCCESS	+2.0	
2020-12-20 04:18:06,998	[DEBUG]	
2020-12-20 04:18:10,466	[INFO]	43	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:18:10,469	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:18:10,472	[INFO]	44	SUCCESS	+2.0	
2020-12-20 04:18:10,473	[DEBUG]	
2020-12-20 04:18:11,398	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:18:12,437	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:18:13,543	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:18:14,569	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:18:15,510	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:18:16,553	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:18:17,591	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:18:18,592	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:18:21,990	[INFO]	53	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:18:22,963	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:18:23,993	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:18:25,000	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:18:26,047	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:18:27,121	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:18:28,152	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:18:29,179	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:18:32,508	[INFO]	61	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:18:32,509	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 04:18:32,510	[INFO]	62	SUCCESS	+2.0	
2020-12-20 04:18:32,510	[DEBUG]	
2020-12-20 04:18:33,531	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:18:34,647	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:18:38,101	[INFO]	65	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:18:38,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:18:39,156	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:18:40,182	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:18:41,214	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:18:44,617	[INFO]	69	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:18:44,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,57 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:18:44,619	[INFO]	70	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:18:44,619	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:18:45,642	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:18:49,014	[INFO]	72	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:18:49,015	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 44,49 ****
--- 46,52 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 04:18:50,091	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:18:51,111	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:18:54,496	[INFO]	75	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:18:54,498	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 44,51 ****
--- 46,55 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 04:18:57,845	[INFO]	76	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:18:57,846	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 46,51 ****
--- 48,54 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 04:18:58,908	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:18:58,912	[INFO]	78	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:18:58,913	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:18:58,914	[INFO]	79	SUCCESS	+2.0	
2020-12-20 04:18:58,915	[DEBUG]	
2020-12-20 04:18:59,956	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:19:03,343	[INFO]	81	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:19:03,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:19:04,317	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:19:05,306	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:19:05,308	[INFO]	84	SUCCESS	+2.0	
2020-12-20 04:19:05,308	[DEBUG]	
2020-12-20 04:19:08,733	[INFO]	85	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:19:09,724	[INFO]	86	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-20 04:19:10,764	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:19:11,768	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:19:12,775	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:19:13,885	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:19:14,908	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:19:15,930	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:19:16,942	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:19:20,235	[INFO]	94	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:19:20,236	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:19:21,260	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:19:22,314	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:19:23,376	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:19:23,378	[INFO]	98	SUCCESS	+2.0	
2020-12-20 04:19:23,379	[DEBUG]	
2020-12-20 04:19:38,445	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:19:39,345	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:19:40,219	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:19:41,113	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:19:42,023	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:19:42,941	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:19:46,278	[INFO]	105	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:19:46,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-20 04:19:49,569	[INFO]	106	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:19:49,570	[INFO]	107	SUCCESS	+2.0	
2020-12-20 04:19:49,570	[DEBUG]	
2020-12-20 04:19:50,588	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:19:51,639	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:19:54,973	[INFO]	110	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:19:54,974	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-20 04:19:54,975	[INFO]	111	SUCCESS	+2.0	
2020-12-20 04:19:54,975	[DEBUG]	
2020-12-20 04:19:54,976	[INFO]	112	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:19:54,976	[DEBUG]	
2020-12-20 04:19:58,324	[INFO]	113	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:19:58,325	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:19:59,349	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:20:00,342	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:20:01,401	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:20:02,447	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:20:05,712	[INFO]	118	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:20:05,713	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,43 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
          return Integer.MAX_VALUE;
      }
--- 34,44 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
+ 
+         Node node = getNodeWithMinDistance(unvisitedNodes);
  
          return Integer.MAX_VALUE;
      }

2020-12-20 04:20:09,088	[INFO]	119	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:20:09,089	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-20 04:20:09,089	[INFO]	120	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:20:09,090	[DEBUG]	
2020-12-20 04:20:10,049	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:20:11,067	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:20:11,070	[INFO]	123	SUCCESS	+2.0	
2020-12-20 04:20:11,070	[DEBUG]	
2020-12-20 04:20:12,123	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:20:13,143	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:20:16,487	[INFO]	126	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:20:16,488	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 04:20:16,489	[INFO]	127	SUCCESS	+2.0	
2020-12-20 04:20:16,489	[DEBUG]	
2020-12-20 04:20:19,735	[INFO]	128	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:20:23,013	[INFO]	129	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:20:23,014	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:20:23,015	[INFO]	130	SUCCESS	+2.0	
2020-12-20 04:20:23,016	[DEBUG]	
2020-12-20 04:20:24,012	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:20:25,016	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:20:26,022	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:20:29,403	[INFO]	134	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:20:29,404	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:20:44,472	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:20:44,474	[INFO]	136	SUCCESS	+2.0	
2020-12-20 04:20:44,474	[DEBUG]	
2020-12-20 04:20:44,476	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:20:45,406	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:20:45,407	[INFO]	139	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:20:45,408	[DEBUG]	
2020-12-20 04:20:46,293	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:20:46,294	[INFO]	141	SUCCESS	+2.0	
2020-12-20 04:20:46,294	[DEBUG]	
2020-12-20 04:20:47,253	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:20:50,341	[INFO]	143	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:20:50,342	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:20:50,344	[INFO]	144	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:20:50,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:20:51,379	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:20:51,381	[INFO]	146	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:20:51,382	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:20:51,383	[INFO]	147	SUCCESS	+2.0	
2020-12-20 04:20:51,383	[DEBUG]	
2020-12-20 04:20:52,471	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:20:53,481	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:20:56,856	[INFO]	150	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:21:00,193	[INFO]	151	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:21:00,194	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 04:21:00,195	[INFO]	152	SUCCESS	+2.0	
2020-12-20 04:21:00,195	[DEBUG]	
2020-12-20 04:21:01,181	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:21:02,229	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:21:03,269	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:21:04,300	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:21:07,671	[INFO]	157	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:21:07,672	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-20 04:21:08,667	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:21:09,620	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:21:10,694	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:21:10,695	[INFO]	161	SUCCESS	+2.0	
2020-12-20 04:21:10,696	[DEBUG]	
2020-12-20 04:21:11,734	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:21:12,764	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:21:16,454	[INFO]	164	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:21:16,456	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 04:21:17,479	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:21:18,464	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:21:18,465	[INFO]	167	SUCCESS	+2.0	
2020-12-20 04:21:18,465	[DEBUG]	
2020-12-20 04:21:21,882	[INFO]	168	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:21:21,883	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:21:21,884	[INFO]	169	SUCCESS	+2.0	
2020-12-20 04:21:21,884	[DEBUG]	
2020-12-20 04:21:22,883	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:21:23,901	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:21:24,914	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:21:25,976	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:21:26,979	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:21:30,308	[INFO]	175	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:21:30,310	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:21:31,344	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:21:32,332	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:21:35,749	[INFO]	178	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:21:35,750	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:21:36,819	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:21:40,182	[INFO]	180	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:21:40,183	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:21:41,206	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:21:42,250	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:21:42,251	[INFO]	183	SUCCESS	+2.0	
2020-12-20 04:21:42,251	[DEBUG]	
2020-12-20 04:21:43,300	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:21:44,317	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:21:45,326	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:21:46,349	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:21:47,426	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:21:48,473	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:21:49,507	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:21:50,561	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:21:51,562	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:21:52,597	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:21:53,596	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:21:54,623	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:21:55,653	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:21:59,074	[INFO]	197	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:21:59,075	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:02,350	[INFO]	198	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:22:02,351	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  
***************
*** 52,57 ****
--- 53,59 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:02,352	[INFO]	199	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:22:02,353	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  
***************
*** 52,57 ****
--- 53,59 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:02,354	[INFO]	200	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:22:02,354	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:02,355	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:22:02,356	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:03,335	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:22:06,703	[INFO]	203	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:22:06,705	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,57 ****
--- 47,59 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:06,707	[INFO]	204	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:22:06,708	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:10,034	[INFO]	205	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:22:10,035	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
***************
*** 52,57 ****
--- 53,59 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:10,036	[INFO]	206	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:22:10,037	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:10,038	[INFO]	207	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:22:10,038	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:11,077	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:22:12,104	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:22:15,495	[INFO]	210	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:22:15,496	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 52,57 ****
--- 55,61 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:15,497	[INFO]	211	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:22:15,498	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:16,489	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:22:17,516	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:22:20,864	[INFO]	214	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:22:20,866	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 52,57 ****
--- 53,59 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:21,878	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:22:21,879	[INFO]	216	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:22:21,880	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:21,881	[INFO]	217	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:22:21,881	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:22:21,882	[INFO]	218	SUCCESS	+2.0	
2020-12-20 04:22:21,882	[DEBUG]	
2020-12-20 04:22:22,928	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:22:23,938	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:22:24,964	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:22:25,990	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:22:27,025	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:22:28,239	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:22:29,294	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:22:30,348	[INFO]	226	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:22:31,410	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:22:32,412	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:22:35,774	[INFO]	229	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:22:35,775	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:22:36,723	[INFO]	230	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:22:36,724	[INFO]	231	SUCCESS	+2.0	
2020-12-20 04:22:36,724	[DEBUG]	
2020-12-20 04:22:37,744	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:22:38,724	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:22:42,023	[INFO]	234	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:22:42,024	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-20 04:22:42,024	[INFO]	235	SUCCESS	+2.0	
2020-12-20 04:22:42,025	[DEBUG]	
2020-12-20 04:22:45,393	[INFO]	236	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:22:45,394	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-20 04:22:45,395	[INFO]	237	SUCCESS	+2.0	
2020-12-20 04:22:45,395	[DEBUG]	
2020-12-20 04:22:46,382	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:22:47,420	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:22:50,780	[INFO]	240	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:22:51,779	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:22:52,758	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:22:53,838	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:22:57,157	[INFO]	244	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:22:57,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:22:57,160	[INFO]	245	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-20 04:22:57,160	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:22:57,161	[INFO]	246	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:22:57,161	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:23:00,615	[INFO]	247	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:23:00,616	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:23:00,617	[INFO]	248	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:23:00,617	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:23:01,575	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:23:01,576	[INFO]	250	SUCCESS	+2.0	
2020-12-20 04:23:01,577	[DEBUG]	
2020-12-20 04:23:02,585	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:23:03,603	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:23:04,623	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:23:05,658	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:23:06,673	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:23:07,678	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:23:11,120	[INFO]	257	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:23:11,120	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-20 04:23:12,070	[INFO]	258	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:23:12,071	[INFO]	259	SUCCESS	+2.0	
2020-12-20 04:23:12,071	[DEBUG]	
2020-12-20 04:23:13,080	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:23:14,089	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:23:15,100	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:23:18,575	[INFO]	263	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:23:18,575	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      continue;
                  }
  

2020-12-20 04:23:21,841	[INFO]	264	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:23:22,861	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:23:23,874	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:23:24,878	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:23:25,935	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:23:25,936	[INFO]	269	SUCCESS	+2.0	
2020-12-20 04:23:25,936	[DEBUG]	
2020-12-20 04:23:26,965	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:23:28,000	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:23:29,019	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:23:30,055	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:23:33,498	[INFO]	274	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:23:33,500	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:23:33,501	[INFO]	275	SUCCESS	+2.0	
2020-12-20 04:23:33,501	[DEBUG]	
2020-12-20 04:23:34,506	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:23:35,558	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:23:36,577	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:23:37,607	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:23:38,658	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:23:41,959	[INFO]	281	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:23:41,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:23:45,247	[INFO]	282	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:23:46,237	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:23:47,311	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:23:48,332	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:23:51,606	[INFO]	286	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:23:51,607	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:23:51,608	[INFO]	287	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:23:51,609	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:23:54,945	[INFO]	288	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:23:54,946	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         Node minNode = null;
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 29,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:23:55,960	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:23:55,965	[INFO]	290	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:23:55,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         Node minNode = null;
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 29,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:23:59,300	[INFO]	291	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:23:59,301	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 04:24:00,286	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:24:00,288	[INFO]	293	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:24:00,288	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 04:24:00,289	[INFO]	294	SUCCESS	+2.0	
2020-12-20 04:24:00,289	[DEBUG]	
2020-12-20 04:24:03,617	[INFO]	295	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:24:03,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:24:03,619	[INFO]	296	SUCCESS	+2.0	
2020-12-20 04:24:03,619	[DEBUG]	
2020-12-20 04:24:06,987	[INFO]	297	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:24:06,988	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:24:07,923	[INFO]	298	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:24:07,924	[INFO]	299	SUCCESS	+2.0	
2020-12-20 04:24:07,924	[DEBUG]	
2020-12-20 04:24:08,922	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:24:09,949	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:24:10,967	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:24:11,972	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:24:15,404	[INFO]	304	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-20 04:24:16,400	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:24:17,396	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:24:18,409	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:24:19,421	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:24:20,456	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:24:21,437	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:24:22,465	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:24:23,481	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:24:24,476	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:24:25,505	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:24:26,521	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:24:29,923	[INFO]	316	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:24:29,924	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 04:24:30,962	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:24:30,964	[INFO]	318	SUCCESS	+2.0	
2020-12-20 04:24:30,964	[DEBUG]	
2020-12-20 04:24:31,965	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:24:32,982	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:24:34,036	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:24:35,075	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:24:36,107	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:24:37,136	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:24:38,170	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:24:39,201	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:24:42,583	[INFO]	327	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:24:42,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-20 04:24:42,585	[INFO]	328	SUCCESS	+2.0	
2020-12-20 04:24:42,585	[DEBUG]	
2020-12-20 04:24:43,594	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:24:44,579	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:24:47,930	[INFO]	331	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:24:47,931	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 04:24:47,932	[INFO]	332	SUCCESS	+2.0	
2020-12-20 04:24:47,932	[DEBUG]	
2020-12-20 04:24:48,954	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:24:52,299	[INFO]	334	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:24:52,300	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 04:24:53,229	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:24:53,230	[INFO]	336	SUCCESS	+2.0	
2020-12-20 04:24:53,231	[DEBUG]	
2020-12-20 04:24:54,254	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:24:57,622	[INFO]	338	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:24:58,602	[INFO]	339	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:25:02,096	[INFO]	340	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:25:02,097	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:25:02,098	[INFO]	341	SUCCESS	+2.0	
2020-12-20 04:25:02,098	[DEBUG]	
2020-12-20 04:25:03,066	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:25:04,093	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:25:05,132	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:25:06,178	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:25:07,271	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:25:08,313	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:25:09,380	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:25:10,399	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:25:11,422	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:25:12,432	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:25:13,482	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:25:13,486	[INFO]	353	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:25:13,488	[DEBUG]	
2020-12-20 04:25:14,482	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:25:14,483	[INFO]	355	SUCCESS	+2.0	
2020-12-20 04:25:14,483	[DEBUG]	
2020-12-20 04:25:15,483	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:25:16,493	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:25:19,864	[INFO]	358	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:25:19,865	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:25:23,140	[INFO]	359	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:25:23,141	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,43 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
!         }
  
          return Integer.MAX_VALUE;
      }
--- 25,34 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
!         }
  
!         Node node = getNodeWithMinDistance(unvisitedNodes);
  
          return Integer.MAX_VALUE;
      }

2020-12-20 04:25:26,408	[INFO]	360	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:25:26,409	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:25:26,410	[INFO]	361	SUCCESS	+2.0	
2020-12-20 04:25:26,410	[DEBUG]	
2020-12-20 04:25:29,796	[INFO]	362	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:25:29,797	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:25:33,186	[INFO]	363	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:25:33,187	[INFO]	364	SUCCESS	+2.0	
2020-12-20 04:25:33,188	[DEBUG]	
2020-12-20 04:25:34,216	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:25:35,356	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:25:36,717	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:25:37,947	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:25:42,175	[INFO]	369	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:25:42,177	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:25:42,178	[INFO]	370	SUCCESS	+2.0	
2020-12-20 04:25:42,179	[DEBUG]	
2020-12-20 04:25:43,369	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:25:44,656	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:25:45,726	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:25:47,050	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:25:48,322	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:25:49,369	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:25:52,729	[INFO]	377	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:25:52,730	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:25:53,775	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:25:54,773	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:25:54,774	[INFO]	380	SUCCESS	+2.0	
2020-12-20 04:25:54,775	[DEBUG]	
2020-12-20 04:25:55,820	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:25:59,250	[INFO]	382	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:25:59,251	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 04:25:59,251	[INFO]	383	SUCCESS	+2.0	
2020-12-20 04:25:59,252	[DEBUG]	
2020-12-20 04:26:00,242	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:26:01,256	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:26:02,281	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:26:03,309	[INFO]	387	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 04:26:04,344	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:26:05,366	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:26:08,710	[INFO]	390	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:26:08,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 04:26:08,712	[INFO]	391	SUCCESS	+2.0	
2020-12-20 04:26:08,712	[DEBUG]	
2020-12-20 04:26:09,720	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:26:10,761	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:26:14,211	[INFO]	394	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:26:14,212	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:26:14,213	[INFO]	395	SUCCESS	+2.0	
2020-12-20 04:26:14,213	[DEBUG]	
2020-12-20 04:26:17,558	[INFO]	396	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:26:18,429	[INFO]	397	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:26:33,504	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:26:34,416	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:26:37,419	[INFO]	400	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:26:37,420	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:26:37,421	[INFO]	401	SUCCESS	+2.0	
2020-12-20 04:26:37,421	[DEBUG]	
2020-12-20 04:26:38,421	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:26:39,436	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:26:39,439	[INFO]	404	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:26:39,440	[DEBUG]	
2020-12-20 04:26:40,470	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:26:40,471	[INFO]	406	SUCCESS	+2.0	
2020-12-20 04:26:40,471	[DEBUG]	
2020-12-20 04:26:43,963	[INFO]	407	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:26:43,964	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:26:44,902	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:26:44,904	[INFO]	409	SUCCESS	+2.0	
2020-12-20 04:26:44,905	[DEBUG]	
2020-12-20 04:26:45,938	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:26:46,964	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:26:47,949	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:26:48,983	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:26:50,016	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:26:50,978	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:26:52,056	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:26:53,058	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:26:54,074	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:26:57,457	[INFO]	419	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:26:57,458	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:26:57,461	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:26:57,462	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:26:57,463	[INFO]	421	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:26:57,464	[DEBUG]	
2020-12-20 04:26:58,487	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:26:58,489	[INFO]	423	SUCCESS	+2.0	
2020-12-20 04:26:58,490	[DEBUG]	
2020-12-20 04:26:59,466	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:27:00,535	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:27:01,576	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:27:02,601	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:27:03,594	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:27:04,638	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:27:05,669	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:27:06,703	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:27:07,716	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:27:08,716	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:27:09,786	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:27:13,263	[INFO]	435	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:27:13,263	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:27:13,264	[INFO]	436	SUCCESS	+2.0	
2020-12-20 04:27:13,265	[DEBUG]	
2020-12-20 04:27:14,248	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:27:15,291	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:27:16,314	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:27:17,363	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:27:18,396	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:27:19,398	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:27:22,711	[INFO]	443	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:27:23,750	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:27:24,807	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:27:28,169	[INFO]	446	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:27:28,170	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:27:29,172	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:27:30,182	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:27:33,593	[INFO]	449	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:27:33,594	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:27:33,595	[INFO]	450	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:27:33,596	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:27:33,597	[INFO]	451	SUCCESS	+2.0	
2020-12-20 04:27:33,597	[DEBUG]	
2020-12-20 04:27:36,974	[INFO]	452	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:27:36,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:27:36,976	[INFO]	453	SUCCESS	+2.0	
2020-12-20 04:27:36,977	[DEBUG]	
2020-12-20 04:27:37,980	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:27:38,972	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:27:39,987	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:27:41,020	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:27:42,051	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:27:43,056	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:27:44,067	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:27:45,088	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:27:48,580	[INFO]	462	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-20 04:27:48,581	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:27:49,570	[INFO]	463	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:27:50,576	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:27:50,579	[INFO]	465	SUCCESS	+2.0	
2020-12-20 04:27:50,580	[DEBUG]	
2020-12-20 04:27:51,596	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:27:52,603	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:27:53,632	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:27:54,628	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:27:55,716	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:27:56,745	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:27:57,740	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:27:58,676	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:28:13,747	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:28:14,646	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:28:15,564	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:28:16,528	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:28:17,435	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:28:18,361	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:28:21,674	[INFO]	480	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:28:21,675	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:28:21,675	[INFO]	481	SUCCESS	+2.0	
2020-12-20 04:28:21,676	[DEBUG]	
2020-12-20 04:28:25,027	[INFO]	482	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:28:25,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:28:26,084	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:28:26,087	[INFO]	484	SUCCESS	+2.0	
2020-12-20 04:28:26,088	[DEBUG]	
2020-12-20 04:28:27,109	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:28:28,127	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:28:29,149	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:28:30,142	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:28:33,554	[INFO]	489	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:28:33,555	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-20 04:28:33,556	[INFO]	490	SUCCESS	+2.0	
2020-12-20 04:28:33,556	[DEBUG]	
2020-12-20 04:28:37,029	[INFO]	491	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:28:37,030	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 04:28:37,031	[INFO]	492	SUCCESS	+2.0	
2020-12-20 04:28:37,031	[DEBUG]	
2020-12-20 04:28:38,017	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:28:39,030	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:28:40,030	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:28:41,043	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:28:42,078	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:28:43,117	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:28:44,271	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:28:45,270	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:28:45,270	[INFO]	==== END ====
2020-12-20 04:28:45,270	[INFO]	Reason: step budget
2020-12-20 04:28:45,271	[INFO]	
2020-12-20 04:28:45,271	[INFO]	========== EPOCH 17 ==========
2020-12-20 04:28:45,272	[INFO]	==== WARMUP ====
2020-12-20 04:28:48,686	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:28:48,686	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:28:52,052	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:28:52,052	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:28:55,460	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:28:55,461	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:28:58,806	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 04:28:58,807	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:28:58,807	[INFO]	==== START ====
2020-12-20 04:28:59,778	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:29:03,198	[INFO]	2	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:29:03,199	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:29:04,245	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:29:04,246	[INFO]	4	SUCCESS	+2.0	
2020-12-20 04:29:04,247	[DEBUG]	
2020-12-20 04:29:07,610	[INFO]	5	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:29:07,611	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:29:07,612	[INFO]	6	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:29:07,613	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:29:08,620	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:29:09,642	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:29:10,713	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:29:11,740	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:29:11,742	[INFO]	11	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:29:11,743	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:29:12,825	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:29:13,855	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:29:14,924	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:29:14,928	[INFO]	15	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:29:14,930	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:29:15,966	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:29:17,018	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:29:17,021	[INFO]	18	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:29:17,022	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:29:17,024	[INFO]	19	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:29:17,025	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:29:17,026	[INFO]	20	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:29:17,027	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:29:17,028	[INFO]	21	SUCCESS	+2.0	
2020-12-20 04:29:17,028	[DEBUG]	
2020-12-20 04:29:18,061	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:29:19,081	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:29:20,078	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:29:21,092	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:29:22,112	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:29:23,222	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:29:24,233	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:29:25,254	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:29:26,285	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:29:29,592	[INFO]	31	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:29:29,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:29:30,589	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:29:30,590	[INFO]	33	SUCCESS	+2.0	
2020-12-20 04:29:30,590	[DEBUG]	
2020-12-20 04:29:31,619	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:29:32,631	[INFO]	35	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:29:33,661	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:29:34,726	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:29:38,064	[INFO]	38	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:29:38,065	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-20 04:29:38,066	[INFO]	39	SUCCESS	+2.0	
2020-12-20 04:29:38,066	[DEBUG]	
2020-12-20 04:29:39,071	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:29:42,457	[INFO]	41	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:29:42,458	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,40 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 04:29:43,492	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:29:43,493	[INFO]	43	SUCCESS	+2.0	
2020-12-20 04:29:43,493	[DEBUG]	
2020-12-20 04:29:44,510	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:29:47,915	[INFO]	45	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:29:47,916	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:29:47,917	[INFO]	46	SUCCESS	+2.0	
2020-12-20 04:29:47,917	[DEBUG]	
2020-12-20 04:29:48,918	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:29:49,986	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:29:51,014	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:29:52,017	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:29:53,009	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:29:54,063	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:29:57,329	[INFO]	53	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:29:58,333	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:29:59,362	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:30:00,401	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:30:01,400	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:30:02,429	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:30:03,473	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:30:18,533	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:30:19,419	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:30:34,488	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:30:35,540	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:30:36,422	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:30:37,364	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:30:38,299	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:30:39,203	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:30:40,205	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:30:41,209	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:30:44,597	[INFO]	70	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 04:30:44,598	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:30:44,599	[INFO]	71	SUCCESS	+2.0	
2020-12-20 04:30:44,600	[DEBUG]	
2020-12-20 04:30:45,601	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:30:46,539	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:30:47,612	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:30:48,651	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:30:49,702	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:30:50,734	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:30:54,213	[INFO]	78	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:30:54,214	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 04:30:54,215	[INFO]	79	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:30:54,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 04:30:57,501	[INFO]	80	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:30:57,503	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 27,32 ****
--- 28,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     visitedNodes.add(node);
                      continue;
                  }
  

2020-12-20 04:30:58,482	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:31:01,808	[INFO]	82	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:31:01,809	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:31:02,819	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:31:03,815	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:31:03,817	[INFO]	85	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:31:03,817	[DEBUG]	
2020-12-20 04:31:04,876	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:31:04,877	[INFO]	87	SUCCESS	+2.0	
2020-12-20 04:31:04,878	[DEBUG]	
2020-12-20 04:31:05,887	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:31:06,952	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:31:07,974	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:31:11,333	[INFO]	91	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:31:12,340	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:31:13,363	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:31:14,381	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:31:17,661	[INFO]	95	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:31:18,682	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:31:19,690	[INFO]	97	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 04:31:20,711	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:31:21,724	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:31:22,743	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:31:26,057	[INFO]	101	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:31:26,058	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 04:31:27,063	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:31:28,114	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:31:28,117	[INFO]	104	SUCCESS	+2.0	
2020-12-20 04:31:28,118	[DEBUG]	
2020-12-20 04:31:29,129	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:31:29,131	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:31:30,148	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:31:31,173	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:31:32,177	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:31:33,207	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:31:34,273	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:31:35,290	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:31:36,306	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:31:37,326	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:31:40,793	[INFO]	115	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:31:40,794	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 04:31:44,182	[INFO]	116	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:31:44,184	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:31:47,534	[INFO]	117	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:31:47,535	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 27,37 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 28,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:31:50,983	[INFO]	118	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:31:50,985	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 28,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:31:51,946	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:31:52,962	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:31:52,965	[INFO]	121	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:31:52,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 04:31:52,967	[INFO]	122	SUCCESS	+2.0	
2020-12-20 04:31:52,968	[DEBUG]	
2020-12-20 04:31:53,984	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:31:55,052	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:31:58,408	[INFO]	125	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:31:58,409	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 04:31:59,433	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:31:59,436	[INFO]	127	SUCCESS	+2.0	
2020-12-20 04:31:59,437	[DEBUG]	
2020-12-20 04:32:00,475	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:32:01,476	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:32:02,481	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:32:03,529	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:32:04,561	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:32:05,582	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:32:08,953	[INFO]	134	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:32:08,955	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:32:24,047	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:32:24,048	[INFO]	136	SUCCESS	+2.0	
2020-12-20 04:32:24,048	[DEBUG]	
2020-12-20 04:32:24,968	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:32:27,987	[INFO]	138	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:32:27,988	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:32:28,891	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:32:29,837	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:32:30,787	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:32:31,845	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:32:31,847	[INFO]	143	SUCCESS	+2.0	
2020-12-20 04:32:31,847	[DEBUG]	
2020-12-20 04:32:32,889	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:32:32,892	[INFO]	145	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:32:32,893	[DEBUG]	
2020-12-20 04:32:33,948	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:32:33,949	[INFO]	147	SUCCESS	+2.0	
2020-12-20 04:32:33,949	[DEBUG]	
2020-12-20 04:32:35,003	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:32:36,088	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:32:37,105	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:32:40,453	[INFO]	151	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:32:40,454	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:32:41,448	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:32:41,449	[INFO]	153	SUCCESS	+2.0	
2020-12-20 04:32:41,449	[DEBUG]	
2020-12-20 04:32:42,522	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:32:43,636	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:32:44,688	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:32:45,713	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:32:46,712	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:32:47,755	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:32:51,111	[INFO]	160	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:32:51,112	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 04:32:52,133	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:32:52,135	[INFO]	162	SUCCESS	+2.0	
2020-12-20 04:32:52,136	[DEBUG]	
2020-12-20 04:32:53,195	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:32:54,191	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:32:55,202	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:32:58,654	[INFO]	166	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:32:58,655	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:32:58,656	[INFO]	167	SUCCESS	+2.0	
2020-12-20 04:32:58,656	[DEBUG]	
2020-12-20 04:32:59,654	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:33:00,683	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:33:01,739	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:33:05,108	[INFO]	171	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:33:05,109	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:33:06,125	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:33:06,129	[INFO]	173	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:33:06,130	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:33:09,501	[INFO]	174	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:33:09,504	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:33:09,506	[INFO]	175	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:33:09,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:33:09,510	[INFO]	176	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:33:09,511	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:33:10,534	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:33:10,536	[INFO]	178	SUCCESS	+2.0	
2020-12-20 04:33:10,537	[DEBUG]	
2020-12-20 04:33:13,906	[INFO]	179	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:33:13,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:33:14,898	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:33:14,899	[INFO]	181	SUCCESS	+2.0	
2020-12-20 04:33:14,899	[DEBUG]	
2020-12-20 04:33:15,899	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:33:16,887	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:33:20,296	[INFO]	184	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:33:20,297	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:33:20,297	[INFO]	185	SUCCESS	+2.0	
2020-12-20 04:33:20,298	[DEBUG]	
2020-12-20 04:33:23,660	[INFO]	186	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:33:23,661	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:33:24,646	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:33:24,649	[INFO]	188	SUCCESS	+2.0	
2020-12-20 04:33:24,650	[DEBUG]	
2020-12-20 04:33:25,637	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:33:26,615	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:33:27,671	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:33:28,698	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:33:29,696	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:33:30,729	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:33:31,797	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:33:35,163	[INFO]	196	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:33:35,164	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:33:36,239	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:33:37,228	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:33:37,229	[INFO]	199	SUCCESS	+2.0	
2020-12-20 04:33:37,229	[DEBUG]	
2020-12-20 04:33:38,253	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:33:39,279	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:33:42,585	[INFO]	202	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:33:42,587	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:33:42,589	[INFO]	203	SUCCESS	+2.0	
2020-12-20 04:33:42,590	[DEBUG]	
2020-12-20 04:33:43,618	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:33:44,622	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:33:45,623	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:33:46,638	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:33:47,711	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:33:48,772	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:33:49,790	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:33:50,810	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:33:51,878	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:33:52,882	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:33:56,345	[INFO]	214	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:33:56,346	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:33:57,290	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:33:57,292	[INFO]	216	SUCCESS	+2.0	
2020-12-20 04:33:57,292	[DEBUG]	
2020-12-20 04:33:58,282	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:33:59,286	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:34:00,288	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:34:01,343	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:34:04,679	[INFO]	221	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:34:04,680	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-20 04:34:05,700	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:34:06,706	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:34:06,707	[INFO]	224	SUCCESS	+2.0	
2020-12-20 04:34:06,707	[DEBUG]	
2020-12-20 04:34:07,741	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:34:08,749	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:34:12,024	[INFO]	227	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:34:12,025	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:34:12,026	[INFO]	228	SUCCESS	+2.0	
2020-12-20 04:34:12,027	[DEBUG]	
2020-12-20 04:34:13,001	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:34:14,022	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:34:17,337	[INFO]	231	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:34:17,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 04:34:18,619	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:34:21,835	[INFO]	233	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:34:21,836	[INFO]	234	SUCCESS	+2.0	
2020-12-20 04:34:21,836	[DEBUG]	
2020-12-20 04:34:22,860	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:34:37,945	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:34:40,858	[INFO]	237	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:34:40,859	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-20 04:34:40,860	[INFO]	238	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:34:40,860	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-20 04:34:43,888	[INFO]	239	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:34:43,888	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-20 04:34:43,889	[INFO]	240	SUCCESS	+2.0	
2020-12-20 04:34:43,889	[DEBUG]	
2020-12-20 04:34:44,823	[INFO]	241	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:34:44,824	[INFO]	242	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-20 04:34:44,825	[DEBUG]	
2020-12-20 04:34:44,825	[INFO]	243	SUCCESS	+2.0	
2020-12-20 04:34:44,825	[DEBUG]	
2020-12-20 04:34:45,820	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:34:46,873	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:34:47,942	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:34:51,332	[INFO]	247	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:34:51,333	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:34:51,334	[INFO]	248	SUCCESS	+2.0	
2020-12-20 04:34:51,334	[DEBUG]	
2020-12-20 04:34:52,342	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:34:53,372	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:34:54,329	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:34:55,354	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:34:56,388	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:35:11,472	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:35:12,394	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:35:15,349	[INFO]	256	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:35:15,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:35:16,235	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:35:16,236	[INFO]	258	SUCCESS	+2.0	
2020-12-20 04:35:16,237	[DEBUG]	
2020-12-20 04:35:17,159	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:35:18,150	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:35:19,154	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:35:20,149	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:35:21,093	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:35:22,141	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:35:23,156	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:35:24,229	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:35:27,601	[INFO]	267	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:35:27,602	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:35:28,572	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:35:28,574	[INFO]	269	SUCCESS	+2.0	
2020-12-20 04:35:28,575	[DEBUG]	
2020-12-20 04:35:29,558	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:35:32,905	[INFO]	271	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:35:32,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:35:32,907	[INFO]	272	SUCCESS	+2.0	
2020-12-20 04:35:32,907	[DEBUG]	
2020-12-20 04:35:36,842	[INFO]	273	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:35:36,843	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 04:35:38,040	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:35:38,041	[INFO]	275	SUCCESS	+2.0	
2020-12-20 04:35:38,042	[DEBUG]	
2020-12-20 04:35:39,321	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:35:54,400	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:35:55,338	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:35:56,273	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:35:57,164	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:35:58,119	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:35:59,052	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:35:59,994	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:36:01,030	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:36:02,018	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:36:03,067	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:36:04,121	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:36:05,117	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:36:06,139	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:36:09,569	[INFO]	290	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:36:12,861	[INFO]	291	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:36:12,862	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:36:13,878	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:36:14,905	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:36:15,926	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:36:16,931	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:36:16,932	[INFO]	296	SUCCESS	+2.0	
2020-12-20 04:36:16,933	[DEBUG]	
2020-12-20 04:36:20,272	[INFO]	297	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:36:20,273	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:20,274	[INFO]	298	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:36:20,275	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:20,276	[INFO]	299	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:36:20,277	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:20,278	[INFO]	300	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:36:20,278	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:21,281	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:36:21,282	[INFO]	302	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:36:21,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:21,284	[INFO]	303	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:36:21,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:22,287	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:36:23,240	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:36:24,343	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:36:24,348	[INFO]	307	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:36:24,349	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:24,352	[INFO]	308	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:36:24,354	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:24,357	[INFO]	309	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:36:24,360	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:24,363	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:36:24,365	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:25,366	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:36:25,369	[INFO]	312	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:36:25,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:25,372	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:36:25,373	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:25,375	[INFO]	314	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:36:25,376	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:25,378	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:36:25,379	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:26,378	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:36:26,380	[INFO]	317	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:36:26,381	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:26,382	[INFO]	318	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:36:26,382	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:26,383	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:36:27,402	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:36:27,405	[INFO]	321	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:36:27,406	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:36:27,407	[INFO]	322	SUCCESS	+2.0	
2020-12-20 04:36:27,407	[DEBUG]	
2020-12-20 04:36:28,434	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:36:29,471	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:36:30,498	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:36:31,494	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:36:34,887	[INFO]	327	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:36:34,888	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-20 04:36:34,889	[INFO]	328	SUCCESS	+2.0	
2020-12-20 04:36:34,889	[DEBUG]	
2020-12-20 04:36:35,848	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:36:36,841	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:36:37,865	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:36:38,907	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:36:39,966	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:36:43,420	[INFO]	334	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:36:43,421	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-20 04:36:46,744	[INFO]	335	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:36:47,770	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:36:48,795	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:36:49,861	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:36:50,909	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:36:51,916	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:36:52,929	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:36:52,930	[INFO]	342	SUCCESS	+2.0	
2020-12-20 04:36:52,930	[DEBUG]	
2020-12-20 04:36:54,008	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:36:54,962	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:36:55,952	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:36:56,966	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:36:57,967	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:36:58,991	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:37:00,032	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:37:01,035	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:37:02,123	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:37:03,142	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:37:04,171	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:37:05,150	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:37:08,470	[INFO]	355	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:37:08,471	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:37:08,472	[INFO]	356	SUCCESS	+2.0	
2020-12-20 04:37:08,472	[DEBUG]	
2020-12-20 04:37:09,485	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:37:10,506	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:37:11,457	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:37:12,523	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:37:13,577	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:37:14,607	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:37:15,652	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:37:19,065	[INFO]	364	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:37:19,067	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:37:19,067	[INFO]	365	SUCCESS	+2.0	
2020-12-20 04:37:19,068	[DEBUG]	
2020-12-20 04:37:20,069	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:37:21,106	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:37:22,143	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:37:23,177	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:37:24,167	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:37:25,166	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:37:26,192	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:37:26,195	[INFO]	373	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:37:26,196	[DEBUG]	
2020-12-20 04:37:26,198	[INFO]	374	SUCCESS	+2.0	
2020-12-20 04:37:26,198	[DEBUG]	
2020-12-20 04:37:27,224	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:37:42,291	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:37:45,402	[INFO]	377	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:37:48,338	[INFO]	378	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:37:51,591	[INFO]	379	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:37:54,971	[INFO]	380	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:37:54,972	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:37:54,973	[INFO]	381	SUCCESS	+2.0	
2020-12-20 04:37:54,973	[DEBUG]	
2020-12-20 04:37:55,958	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:37:57,009	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:37:58,046	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:37:59,076	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:38:00,105	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:38:03,472	[INFO]	387	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:38:03,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:38:03,474	[INFO]	388	SUCCESS	+2.0	
2020-12-20 04:38:03,474	[DEBUG]	
2020-12-20 04:38:04,469	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:38:05,476	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:38:08,849	[INFO]	391	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:38:08,849	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-20 04:38:08,850	[INFO]	392	SUCCESS	+2.0	
2020-12-20 04:38:08,851	[DEBUG]	
2020-12-20 04:38:09,868	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:38:10,899	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:38:11,932	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:38:12,945	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:38:16,272	[INFO]	397	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:38:16,273	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-20 04:38:16,274	[INFO]	398	SUCCESS	+2.0	
2020-12-20 04:38:16,274	[DEBUG]	
2020-12-20 04:38:17,267	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:38:17,269	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:38:18,303	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:38:19,352	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:38:20,359	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:38:21,309	[INFO]	404	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:38:22,330	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:38:37,389	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:38:38,330	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:38:39,190	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:38:42,085	[INFO]	409	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:38:42,087	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 04:38:42,089	[INFO]	410	SUCCESS	+2.0	
2020-12-20 04:38:42,089	[DEBUG]	
2020-12-20 04:38:43,058	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:38:46,337	[INFO]	412	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:38:46,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:38:47,361	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:38:47,362	[INFO]	414	SUCCESS	+2.0	
2020-12-20 04:38:47,362	[DEBUG]	
2020-12-20 04:38:48,418	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:38:51,793	[INFO]	416	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:38:51,794	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 04:38:51,795	[INFO]	417	SUCCESS	+2.0	
2020-12-20 04:38:51,795	[DEBUG]	
2020-12-20 04:38:55,164	[INFO]	418	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:38:55,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:38:56,073	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:38:56,076	[INFO]	420	SUCCESS	+2.0	
2020-12-20 04:38:56,076	[DEBUG]	
2020-12-20 04:38:57,113	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:38:58,139	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:38:59,174	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:39:02,517	[INFO]	424	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-20 04:39:02,518	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:39:02,519	[INFO]	425	SUCCESS	+2.0	
2020-12-20 04:39:02,519	[DEBUG]	
2020-12-20 04:39:03,526	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:39:04,568	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:39:05,569	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:39:08,974	[INFO]	429	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:39:08,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:39:09,957	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:39:25,042	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:39:25,965	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:39:26,865	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:39:27,771	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:39:27,772	[INFO]	435	SUCCESS	+2.0	
2020-12-20 04:39:27,773	[DEBUG]	
2020-12-20 04:39:30,805	[INFO]	436	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:39:30,807	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:39:31,801	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:39:31,804	[INFO]	438	SUCCESS	+2.0	
2020-12-20 04:39:31,804	[DEBUG]	
2020-12-20 04:39:32,863	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:39:32,867	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:39:33,902	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:39:34,920	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:39:35,945	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:39:36,979	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:39:36,981	[INFO]	445	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:39:36,981	[DEBUG]	
2020-12-20 04:39:36,982	[INFO]	446	SUCCESS	+2.0	
2020-12-20 04:39:36,982	[DEBUG]	
2020-12-20 04:39:38,013	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:39:41,374	[INFO]	448	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:39:41,375	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 04:39:44,773	[INFO]	449	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:39:44,774	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  
***************
*** 47,52 ****
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 04:39:48,131	[INFO]	450	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:39:48,132	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-20 04:39:49,141	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:39:52,462	[INFO]	452	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:39:52,463	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 27,32 ****
--- 29,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-20 04:39:55,908	[INFO]	453	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:39:55,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:39:59,173	[INFO]	454	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:39:59,174	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:39:59,176	[INFO]	455	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:39:59,177	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:39:59,178	[INFO]	456	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:39:59,179	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:02,582	[INFO]	457	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:02,584	[INFO]	458	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:40:02,585	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:02,586	[INFO]	459	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:40:02,587	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:05,952	[INFO]	460	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:40:05,954	[INFO]	461	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:40:05,955	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:05,956	[INFO]	462	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:40:05,957	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:05,959	[INFO]	463	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:40:05,960	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:06,973	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:40:06,978	[INFO]	465	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:40:06,980	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:07,977	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:40:07,979	[INFO]	467	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:40:07,980	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:07,981	[INFO]	468	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:40:07,982	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:08,988	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:40:08,990	[INFO]	470	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:40:08,991	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:08,993	[INFO]	471	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:40:08,994	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:08,995	[INFO]	472	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:08,996	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:10,028	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:40:10,030	[INFO]	474	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:10,030	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:10,032	[INFO]	475	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:10,032	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:10,033	[INFO]	476	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:10,034	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:10,035	[INFO]	477	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:10,036	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:11,063	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:40:11,065	[INFO]	479	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:11,065	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:12,059	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:12,062	[INFO]	481	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:40:12,062	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:12,063	[INFO]	482	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:12,064	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:12,065	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:40:13,072	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:40:14,140	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:40:15,160	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:40:15,164	[INFO]	487	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:40:15,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:40:16,201	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:40:16,204	[INFO]	489	SUCCESS	+2.0	
2020-12-20 04:40:16,205	[DEBUG]	
2020-12-20 04:40:17,213	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:40:18,225	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:40:19,256	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:40:20,278	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:40:21,326	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:40:22,313	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:40:22,314	[INFO]	496	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:40:22,314	[DEBUG]	
2020-12-20 04:40:23,385	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:40:26,736	[INFO]	498	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:40:26,737	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 04:40:27,736	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:40:28,756	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:40:28,757	[INFO]	==== END ====
2020-12-20 04:40:28,757	[INFO]	Reason: step budget
2020-12-20 04:40:28,758	[INFO]	
2020-12-20 04:40:28,758	[INFO]	========== EPOCH 18 ==========
2020-12-20 04:40:28,758	[INFO]	==== WARMUP ====
2020-12-20 04:40:32,120	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:40:32,120	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:40:35,658	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:40:35,658	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:40:39,068	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:40:39,068	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:40:42,474	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 04:40:42,475	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:40:42,475	[INFO]	==== START ====
2020-12-20 04:40:45,763	[INFO]	1	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:40:45,764	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 04:40:45,765	[INFO]	2	SUCCESS	+2.0	
2020-12-20 04:40:45,765	[DEBUG]	
2020-12-20 04:40:46,686	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:40:47,726	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:40:48,771	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:41:03,832	[INFO]	6	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:41:04,703	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:41:07,708	[INFO]	8	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:41:07,708	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:41:08,630	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:41:11,713	[INFO]	10	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:41:11,715	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 31,36 ****
--- 33,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:41:11,716	[INFO]	11	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:41:11,716	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:41:12,731	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:41:13,765	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:41:13,767	[INFO]	14	SUCCESS	+2.0	
2020-12-20 04:41:13,768	[DEBUG]	
2020-12-20 04:41:17,094	[INFO]	15	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:41:20,422	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:41:20,423	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:41:20,424	[INFO]	17	SUCCESS	+2.0	
2020-12-20 04:41:20,425	[DEBUG]	
2020-12-20 04:41:21,377	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:41:21,379	[INFO]	19	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:41:21,379	[DEBUG]	
2020-12-20 04:41:21,380	[INFO]	20	SUCCESS	+2.0	
2020-12-20 04:41:21,380	[DEBUG]	
2020-12-20 04:41:22,404	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:41:23,433	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:41:24,448	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:41:27,822	[INFO]	24	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:41:27,823	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:41:31,177	[INFO]	25	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:41:34,669	[INFO]	26	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:41:34,670	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:41:34,671	[INFO]	27	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:41:34,672	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:41:35,624	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:41:35,626	[INFO]	29	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:41:35,627	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:41:38,958	[INFO]	30	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:41:42,587	[INFO]	31	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:41:46,076	[INFO]	32	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:41:46,078	[INFO]	33	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:41:46,078	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:41:46,079	[INFO]	34	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:41:46,080	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:41:47,135	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:41:50,585	[INFO]	36	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:41:50,586	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,41 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:41:51,471	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:41:52,458	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:41:52,461	[INFO]	39	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:41:52,462	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:41:52,463	[INFO]	40	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:41:52,463	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:41:52,464	[INFO]	41	SUCCESS	+2.0	
2020-12-20 04:41:52,464	[DEBUG]	
2020-12-20 04:41:53,467	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:41:54,498	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:41:55,503	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:41:56,518	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:41:59,918	[INFO]	46	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:41:59,919	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:42:00,902	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:42:01,909	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:42:01,910	[INFO]	49	SUCCESS	+2.0	
2020-12-20 04:42:01,910	[DEBUG]	
2020-12-20 04:42:02,930	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:42:06,181	[INFO]	51	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:42:07,185	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:42:08,216	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:42:09,220	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:42:10,203	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:42:13,606	[INFO]	56	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:42:14,598	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:42:17,991	[INFO]	58	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:42:18,979	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:42:20,014	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:42:21,049	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:42:24,363	[INFO]	62	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:42:25,388	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:42:26,374	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:42:27,413	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:42:28,482	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:42:29,510	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:42:33,021	[INFO]	68	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:42:33,022	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 04:42:34,057	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:42:34,059	[INFO]	70	SUCCESS	+2.0	
2020-12-20 04:42:34,059	[DEBUG]	
2020-12-20 04:42:35,083	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:42:36,119	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:42:37,123	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:42:40,524	[INFO]	74	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:42:40,525	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:42:40,525	[INFO]	75	SUCCESS	+2.0	
2020-12-20 04:42:40,526	[DEBUG]	
2020-12-20 04:42:41,481	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:42:42,477	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:42:43,506	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:42:44,519	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:42:45,541	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:42:46,566	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:42:49,894	[INFO]	82	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:42:49,895	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 04:42:49,896	[INFO]	83	SUCCESS	+2.0	
2020-12-20 04:42:49,896	[DEBUG]	
2020-12-20 04:42:50,888	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:42:51,919	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:42:55,323	[INFO]	86	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:42:55,324	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:42:55,325	[INFO]	87	SUCCESS	+2.0	
2020-12-20 04:42:55,325	[DEBUG]	
2020-12-20 04:43:10,385	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:43:10,386	[INFO]	89	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:43:10,386	[DEBUG]	
2020-12-20 04:43:10,387	[INFO]	90	SUCCESS	+2.0	
2020-12-20 04:43:10,387	[DEBUG]	
2020-12-20 04:43:11,303	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:43:12,158	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:43:13,056	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:43:16,235	[INFO]	94	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:43:16,235	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-20 04:43:16,236	[INFO]	95	SUCCESS	+2.0	
2020-12-20 04:43:16,236	[DEBUG]	
2020-12-20 04:43:19,382	[INFO]	96	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:43:19,384	[INFO]	97	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:43:19,384	[DEBUG]	
2020-12-20 04:43:19,385	[INFO]	98	SUCCESS	+2.0	
2020-12-20 04:43:19,385	[DEBUG]	
2020-12-20 04:43:22,899	[INFO]	99	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:43:23,890	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:43:24,888	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:43:25,951	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:43:29,424	[INFO]	103	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:43:29,425	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:43:29,426	[INFO]	104	SUCCESS	+2.0	
2020-12-20 04:43:29,426	[DEBUG]	
2020-12-20 04:43:29,427	[INFO]	105	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:43:29,427	[DEBUG]	
2020-12-20 04:43:30,421	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:43:33,826	[INFO]	107	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:43:33,827	[INFO]	108	SUCCESS	+2.0	
2020-12-20 04:43:33,828	[DEBUG]	
2020-12-20 04:43:34,842	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:43:34,845	[INFO]	110	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:43:34,845	[DEBUG]	
2020-12-20 04:43:34,847	[INFO]	111	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:43:34,848	[DEBUG]	
2020-12-20 04:43:34,850	[INFO]	112	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:43:34,851	[DEBUG]	
2020-12-20 04:43:34,853	[INFO]	113	SUCCESS	+2.0	
2020-12-20 04:43:34,853	[DEBUG]	
2020-12-20 04:43:35,862	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:43:36,887	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:43:37,898	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:43:38,935	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:43:39,932	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:43:40,951	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:43:44,410	[INFO]	120	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:43:44,411	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-20 04:43:44,412	[INFO]	121	SUCCESS	+2.0	
2020-12-20 04:43:44,413	[DEBUG]	
2020-12-20 04:43:45,380	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:43:46,381	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:43:49,775	[INFO]	124	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:43:49,776	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:43:49,776	[INFO]	125	SUCCESS	+2.0	
2020-12-20 04:43:49,777	[DEBUG]	
2020-12-20 04:43:50,785	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:43:51,815	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:43:55,179	[INFO]	128	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:43:55,180	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:43:56,156	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:43:57,162	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:43:58,203	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:43:58,204	[INFO]	132	SUCCESS	+2.0	
2020-12-20 04:43:58,205	[DEBUG]	
2020-12-20 04:43:59,254	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:44:00,272	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:44:01,304	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:44:02,368	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:44:03,305	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:44:04,290	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:44:05,277	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:44:06,298	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:44:07,302	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:44:10,635	[INFO]	142	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:44:10,636	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
              }
          }
  

2020-12-20 04:44:11,623	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:44:11,625	[INFO]	144	SUCCESS	+2.0	
2020-12-20 04:44:11,626	[DEBUG]	
2020-12-20 04:44:12,593	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:44:13,620	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:44:16,888	[INFO]	147	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:44:16,889	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:44:16,890	[INFO]	148	SUCCESS	+2.0	
2020-12-20 04:44:16,890	[DEBUG]	
2020-12-20 04:44:20,142	[INFO]	149	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:44:20,144	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-20 04:44:21,166	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:44:21,169	[INFO]	151	SUCCESS	+2.0	
2020-12-20 04:44:21,169	[DEBUG]	
2020-12-20 04:44:24,525	[INFO]	152	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:44:24,526	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 04:44:25,539	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:44:25,540	[INFO]	154	SUCCESS	+2.0	
2020-12-20 04:44:25,540	[DEBUG]	
2020-12-20 04:44:26,552	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:44:27,554	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:44:28,587	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:44:29,586	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:44:32,997	[INFO]	159	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:44:32,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:44:32,998	[INFO]	160	SUCCESS	+2.0	
2020-12-20 04:44:32,999	[DEBUG]	
2020-12-20 04:44:34,009	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:44:35,025	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:44:36,012	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-20 04:44:37,044	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:44:38,011	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:44:41,425	[INFO]	166	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:44:41,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:44:41,429	[INFO]	167	SUCCESS	+2.0	
2020-12-20 04:44:41,429	[DEBUG]	
2020-12-20 04:44:42,456	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:44:43,443	[INFO]	169	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:44:46,725	[INFO]	170	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-20 04:44:46,725	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:44:47,738	[INFO]	171	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:44:47,739	[INFO]	172	SUCCESS	+2.0	
2020-12-20 04:44:47,740	[DEBUG]	
2020-12-20 04:44:48,730	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:44:49,806	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:44:50,774	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:44:51,771	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:44:52,728	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:44:53,760	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:44:54,760	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:44:58,109	[INFO]	180	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:44:58,110	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:44:59,140	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:45:00,161	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:45:00,164	[INFO]	183	SUCCESS	+2.0	
2020-12-20 04:45:00,164	[DEBUG]	
2020-12-20 04:45:01,186	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:45:02,258	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:45:03,296	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:45:04,371	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:45:07,690	[INFO]	188	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:45:07,691	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:45:08,672	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:45:08,675	[INFO]	190	SUCCESS	+2.0	
2020-12-20 04:45:08,676	[DEBUG]	
2020-12-20 04:45:09,718	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:45:13,057	[INFO]	192	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:45:13,058	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:45:14,063	[INFO]	193	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:45:14,066	[INFO]	194	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:45:14,067	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:45:14,068	[INFO]	195	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:45:14,069	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:45:15,115	[INFO]	196	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:45:15,116	[INFO]	197	SUCCESS	+2.0	
2020-12-20 04:45:15,116	[DEBUG]	
2020-12-20 04:45:18,453	[INFO]	198	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:45:18,454	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 04:45:18,455	[INFO]	199	SUCCESS	+2.0	
2020-12-20 04:45:18,455	[DEBUG]	
2020-12-20 04:45:19,409	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:45:20,435	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:45:21,460	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:45:36,529	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:45:37,416	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:45:41,267	[INFO]	205	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:45:41,268	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:45:41,269	[INFO]	206	SUCCESS	+2.0	
2020-12-20 04:45:41,269	[DEBUG]	
2020-12-20 04:45:45,268	[INFO]	207	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-20 04:45:45,270	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:45:46,334	[INFO]	208	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:45:47,442	[INFO]	209	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:45:47,443	[INFO]	210	SUCCESS	+2.0	
2020-12-20 04:45:47,443	[DEBUG]	
2020-12-20 04:46:02,525	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:46:03,432	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:46:04,371	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:46:07,370	[INFO]	214	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:46:07,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:46:08,371	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:46:11,638	[INFO]	216	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:46:11,639	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:46:15,055	[INFO]	217	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:46:15,056	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 04:46:15,057	[INFO]	218	SUCCESS	+2.0	
2020-12-20 04:46:15,058	[DEBUG]	
2020-12-20 04:46:18,337	[INFO]	219	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:46:18,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:46:18,339	[INFO]	220	SUCCESS	+2.0	
2020-12-20 04:46:18,339	[DEBUG]	
2020-12-20 04:46:21,778	[INFO]	221	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:46:21,779	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:46:22,740	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:46:23,785	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:46:23,790	[INFO]	224	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-20 04:46:23,791	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:46:24,896	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:46:24,898	[INFO]	226	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:46:24,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:46:25,987	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:46:25,989	[INFO]	228	SUCCESS	+2.0	
2020-12-20 04:46:25,990	[DEBUG]	
2020-12-20 04:46:26,966	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:46:27,966	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:46:28,966	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:46:29,976	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:46:31,010	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:46:32,031	[INFO]	234	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:46:33,038	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:46:34,118	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:46:35,155	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:46:36,171	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:46:37,145	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:46:38,206	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:46:41,617	[INFO]	241	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:46:42,656	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:46:43,692	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:46:44,735	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:46:45,735	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:46:46,715	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:46:47,757	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:46:48,782	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:46:52,206	[INFO]	249	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:46:52,207	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:46:52,208	[INFO]	250	SUCCESS	+2.0	
2020-12-20 04:46:52,208	[DEBUG]	
2020-12-20 04:46:53,185	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:47:08,262	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:47:09,197	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:47:10,115	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:47:11,030	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:47:26,100	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:47:29,333	[INFO]	257	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:47:29,333	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:47:29,334	[INFO]	258	SUCCESS	+2.0	
2020-12-20 04:47:29,334	[DEBUG]	
2020-12-20 04:47:32,481	[INFO]	259	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:47:32,482	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:47:32,483	[INFO]	260	SUCCESS	+2.0	
2020-12-20 04:47:32,483	[DEBUG]	
2020-12-20 04:47:33,500	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:47:37,650	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:47:37,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 04:47:38,915	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:47:40,009	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:47:41,019	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:47:41,021	[INFO]	266	SUCCESS	+2.0	
2020-12-20 04:47:41,022	[DEBUG]	
2020-12-20 04:47:42,034	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:47:43,064	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:47:44,058	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:47:45,066	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:47:46,141	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:47:47,514	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:48:02,603	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:48:05,546	[INFO]	274	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:48:06,468	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:48:07,416	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:48:08,338	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:48:09,364	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:48:10,396	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:48:11,438	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:48:12,481	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:48:13,475	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:48:14,542	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:48:17,877	[INFO]	284	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:48:17,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:48:17,879	[INFO]	285	SUCCESS	+2.0	
2020-12-20 04:48:17,879	[DEBUG]	
2020-12-20 04:48:18,892	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:48:22,288	[INFO]	287	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:48:22,289	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:48:22,290	[INFO]	288	SUCCESS	+2.0	
2020-12-20 04:48:22,290	[DEBUG]	
2020-12-20 04:48:23,299	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:48:24,287	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:48:27,655	[INFO]	291	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:48:27,656	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-20 04:48:27,656	[INFO]	292	SUCCESS	+2.0	
2020-12-20 04:48:27,657	[DEBUG]	
2020-12-20 04:48:31,009	[INFO]	293	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:48:31,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 04:48:31,983	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:48:31,986	[INFO]	295	SUCCESS	+2.0	
2020-12-20 04:48:31,987	[DEBUG]	
2020-12-20 04:48:32,989	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:48:34,053	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:48:35,098	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:48:36,112	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:48:37,173	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:48:38,213	[INFO]	301	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:48:39,297	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:48:40,278	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:48:41,270	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:48:42,305	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:48:43,356	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:48:44,375	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:48:45,416	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:48:46,447	[INFO]	309	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:48:47,530	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:48:50,911	[INFO]	311	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:48:50,912	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 04:48:54,076	[INFO]	312	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:48:54,077	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-20 04:48:57,382	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:48:57,383	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 04:48:58,298	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:49:01,593	[INFO]	315	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:49:01,594	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  
***************
*** 45,50 ****
--- 44,50 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 04:49:04,893	[INFO]	316	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:49:04,894	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-20 04:49:04,894	[INFO]	317	SUCCESS	+2.0	
2020-12-20 04:49:04,895	[DEBUG]	
2020-12-20 04:49:08,209	[INFO]	318	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:49:08,210	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:49:08,211	[INFO]	319	SUCCESS	+2.0	
2020-12-20 04:49:08,211	[DEBUG]	
2020-12-20 04:49:09,241	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:49:12,666	[INFO]	321	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:49:13,545	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:49:14,590	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:49:15,634	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:49:16,609	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:49:17,650	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:49:18,674	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 04:49:19,676	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:49:20,704	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:49:21,739	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:49:24,998	[INFO]	331	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:49:25,996	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:49:27,007	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:49:28,047	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:49:43,137	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:49:44,049	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:49:44,946	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:49:45,859	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:49:46,775	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:49:47,788	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:49:48,775	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:49:49,873	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-20 04:49:50,900	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:49:51,922	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:49:51,925	[INFO]	345	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:49:52,953	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:49:53,959	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:49:54,984	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:49:56,008	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:49:57,037	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:50:00,411	[INFO]	351	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:50:00,413	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:50:01,446	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:50:02,476	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:50:02,477	[INFO]	354	SUCCESS	+2.0	
2020-12-20 04:50:02,478	[DEBUG]	
2020-12-20 04:50:03,513	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:50:04,492	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:50:05,493	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:50:06,559	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:50:07,570	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:50:08,581	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:50:09,638	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:50:10,649	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:50:10,653	[INFO]	363	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:50:10,654	[DEBUG]	
2020-12-20 04:50:10,656	[INFO]	364	SUCCESS	+2.0	
2020-12-20 04:50:10,656	[DEBUG]	
2020-12-20 04:50:11,672	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:50:12,708	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:50:13,724	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:50:14,775	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:50:15,786	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:50:16,789	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:50:17,829	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:50:18,852	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:50:19,847	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:50:23,309	[INFO]	374	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:50:23,311	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-20 04:50:24,308	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:50:24,310	[INFO]	376	SUCCESS	+2.0	
2020-12-20 04:50:24,311	[DEBUG]	
2020-12-20 04:50:25,291	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:50:26,300	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:50:27,340	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:50:28,353	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:50:29,372	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:50:30,391	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:50:33,793	[INFO]	383	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:50:33,794	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:50:34,834	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:50:38,573	[INFO]	385	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:50:39,569	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:50:39,572	[INFO]	387	SUCCESS	+2.0	
2020-12-20 04:50:39,572	[DEBUG]	
2020-12-20 04:50:40,607	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:50:41,648	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:50:42,708	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:50:46,107	[INFO]	391	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:50:46,108	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-20 04:50:47,082	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:50:47,085	[INFO]	393	SUCCESS	+2.0	
2020-12-20 04:50:47,086	[DEBUG]	
2020-12-20 04:50:48,152	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:50:51,567	[INFO]	395	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:50:51,568	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-20 04:50:51,568	[INFO]	396	SUCCESS	+2.0	
2020-12-20 04:50:51,569	[DEBUG]	
2020-12-20 04:50:54,931	[INFO]	397	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:50:54,933	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:50:54,935	[INFO]	398	SUCCESS	+2.0	
2020-12-20 04:50:54,936	[DEBUG]	
2020-12-20 04:50:55,926	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:50:56,949	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:50:57,962	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:50:59,026	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:51:00,060	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:51:03,440	[INFO]	404	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:51:04,434	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:51:05,474	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:51:08,880	[INFO]	407	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:51:08,881	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:51:09,872	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:51:10,923	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:51:10,924	[INFO]	410	SUCCESS	+2.0	
2020-12-20 04:51:10,924	[DEBUG]	
2020-12-20 04:51:11,946	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:51:12,950	[INFO]	412	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:51:13,979	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:51:15,000	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:51:16,020	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:51:17,057	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:51:20,482	[INFO]	417	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:51:20,483	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:51:20,484	[INFO]	418	SUCCESS	+2.0	
2020-12-20 04:51:20,484	[DEBUG]	
2020-12-20 04:51:21,429	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:51:22,454	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:51:23,490	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:51:26,936	[INFO]	422	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:51:26,937	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:51:26,938	[INFO]	423	SUCCESS	+2.0	
2020-12-20 04:51:26,938	[DEBUG]	
2020-12-20 04:51:30,256	[INFO]	424	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:51:30,257	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 04:51:30,258	[INFO]	425	SUCCESS	+2.0	
2020-12-20 04:51:30,258	[DEBUG]	
2020-12-20 04:51:31,190	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:51:32,199	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:51:33,233	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:51:34,267	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:51:35,298	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:51:36,337	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:51:37,320	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:51:38,371	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:51:39,422	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:51:42,882	[INFO]	435	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-20 04:51:43,931	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:51:44,936	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:51:45,963	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:51:46,999	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:51:50,390	[INFO]	440	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:51:50,391	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:51:50,391	[INFO]	441	SUCCESS	+2.0	
2020-12-20 04:51:50,392	[DEBUG]	
2020-12-20 04:51:51,397	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:51:52,421	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:51:53,445	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:51:53,447	[INFO]	445	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:51:53,448	[DEBUG]	
2020-12-20 04:51:53,448	[INFO]	446	SUCCESS	+2.0	
2020-12-20 04:51:53,449	[DEBUG]	
2020-12-20 04:51:56,857	[INFO]	447	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:51:56,858	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:52:00,161	[INFO]	448	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:52:01,156	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:52:02,144	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:52:03,143	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:52:03,145	[INFO]	452	SUCCESS	+2.0	
2020-12-20 04:52:03,145	[DEBUG]	
2020-12-20 04:52:04,173	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:52:05,182	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:52:06,208	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:52:09,562	[INFO]	456	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:52:09,563	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 04:52:09,564	[INFO]	457	SUCCESS	+2.0	
2020-12-20 04:52:09,565	[DEBUG]	
2020-12-20 04:52:10,554	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:52:11,596	[INFO]	459	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-20 04:52:12,619	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 04:52:13,618	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:52:14,672	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:52:15,715	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:52:16,752	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:52:17,808	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:52:21,224	[INFO]	466	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:52:21,225	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:52:21,226	[INFO]	467	SUCCESS	+2.0	
2020-12-20 04:52:21,226	[DEBUG]	
2020-12-20 04:52:22,225	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:52:25,623	[INFO]	469	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:52:25,624	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 04:52:26,651	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:52:26,655	[INFO]	471	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:52:26,656	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 04:52:26,658	[INFO]	472	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:52:26,659	[DEBUG]	
2020-12-20 04:52:26,660	[INFO]	473	SUCCESS	+2.0	
2020-12-20 04:52:26,661	[DEBUG]	
2020-12-20 04:52:30,042	[INFO]	474	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-20 04:52:30,042	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 04:52:31,021	[INFO]	475	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:52:32,074	[INFO]	476	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:52:33,132	[INFO]	477	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:52:33,134	[INFO]	478	SUCCESS	+2.0	
2020-12-20 04:52:33,134	[DEBUG]	
2020-12-20 04:52:34,182	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:52:35,221	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:52:36,222	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:52:36,224	[INFO]	482	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:52:36,224	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-20 04:52:37,248	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 04:52:37,251	[INFO]	484	SUCCESS	+2.0	
2020-12-20 04:52:37,252	[DEBUG]	
2020-12-20 04:52:38,297	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:52:39,346	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:52:40,361	[INFO]	487	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:52:41,401	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:52:42,381	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:52:43,380	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:52:44,402	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:52:45,424	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:52:46,458	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:52:47,485	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:52:50,903	[INFO]	495	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:52:50,904	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:52:51,943	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:52:55,335	[INFO]	497	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:52:55,336	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,43 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             Node minNode = null;
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 04:52:58,642	[INFO]	498	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:52:58,643	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 04:52:59,690	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:53:00,739	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:53:00,740	[INFO]	==== END ====
2020-12-20 04:53:00,740	[INFO]	Reason: step budget
2020-12-20 04:53:00,741	[INFO]	
2020-12-20 04:53:00,742	[INFO]	========== EPOCH 19 ==========
2020-12-20 04:53:00,742	[INFO]	==== WARMUP ====
2020-12-20 04:53:04,122	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:53:04,122	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:53:07,477	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:53:07,478	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:53:10,821	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 04:53:10,821	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:53:14,195	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 04:53:14,196	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 04:53:14,196	[INFO]	==== START ====
2020-12-20 04:53:15,155	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:53:16,212	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:53:17,209	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:53:20,586	[INFO]	4	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:53:20,587	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 04:53:21,595	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:53:22,611	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:53:23,680	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:53:24,735	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:53:25,776	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:53:26,792	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:53:27,810	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:53:28,831	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:53:29,851	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:53:30,897	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:53:30,898	[INFO]	15	SUCCESS	+2.0	
2020-12-20 04:53:30,898	[DEBUG]	
2020-12-20 04:53:31,913	[INFO]	16	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:53:32,936	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:53:34,000	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:53:35,079	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:53:38,479	[INFO]	20	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:53:38,480	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:53:41,734	[INFO]	21	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:53:41,736	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-20 04:53:41,737	[INFO]	22	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:53:41,737	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:53:41,738	[INFO]	23	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:53:41,739	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 04:53:41,739	[INFO]	24	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:53:41,740	[DEBUG]	
2020-12-20 04:53:41,740	[INFO]	25	SUCCESS	+2.0	
2020-12-20 04:53:41,741	[DEBUG]	
2020-12-20 04:53:42,746	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:53:43,780	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:53:44,766	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:53:45,796	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:53:46,834	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:53:47,920	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:53:48,946	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:53:50,058	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:53:53,405	[INFO]	34	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:53:53,406	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-20 04:53:53,407	[INFO]	35	SUCCESS	+2.0	
2020-12-20 04:53:53,408	[DEBUG]	
2020-12-20 04:53:54,409	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:53:57,741	[INFO]	37	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:53:58,785	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 04:53:59,802	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:54:00,833	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:54:01,837	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:54:02,859	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:54:03,868	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:54:04,884	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:54:05,946	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:54:09,196	[INFO]	46	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:54:09,197	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-20 04:54:09,198	[INFO]	47	SUCCESS	+2.0	
2020-12-20 04:54:09,198	[DEBUG]	
2020-12-20 04:54:10,179	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:54:11,208	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:54:12,246	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:54:13,183	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 04:54:14,215	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:54:17,565	[INFO]	53	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:54:17,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:54:18,543	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:54:18,544	[INFO]	55	SUCCESS	+2.0	
2020-12-20 04:54:18,544	[DEBUG]	
2020-12-20 04:54:21,939	[INFO]	56	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:54:21,940	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 04:54:21,941	[INFO]	57	SUCCESS	+2.0	
2020-12-20 04:54:21,941	[DEBUG]	
2020-12-20 04:54:22,929	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:54:23,936	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:54:24,927	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:54:28,405	[INFO]	61	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:54:28,406	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:54:28,407	[INFO]	62	SUCCESS	+2.0	
2020-12-20 04:54:28,407	[DEBUG]	
2020-12-20 04:54:31,721	[INFO]	63	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:54:31,722	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-20 04:54:32,731	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:54:33,787	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:54:33,789	[INFO]	66	SUCCESS	+2.0	
2020-12-20 04:54:33,789	[DEBUG]	
2020-12-20 04:54:34,809	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:54:38,151	[INFO]	68	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:54:39,163	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:54:40,214	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:54:41,229	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:54:42,263	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:54:43,257	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:54:44,273	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:54:45,271	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:54:46,279	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:54:47,319	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:54:48,363	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:54:49,383	[INFO]	79	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-20 04:54:50,376	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:54:51,385	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:54:54,795	[INFO]	82	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:54:54,796	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 04:54:54,798	[INFO]	83	SUCCESS	+2.0	
2020-12-20 04:54:54,798	[DEBUG]	
2020-12-20 04:54:54,799	[INFO]	84	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:54:54,800	[DEBUG]	
2020-12-20 04:54:54,801	[INFO]	85	SUCCESS	+2.0	
2020-12-20 04:54:54,801	[DEBUG]	
2020-12-20 04:54:55,824	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:54:56,836	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:54:57,869	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:54:58,876	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:54:58,877	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:54:59,889	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:55:03,208	[INFO]	92	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:55:03,208	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 04:55:04,179	[INFO]	93	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:55:07,416	[INFO]	94	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:55:07,418	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,38 ----
                      continue;
                  }
  
!                 return distance;
  
!                 
              }
          }
  

2020-12-20 04:55:08,370	[INFO]	95	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:55:09,398	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:55:10,347	[INFO]	97	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:55:11,405	[INFO]	98	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:55:12,361	[INFO]	99	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:55:13,368	[INFO]	100	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:55:14,320	[INFO]	101	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:55:14,322	[INFO]	102	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:55:14,323	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,38 ----
                      continue;
                  }
  
!                 return distance;
  
!                 
              }
          }
  

2020-12-20 04:55:17,633	[INFO]	103	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:55:17,634	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,38 ----
                      continue;
                  }
  
!                 return distance;
  
!                 
              }
          }
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 45,51 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 04:55:18,574	[INFO]	104	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:55:18,576	[INFO]	105	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:55:18,576	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,38 ----
                      continue;
                  }
  
!                 return distance;
  
!                 
              }
          }
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 45,51 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 04:55:19,498	[INFO]	106	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:55:20,439	[INFO]	107	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:55:20,440	[INFO]	108	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:55:20,441	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,38 ----
                      continue;
                  }
  
!                 return distance;
  
!                 
              }
          }
  

2020-12-20 04:55:21,395	[INFO]	109	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:55:22,375	[INFO]	110	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:55:25,639	[INFO]	111	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 04:55:25,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,39 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  
!                 return distance;
  
!                 
              }
          }
  

2020-12-20 04:55:25,645	[INFO]	112	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:55:25,646	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,39 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  
!                 return distance;
  
!                 
              }
          }
  

2020-12-20 04:55:26,737	[INFO]	113	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:55:30,037	[INFO]	114	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:55:30,039	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,41 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
!                 return distance;
  
!                 
              }
          }
  

2020-12-20 04:55:33,368	[INFO]	115	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:55:33,369	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 37,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 04:55:34,331	[INFO]	116	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:55:34,333	[INFO]	117	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:55:34,334	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 04:55:35,468	[INFO]	118	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:55:36,761	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:55:37,953	[INFO]	120	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:55:39,118	[INFO]	121	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:55:40,314	[INFO]	122	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:55:41,260	[INFO]	123	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:55:42,226	[INFO]	124	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:55:42,227	[INFO]	125	SUCCESS	+2.0	
2020-12-20 04:55:42,227	[DEBUG]	
2020-12-20 04:55:45,557	[INFO]	126	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:55:45,558	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-20 04:55:45,559	[INFO]	127	SUCCESS	+2.0	
2020-12-20 04:55:45,559	[DEBUG]	
2020-12-20 04:55:46,611	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:55:49,994	[INFO]	129	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:55:49,995	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:55:53,358	[INFO]	130	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:55:53,359	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:55:54,392	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:55:55,918	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:55:59,619	[INFO]	133	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:56:00,661	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:56:01,703	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:56:02,754	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-20 04:56:06,167	[INFO]	137	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:56:07,173	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:56:08,242	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:56:08,244	[INFO]	140	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:56:08,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 04:56:08,245	[INFO]	141	SUCCESS	+2.0	
2020-12-20 04:56:08,246	[DEBUG]	
2020-12-20 04:56:11,762	[INFO]	142	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:56:15,027	[INFO]	143	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:56:15,028	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:56:15,029	[INFO]	144	SUCCESS	+2.0	
2020-12-20 04:56:15,029	[DEBUG]	
2020-12-20 04:56:16,049	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:56:17,043	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:56:18,077	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:56:19,107	[INFO]	148	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:56:20,126	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:56:21,141	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:56:22,172	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:56:23,173	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:56:26,534	[INFO]	153	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:56:27,559	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:56:28,539	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:56:29,552	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:56:30,577	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:56:31,631	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:56:32,564	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:56:33,613	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:56:34,713	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:56:35,745	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 04:56:36,771	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:56:37,785	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:56:38,779	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:56:42,202	[INFO]	166	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:56:42,202	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 04:56:43,217	[INFO]	167	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:56:43,218	[INFO]	168	SUCCESS	+2.0	
2020-12-20 04:56:43,219	[DEBUG]	
2020-12-20 04:56:46,646	[INFO]	169	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:56:47,693	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:56:48,714	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:56:49,770	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 04:56:50,841	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:56:51,859	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:56:52,892	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 04:56:56,204	[INFO]	176	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 04:56:56,205	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 04:56:56,206	[INFO]	177	SUCCESS	+2.0	
2020-12-20 04:56:56,206	[DEBUG]	
2020-12-20 04:56:57,201	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:56:58,245	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:57:01,627	[INFO]	180	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:57:01,628	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:57:04,951	[INFO]	181	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:57:04,952	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:57:05,954	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:57:09,337	[INFO]	183	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:57:09,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 04:57:09,339	[INFO]	184	SUCCESS	+2.0	
2020-12-20 04:57:09,339	[DEBUG]	
2020-12-20 04:57:10,398	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:57:11,492	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:57:14,862	[INFO]	187	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:57:14,864	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 04:57:14,866	[INFO]	188	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:57:14,866	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 04:57:14,868	[INFO]	189	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:57:14,868	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 04:57:14,869	[INFO]	190	SUCCESS	+2.0	
2020-12-20 04:57:14,869	[DEBUG]	
2020-12-20 04:57:15,857	[INFO]	191	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-20 04:57:16,783	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:57:17,817	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:57:18,824	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:57:19,783	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:57:23,275	[INFO]	196	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:57:23,276	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 04:57:24,243	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:57:25,265	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:57:28,623	[INFO]	199	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:57:29,630	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:57:29,633	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:57:29,635	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 04:57:30,655	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 04:57:34,043	[INFO]	203	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:57:34,044	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 44,49 ****
--- 48,54 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-20 04:57:37,339	[INFO]	204	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:57:37,340	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 04:57:38,375	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:57:38,376	[INFO]	206	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:57:38,376	[DEBUG]	
2020-12-20 04:57:39,402	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:57:39,405	[INFO]	208	SUCCESS	+2.0	
2020-12-20 04:57:39,406	[DEBUG]	
2020-12-20 04:57:40,372	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:57:41,384	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:57:42,391	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:57:43,399	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:57:44,321	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:57:47,760	[INFO]	214	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:57:47,761	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:57:47,761	[INFO]	215	SUCCESS	+2.0	
2020-12-20 04:57:47,762	[DEBUG]	
2020-12-20 04:57:47,762	[INFO]	216	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 04:57:47,763	[DEBUG]	
2020-12-20 04:57:48,783	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:57:48,785	[INFO]	218	SUCCESS	+2.0	
2020-12-20 04:57:48,786	[DEBUG]	
2020-12-20 04:57:49,805	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:57:50,806	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:57:54,157	[INFO]	221	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:57:55,162	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:57:58,496	[INFO]	223	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:57:58,497	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 04:57:58,498	[INFO]	224	SUCCESS	+2.0	
2020-12-20 04:57:58,499	[DEBUG]	
2020-12-20 04:58:01,807	[INFO]	225	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:58:01,809	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:58:05,202	[INFO]	226	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 04:58:05,203	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 34,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 04:58:08,588	[INFO]	227	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:58:08,590	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 33,39 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:58:09,613	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:58:10,613	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:58:10,615	[INFO]	230	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:58:10,616	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 33,39 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 04:58:11,626	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:58:12,678	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:58:13,707	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:58:13,710	[INFO]	234	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:58:13,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:58:17,099	[INFO]	235	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:58:17,100	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 29,37 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 04:58:18,088	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 04:58:19,084	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:58:19,087	[INFO]	238	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:58:19,088	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:58:19,089	[INFO]	239	SUCCESS	+2.0	
2020-12-20 04:58:19,089	[DEBUG]	
2020-12-20 04:58:20,102	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:58:21,154	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 04:58:22,177	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:58:23,229	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 04:58:24,256	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:58:25,279	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:58:26,379	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:58:27,487	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:58:28,495	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:58:29,833	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:58:31,394	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:58:32,844	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:58:34,171	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:58:35,533	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:58:36,529	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:58:37,604	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:58:38,647	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:58:39,662	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 04:58:40,685	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:58:41,725	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:58:42,746	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:58:43,821	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 04:58:44,899	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:58:46,009	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:58:47,008	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 04:58:48,078	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 04:58:49,080	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:58:50,108	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:58:51,117	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:58:52,092	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:58:55,499	[INFO]	270	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 04:58:55,500	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 04:58:56,555	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 04:58:56,556	[INFO]	272	SUCCESS	+2.0	
2020-12-20 04:58:56,556	[DEBUG]	
2020-12-20 04:58:57,594	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 04:59:00,981	[INFO]	274	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 04:59:00,982	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 04:59:02,034	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 04:59:03,078	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:59:04,094	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:59:04,097	[INFO]	278	SUCCESS	+2.0	
2020-12-20 04:59:04,098	[DEBUG]	
2020-12-20 04:59:07,507	[INFO]	279	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 04:59:07,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 04:59:07,508	[INFO]	280	SUCCESS	+2.0	
2020-12-20 04:59:07,509	[DEBUG]	
2020-12-20 04:59:08,497	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:59:09,555	[INFO]	282	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 04:59:10,574	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 04:59:11,584	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:59:12,614	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 04:59:13,644	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 04:59:16,994	[INFO]	287	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 04:59:16,995	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 04:59:17,999	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 04:59:18,001	[INFO]	289	SUCCESS	+2.0	
2020-12-20 04:59:18,002	[DEBUG]	
2020-12-20 04:59:18,998	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:59:20,016	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 04:59:23,325	[INFO]	292	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 04:59:23,327	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 04:59:23,327	[INFO]	293	SUCCESS	+2.0	
2020-12-20 04:59:23,328	[DEBUG]	
2020-12-20 04:59:24,335	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 04:59:25,334	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 04:59:26,347	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:59:27,377	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:59:28,406	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:59:31,719	[INFO]	299	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 04:59:31,720	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 04:59:32,698	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:59:32,700	[INFO]	301	SUCCESS	+2.0	
2020-12-20 04:59:32,700	[DEBUG]	
2020-12-20 04:59:33,752	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:59:34,746	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 04:59:34,747	[INFO]	304	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 04:59:34,748	[DEBUG]	
2020-12-20 04:59:35,743	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:59:35,744	[INFO]	306	SUCCESS	+2.0	
2020-12-20 04:59:35,745	[DEBUG]	
2020-12-20 04:59:36,776	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:59:37,805	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 04:59:38,818	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 04:59:42,104	[INFO]	310	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 04:59:42,105	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-20 04:59:43,055	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 04:59:43,056	[INFO]	312	SUCCESS	+2.0	
2020-12-20 04:59:43,056	[DEBUG]	
2020-12-20 04:59:44,043	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 04:59:45,046	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 04:59:46,083	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 04:59:47,117	[INFO]	316	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 04:59:48,150	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 04:59:49,142	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 04:59:50,155	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:59:51,194	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 04:59:52,210	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:59:53,247	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 04:59:54,286	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 04:59:55,307	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 04:59:58,537	[INFO]	325	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 04:59:58,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-20 04:59:58,539	[INFO]	326	SUCCESS	+2.0	
2020-12-20 04:59:58,539	[DEBUG]	
2020-12-20 05:00:01,856	[INFO]	327	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:00:01,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:00:01,858	[INFO]	328	SUCCESS	+2.0	
2020-12-20 05:00:01,858	[DEBUG]	
2020-12-20 05:00:02,835	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:00:03,851	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:00:03,853	[INFO]	331	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:00:03,853	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:00:03,854	[INFO]	332	SUCCESS	+2.0	
2020-12-20 05:00:03,854	[DEBUG]	
2020-12-20 05:00:04,859	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:00:05,885	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:00:09,322	[INFO]	335	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 05:00:09,323	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 05:00:09,324	[INFO]	336	SUCCESS	+2.0	
2020-12-20 05:00:09,324	[DEBUG]	
2020-12-20 05:00:10,313	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 05:00:11,320	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:00:12,335	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:00:15,674	[INFO]	340	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:00:16,671	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:00:17,698	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:00:18,711	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 05:00:19,718	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 05:00:20,737	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 05:00:24,118	[INFO]	346	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-20 05:00:24,119	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 05:00:25,114	[INFO]	347	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:00:26,531	[INFO]	348	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:00:26,532	[INFO]	349	SUCCESS	+2.0	
2020-12-20 05:00:26,533	[DEBUG]	
2020-12-20 05:00:27,599	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:00:28,603	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 05:00:29,651	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:00:29,654	[INFO]	353	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:00:29,655	[DEBUG]	
2020-12-20 05:00:29,656	[INFO]	354	SUCCESS	+2.0	
2020-12-20 05:00:29,657	[DEBUG]	
2020-12-20 05:00:30,691	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:00:31,698	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:00:32,690	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:00:33,729	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:00:34,790	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:00:38,217	[INFO]	360	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:00:38,218	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:00:38,219	[INFO]	361	SUCCESS	+2.0	
2020-12-20 05:00:38,219	[DEBUG]	
2020-12-20 05:00:39,246	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:00:42,583	[INFO]	363	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-20 05:00:43,601	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:00:44,691	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:00:45,736	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:00:46,771	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:00:50,113	[INFO]	368	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:00:50,114	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 05:00:50,115	[INFO]	369	SUCCESS	+2.0	
2020-12-20 05:00:50,115	[DEBUG]	
2020-12-20 05:00:51,128	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:00:54,535	[INFO]	371	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 05:00:54,536	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 05:00:54,537	[INFO]	372	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:00:54,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 05:00:54,539	[INFO]	373	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:00:54,539	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 05:00:55,516	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 05:00:55,518	[INFO]	375	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:00:55,518	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 05:00:58,920	[INFO]	376	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:00:58,921	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
***************
*** 52,57 ****
--- 54,60 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 05:00:58,922	[INFO]	377	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:00:58,923	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 05:01:02,277	[INFO]	378	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:01:02,278	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-20 05:01:02,280	[INFO]	379	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:01:02,280	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 05:01:02,281	[INFO]	380	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 05:01:02,282	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-20 05:01:03,282	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 05:01:03,283	[INFO]	382	SUCCESS	+2.0	
2020-12-20 05:01:03,283	[DEBUG]	
2020-12-20 05:01:04,293	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:01:05,321	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:01:06,347	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:01:07,357	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:01:08,382	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:01:09,445	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:01:10,446	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:01:11,651	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:01:15,048	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:01:15,049	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 05:01:16,047	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:01:19,405	[INFO]	393	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:01:19,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,26 ****
--- 18,41 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 05:01:22,845	[INFO]	394	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:01:22,846	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 05:01:22,846	[INFO]	395	SUCCESS	+2.0	
2020-12-20 05:01:22,847	[DEBUG]	
2020-12-20 05:01:23,839	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:01:24,860	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:01:28,239	[INFO]	398	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:01:28,240	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 05:01:29,220	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 05:01:29,222	[INFO]	400	SUCCESS	+2.0	
2020-12-20 05:01:29,223	[DEBUG]	
2020-12-20 05:01:30,255	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:01:33,631	[INFO]	402	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:01:33,632	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-20 05:01:34,654	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:01:34,655	[INFO]	404	SUCCESS	+2.0	
2020-12-20 05:01:34,655	[DEBUG]	
2020-12-20 05:01:38,055	[INFO]	405	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:01:38,056	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-20 05:01:38,057	[INFO]	406	SUCCESS	+2.0	
2020-12-20 05:01:38,057	[DEBUG]	
2020-12-20 05:01:39,070	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 05:01:42,573	[INFO]	408	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:01:42,574	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 05:01:43,628	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:01:43,631	[INFO]	410	SUCCESS	+2.0	
2020-12-20 05:01:43,632	[DEBUG]	
2020-12-20 05:01:44,618	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:01:45,651	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:01:46,705	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:01:47,770	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:01:48,802	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:01:52,054	[INFO]	416	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 05:01:53,047	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:01:54,083	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:01:55,105	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 05:01:56,102	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:01:57,094	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 05:01:58,108	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:02:01,413	[INFO]	423	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:02:01,414	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 05:02:02,401	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 05:02:02,402	[INFO]	425	SUCCESS	+2.0	
2020-12-20 05:02:02,403	[DEBUG]	
2020-12-20 05:02:03,410	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:02:03,411	[INFO]	427	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:02:03,411	[DEBUG]	
2020-12-20 05:02:03,412	[INFO]	428	SUCCESS	+2.0	
2020-12-20 05:02:03,412	[DEBUG]	
2020-12-20 05:02:04,437	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:02:05,390	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 05:02:06,417	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:02:07,414	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:02:08,418	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:02:09,415	[INFO]	434	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 05:02:10,388	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 05:02:11,421	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:02:12,427	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:02:13,422	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:02:16,815	[INFO]	439	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:02:16,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:02:20,096	[INFO]	440	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 05:02:20,098	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,37 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:02:21,093	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:02:21,094	[INFO]	442	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:02:21,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:02:22,105	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:02:23,105	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:02:38,183	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:02:38,184	[INFO]	446	SUCCESS	+2.0	
2020-12-20 05:02:38,184	[DEBUG]	
2020-12-20 05:02:41,197	[INFO]	447	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 05:02:44,301	[INFO]	448	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 05:02:44,303	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 05:02:44,303	[INFO]	449	SUCCESS	+2.0	
2020-12-20 05:02:44,304	[DEBUG]	
2020-12-20 05:02:45,244	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:02:46,272	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 05:02:47,319	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:02:50,799	[INFO]	453	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:02:54,067	[INFO]	454	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:02:54,068	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-20 05:02:54,068	[INFO]	455	SUCCESS	+2.0	
2020-12-20 05:02:54,069	[DEBUG]	
2020-12-20 05:02:55,043	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:02:58,374	[INFO]	457	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:02:59,411	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:03:02,769	[INFO]	459	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:03:03,746	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:03:18,826	[INFO]	461	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:03:18,828	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 05:03:21,778	[INFO]	463	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:03:21,779	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-20 05:03:22,667	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:03:23,618	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:03:24,548	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:03:25,484	[INFO]	467	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:03:26,517	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:03:27,586	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:03:30,975	[INFO]	470	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:03:30,976	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,34 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:03:30,977	[INFO]	471	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:03:30,978	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-20 05:03:30,978	[INFO]	472	SUCCESS	+2.0	
2020-12-20 05:03:30,979	[DEBUG]	
2020-12-20 05:03:31,967	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:03:32,971	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:03:36,347	[INFO]	475	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:03:36,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 05:03:37,348	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:03:37,349	[INFO]	477	SUCCESS	+2.0	
2020-12-20 05:03:37,350	[DEBUG]	
2020-12-20 05:03:38,391	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:03:39,477	[INFO]	479	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 05:03:40,535	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:03:43,980	[INFO]	481	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:03:44,974	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:03:45,997	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:03:47,008	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:03:48,069	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:03:49,112	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:03:50,136	[INFO]	487	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:03:51,138	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:03:52,156	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:03:53,214	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:03:54,219	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 05:03:55,231	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:03:56,278	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 05:03:57,369	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:03:57,371	[INFO]	495	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:03:57,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:03:57,372	[INFO]	496	SUCCESS	+2.0	
2020-12-20 05:03:57,372	[DEBUG]	
2020-12-20 05:03:58,421	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:04:01,732	[INFO]	498	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:04:01,733	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 05:04:02,766	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:04:02,768	[INFO]	500	SUCCESS	+2.0	
2020-12-20 05:04:02,768	[DEBUG]	
2020-12-20 05:04:02,769	[INFO]	==== END ====
2020-12-20 05:04:02,769	[INFO]	Reason: step budget
2020-12-20 05:04:02,770	[INFO]	
2020-12-20 05:04:02,770	[INFO]	========== EPOCH 20 ==========
2020-12-20 05:04:02,770	[INFO]	==== WARMUP ====
2020-12-20 05:04:06,181	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 05:04:06,182	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 05:04:09,566	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 05:04:09,566	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 05:04:12,859	[INFO]	WARM	SUCCESS	 2.0	
2020-12-20 05:04:12,859	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 05:04:16,301	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-20 05:04:16,301	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-20 05:04:16,301	[INFO]	==== START ====
2020-12-20 05:04:17,243	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:04:18,259	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:04:19,280	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:04:20,283	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:04:21,315	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:04:24,699	[INFO]	6	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:04:24,700	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-20 05:04:25,730	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 05:04:25,731	[INFO]	8	SUCCESS	+2.0	
2020-12-20 05:04:25,732	[DEBUG]	
2020-12-20 05:04:29,154	[INFO]	9	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-20 05:04:29,155	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 05:04:29,156	[INFO]	10	SUCCESS	+2.0	
2020-12-20 05:04:29,156	[DEBUG]	
2020-12-20 05:04:30,170	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:04:31,263	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:04:32,356	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:04:35,759	[INFO]	14	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:04:35,760	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 05:04:39,085	[INFO]	15	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:04:39,087	[INFO]	16	SUCCESS	+2.0	
2020-12-20 05:04:39,087	[DEBUG]	
2020-12-20 05:04:40,090	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 05:04:41,105	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:04:44,521	[INFO]	19	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:04:44,522	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:04:45,538	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:04:46,539	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:04:46,540	[INFO]	22	SUCCESS	+2.0	
2020-12-20 05:04:46,541	[DEBUG]	
2020-12-20 05:04:47,598	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:04:48,621	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:04:49,636	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:04:50,660	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 05:04:51,670	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:05:06,740	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:05:07,661	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 05:05:08,549	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 05:05:11,545	[INFO]	31	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 05:05:12,531	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 05:05:13,571	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:05:16,952	[INFO]	34	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:05:16,953	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:05:17,933	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:05:18,927	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 05:05:19,955	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 05:05:19,957	[INFO]	38	SUCCESS	+2.0	
2020-12-20 05:05:19,957	[DEBUG]	
2020-12-20 05:05:20,973	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:05:24,354	[INFO]	40	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:05:24,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 05:05:24,356	[INFO]	41	SUCCESS	+2.0	
2020-12-20 05:05:24,356	[DEBUG]	
2020-12-20 05:05:25,363	[INFO]	42	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:05:26,379	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:05:29,726	[INFO]	44	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:05:29,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:05:29,727	[INFO]	45	SUCCESS	+2.0	
2020-12-20 05:05:29,728	[DEBUG]	
2020-12-20 05:05:30,710	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:05:34,028	[INFO]	47	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:05:34,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-20 05:05:38,081	[INFO]	48	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:05:38,082	[INFO]	49	SUCCESS	+2.0	
2020-12-20 05:05:38,082	[DEBUG]	
2020-12-20 05:05:39,371	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 05:05:40,806	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:05:42,151	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:05:43,527	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:05:44,717	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:05:48,786	[INFO]	55	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:05:48,787	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 05:05:49,857	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:05:49,858	[INFO]	57	SUCCESS	+2.0	
2020-12-20 05:05:49,858	[DEBUG]	
2020-12-20 05:05:50,889	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:05:51,989	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 05:05:53,028	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:05:54,066	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:05:55,082	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:05:56,065	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:05:59,366	[INFO]	64	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:05:59,367	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 05:06:02,639	[INFO]	65	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:06:02,640	[INFO]	66	SUCCESS	+2.0	
2020-12-20 05:06:02,641	[DEBUG]	
2020-12-20 05:06:03,637	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:06:04,642	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:06:08,038	[INFO]	69	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:06:08,039	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 05:06:09,021	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:06:09,024	[INFO]	71	SUCCESS	+2.0	
2020-12-20 05:06:09,025	[DEBUG]	
2020-12-20 05:06:12,380	[INFO]	72	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:06:12,381	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 05:06:13,403	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:06:14,456	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:06:14,457	[INFO]	75	SUCCESS	+2.0	
2020-12-20 05:06:14,457	[DEBUG]	
2020-12-20 05:06:15,469	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:06:16,447	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:06:17,466	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:06:18,481	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:06:19,488	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 05:06:20,539	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:06:21,562	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:06:22,585	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:06:22,587	[INFO]	84	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:06:22,588	[DEBUG]	
2020-12-20 05:06:22,588	[INFO]	85	SUCCESS	+2.0	
2020-12-20 05:06:22,589	[DEBUG]	
2020-12-20 05:06:23,612	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:06:24,647	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:06:28,007	[INFO]	88	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:06:28,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 05:06:28,010	[INFO]	89	SUCCESS	+2.0	
2020-12-20 05:06:28,011	[DEBUG]	
2020-12-20 05:06:29,047	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:06:30,074	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:06:31,101	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 05:06:34,452	[INFO]	93	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:06:34,453	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 05:06:35,557	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 05:06:39,036	[INFO]	95	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:06:39,038	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 26,31 ****
--- 27,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-20 05:06:42,376	[INFO]	96	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:06:42,377	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 05:06:42,378	[INFO]	97	SUCCESS	+2.0	
2020-12-20 05:06:42,378	[DEBUG]	
2020-12-20 05:06:43,409	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:06:44,446	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:06:45,437	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:06:46,496	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:06:47,586	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:06:48,599	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:06:49,648	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:06:53,035	[INFO]	105	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 05:06:54,027	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:06:55,055	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:06:56,070	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:06:57,085	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:06:58,155	[INFO]	110	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-20 05:07:01,469	[INFO]	111	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:07:04,832	[INFO]	112	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:07:04,833	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-20 05:07:05,794	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:07:05,795	[INFO]	114	SUCCESS	+2.0	
2020-12-20 05:07:05,796	[DEBUG]	
2020-12-20 05:07:06,809	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:07:07,858	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:07:08,890	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:07:09,923	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:07:10,953	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 05:07:11,966	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:07:13,015	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:07:14,073	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:07:15,128	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 05:07:16,167	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:07:17,166	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:07:18,166	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:07:19,186	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:07:20,225	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 05:07:21,214	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:07:36,274	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:07:37,181	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:07:40,170	[INFO]	132	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:07:40,172	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 05:07:40,173	[INFO]	133	SUCCESS	+2.0	
2020-12-20 05:07:40,174	[DEBUG]	
2020-12-20 05:07:41,065	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 05:07:41,067	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 05:07:41,990	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:07:42,909	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:07:46,247	[INFO]	138	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:07:46,248	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 05:07:46,248	[INFO]	139	SUCCESS	+2.0	
2020-12-20 05:07:46,249	[DEBUG]	
2020-12-20 05:07:47,249	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:07:48,273	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:07:49,299	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:07:50,324	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:07:53,778	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:07:53,779	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 05:07:53,780	[INFO]	145	SUCCESS	+2.0	
2020-12-20 05:07:53,780	[DEBUG]	
2020-12-20 05:07:54,783	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:07:55,813	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:07:56,860	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:07:57,880	[INFO]	149	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:07:58,903	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:07:59,909	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:08:00,869	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:08:04,249	[INFO]	153	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:08:04,250	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-20 05:08:04,252	[INFO]	154	SUCCESS	+2.0	
2020-12-20 05:08:04,252	[DEBUG]	
2020-12-20 05:08:05,289	[INFO]	155	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-20 05:08:06,336	[INFO]	156	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:08:07,356	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:08:08,423	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 05:08:09,455	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:08:10,481	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:08:11,496	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:08:12,526	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:08:13,559	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:08:14,588	[INFO]	164	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:08:15,618	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:08:18,986	[INFO]	166	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:08:18,987	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 05:08:22,343	[INFO]	167	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 05:08:22,345	[INFO]	168	SUCCESS	+2.0	
2020-12-20 05:08:22,346	[DEBUG]	
2020-12-20 05:08:23,442	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:08:24,482	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 05:08:25,486	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:08:26,522	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 05:08:27,569	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:08:28,614	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:08:29,644	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:08:30,656	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 05:08:31,689	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:08:32,630	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:08:36,096	[INFO]	179	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:08:36,097	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 05:08:37,081	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:08:38,113	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:08:38,115	[INFO]	182	SUCCESS	+2.0	
2020-12-20 05:08:38,116	[DEBUG]	
2020-12-20 05:08:39,135	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:08:42,541	[INFO]	184	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:08:43,525	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:08:44,517	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:08:45,539	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:08:49,055	[INFO]	188	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:08:49,056	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-20 05:08:49,057	[INFO]	189	SUCCESS	+2.0	
2020-12-20 05:08:49,057	[DEBUG]	
2020-12-20 05:08:52,322	[INFO]	190	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:08:52,324	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:08:55,635	[INFO]	191	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 05:08:55,636	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:08:59,012	[INFO]	192	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 05:08:59,013	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 05:08:59,013	[INFO]	193	SUCCESS	+2.0	
2020-12-20 05:08:59,014	[DEBUG]	
2020-12-20 05:09:00,028	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 05:09:01,075	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:09:02,120	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:09:03,148	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 05:09:06,591	[INFO]	198	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-20 05:09:06,591	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 05:09:07,568	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:09:10,987	[INFO]	200	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:09:10,989	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 05:09:10,990	[INFO]	201	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-20 05:09:10,990	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 05:09:10,991	[INFO]	202	SUCCESS	+2.0	
2020-12-20 05:09:10,991	[DEBUG]	
2020-12-20 05:09:10,992	[INFO]	203	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:09:10,992	[DEBUG]	
2020-12-20 05:09:10,993	[INFO]	204	SUCCESS	+2.0	
2020-12-20 05:09:10,993	[DEBUG]	
2020-12-20 05:09:11,907	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:09:12,965	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 05:09:16,346	[INFO]	207	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:09:16,347	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:09:17,330	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:09:18,323	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:09:18,324	[INFO]	210	SUCCESS	+2.0	
2020-12-20 05:09:18,325	[DEBUG]	
2020-12-20 05:09:19,324	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:09:20,348	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:09:21,394	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 05:09:22,429	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 05:09:23,370	[INFO]	215	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:09:24,406	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:09:39,480	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:09:42,485	[INFO]	218	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 05:09:42,486	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-20 05:09:43,436	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:09:43,437	[INFO]	220	SUCCESS	+2.0	
2020-12-20 05:09:43,438	[DEBUG]	
2020-12-20 05:09:44,430	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 05:09:45,441	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:09:46,480	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:09:47,556	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 05:09:50,930	[INFO]	225	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:09:50,931	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 05:09:50,932	[INFO]	226	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:09:50,933	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 05:09:51,943	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:09:52,987	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 05:09:52,990	[INFO]	229	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:09:52,991	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-20 05:09:52,993	[INFO]	230	SUCCESS	+2.0	
2020-12-20 05:09:52,993	[DEBUG]	
2020-12-20 05:09:56,379	[INFO]	231	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:09:56,380	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-20 05:09:57,277	[INFO]	232	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 05:09:57,279	[INFO]	233	SUCCESS	+2.0	
2020-12-20 05:09:57,279	[DEBUG]	
2020-12-20 05:09:58,250	[INFO]	234	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:09:59,275	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 05:10:02,595	[INFO]	236	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:10:03,589	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 05:10:04,600	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:10:19,682	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-20 05:10:20,557	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:10:21,476	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:10:24,430	[INFO]	242	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 05:10:24,431	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 Node minNode = null;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-20 05:10:24,432	[INFO]	243	SUCCESS	+2.0	
2020-12-20 05:10:24,432	[DEBUG]	
2020-12-20 05:10:25,346	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:10:26,284	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:10:27,281	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:10:28,333	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:10:29,352	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:10:30,403	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:10:31,431	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:10:34,779	[INFO]	251	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:10:34,780	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 05:10:35,915	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:10:35,916	[INFO]	253	SUCCESS	+2.0	
2020-12-20 05:10:35,916	[DEBUG]	
2020-12-20 05:10:36,966	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 05:10:38,016	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 05:10:39,050	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:10:40,080	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 05:10:41,080	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:10:42,108	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:10:43,111	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:10:44,167	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:10:45,189	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:10:46,202	[INFO]	263	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:10:47,250	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:10:48,290	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 05:10:49,324	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:10:50,389	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 05:10:51,397	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 05:10:52,430	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:10:53,453	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:10:54,476	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:10:55,494	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:10:56,490	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:10:57,507	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:10:58,572	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:10:59,660	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 05:11:00,679	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:11:01,686	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:11:02,718	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 05:11:03,713	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:11:04,718	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:11:05,737	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 05:11:09,164	[INFO]	283	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:11:09,165	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:11:12,514	[INFO]	284	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 05:11:12,516	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,38 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:11:13,485	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:11:16,806	[INFO]	286	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:11:16,807	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,38 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 05:11:17,724	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:11:18,727	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:11:19,738	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:11:20,742	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:11:24,140	[INFO]	291	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:11:24,143	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 49,54 ****
--- 47,53 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 05:11:24,145	[INFO]	292	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:11:24,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-20 05:11:24,147	[INFO]	293	SUCCESS	+2.0	
2020-12-20 05:11:24,148	[DEBUG]	
2020-12-20 05:11:27,531	[INFO]	294	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:11:27,532	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 05:11:27,533	[INFO]	295	SUCCESS	+2.0	
2020-12-20 05:11:27,533	[DEBUG]	
2020-12-20 05:11:28,518	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:11:31,838	[INFO]	297	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:11:31,839	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-20 05:11:31,840	[INFO]	298	SUCCESS	+2.0	
2020-12-20 05:11:31,840	[DEBUG]	
2020-12-20 05:11:32,831	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:11:36,282	[INFO]	300	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:11:36,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-20 05:11:36,284	[INFO]	301	SUCCESS	+2.0	
2020-12-20 05:11:36,284	[DEBUG]	
2020-12-20 05:11:39,606	[INFO]	302	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:11:39,607	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:11:39,608	[INFO]	303	SUCCESS	+2.0	
2020-12-20 05:11:39,608	[DEBUG]	
2020-12-20 05:11:42,967	[INFO]	304	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:11:42,969	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 05:11:44,065	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:11:44,068	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:11:44,069	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 05:11:47,445	[INFO]	307	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:11:47,446	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 05:11:48,457	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:11:48,458	[INFO]	309	SUCCESS	+2.0	
2020-12-20 05:11:48,458	[DEBUG]	
2020-12-20 05:11:49,464	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:11:50,500	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:11:51,508	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:11:52,504	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:11:53,512	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:11:54,523	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 05:11:57,710	[INFO]	316	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 05:11:58,721	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:11:59,687	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 05:12:00,695	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:12:01,716	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 05:12:02,722	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-20 05:12:02,723	[INFO]	322	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 05:12:02,724	[DEBUG]	
2020-12-20 05:12:03,749	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:12:04,793	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:12:04,794	[INFO]	325	SUCCESS	+2.0	
2020-12-20 05:12:04,794	[DEBUG]	
2020-12-20 05:12:08,151	[INFO]	326	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:12:09,146	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:12:10,167	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 05:12:13,500	[INFO]	329	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:12:13,501	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-20 05:12:13,502	[INFO]	330	SUCCESS	+2.0	
2020-12-20 05:12:13,502	[DEBUG]	
2020-12-20 05:12:14,504	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:12:15,433	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:12:18,803	[INFO]	333	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:12:22,127	[INFO]	334	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:12:22,129	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-20 05:12:23,142	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:12:23,143	[INFO]	336	SUCCESS	+2.0	
2020-12-20 05:12:23,143	[DEBUG]	
2020-12-20 05:12:24,154	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 05:12:25,160	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 05:12:26,192	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:12:27,210	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:12:27,213	[INFO]	341	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-20 05:12:27,214	[DEBUG]	
2020-12-20 05:12:28,246	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:12:28,247	[INFO]	343	SUCCESS	+2.0	
2020-12-20 05:12:28,247	[DEBUG]	
2020-12-20 05:12:29,255	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:12:30,315	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:12:30,319	[INFO]	346	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:12:31,331	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:12:32,335	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:12:33,364	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:12:34,398	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:12:37,760	[INFO]	351	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:12:37,760	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-20 05:12:37,761	[INFO]	352	SUCCESS	+2.0	
2020-12-20 05:12:37,762	[DEBUG]	
2020-12-20 05:12:38,799	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 05:12:39,810	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:12:43,092	[INFO]	355	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:12:43,093	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 05:12:46,440	[INFO]	356	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-20 05:12:46,441	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
***************
*** 19,24 ****
--- 20,27 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 05:12:46,442	[INFO]	357	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:12:46,443	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 05:12:47,450	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:12:48,450	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 05:12:48,451	[INFO]	360	SUCCESS	+2.0	
2020-12-20 05:12:48,451	[DEBUG]	
2020-12-20 05:12:49,465	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:12:50,486	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 05:12:53,910	[INFO]	363	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:12:53,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-20 05:12:53,912	[INFO]	364	SUCCESS	+2.0	
2020-12-20 05:12:53,912	[DEBUG]	
2020-12-20 05:12:53,913	[INFO]	365	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-20 05:12:53,913	[DEBUG]	
2020-12-20 05:12:53,914	[INFO]	366	SUCCESS	+2.0	
2020-12-20 05:12:53,914	[DEBUG]	
2020-12-20 05:12:54,849	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:12:55,845	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 05:12:56,870	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-20 05:13:00,285	[INFO]	370	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:13:00,286	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-20 05:13:00,286	[INFO]	371	SUCCESS	+2.0	
2020-12-20 05:13:00,287	[DEBUG]	
2020-12-20 05:13:03,674	[INFO]	372	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:13:03,675	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:13:04,650	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 05:13:04,653	[INFO]	374	SUCCESS	+2.0	
2020-12-20 05:13:04,654	[DEBUG]	
2020-12-20 05:13:05,647	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:13:06,653	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:13:10,002	[INFO]	377	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:13:10,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-20 05:13:10,007	[INFO]	378	SUCCESS	+2.0	
2020-12-20 05:13:10,007	[DEBUG]	
2020-12-20 05:13:11,034	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-20 05:13:14,382	[INFO]	380	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:13:14,383	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-20 05:13:14,383	[INFO]	381	SUCCESS	+2.0	
2020-12-20 05:13:14,384	[DEBUG]	
2020-12-20 05:13:15,359	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 05:13:16,382	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 05:13:17,406	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 05:13:18,415	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:13:19,428	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 05:13:20,459	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 05:13:21,551	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:13:22,551	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-20 05:13:25,982	[INFO]	390	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:13:25,983	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 05:13:25,983	[INFO]	391	SUCCESS	+2.0	
2020-12-20 05:13:25,984	[DEBUG]	
2020-12-20 05:13:26,943	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:13:27,948	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 05:13:28,982	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:13:32,725	[INFO]	395	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:13:32,726	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 05:13:33,766	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-20 05:13:37,248	[INFO]	397	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-20 05:13:37,249	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,24 ****
--- 16,38 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 05:13:38,272	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-20 05:13:38,274	[INFO]	399	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:13:38,276	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-20 05:13:39,284	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:13:40,319	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 05:13:41,355	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-20 05:13:41,358	[INFO]	403	SUCCESS	+2.0	
2020-12-20 05:13:41,359	[DEBUG]	
2020-12-20 05:13:42,402	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:13:43,424	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:13:44,475	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-20 05:13:45,479	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-20 05:13:46,526	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:13:47,589	[INFO]	409	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 05:13:48,590	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-20 05:13:49,597	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-20 05:13:50,635	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-20 05:13:54,061	[INFO]	413	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:13:54,062	[INFO]	414	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:13:54,063	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-20 05:13:55,018	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-20 05:13:55,019	[INFO]	416	SUCCESS	+2.0	
2020-12-20 05:13:55,019	[DEBUG]	
2020-12-20 05:13:58,442	[INFO]	417	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:13:58,443	[INFO]	418	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:13:58,444	[DEBUG]	
2020-12-20 05:13:58,444	[INFO]	419	SUCCESS	+2.0	
2020-12-20 05:13:58,445	[DEBUG]	
2020-12-20 05:14:01,716	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:14:01,717	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 05:14:01,718	[INFO]	421	SUCCESS	+2.0	
2020-12-20 05:14:01,719	[DEBUG]	
2020-12-20 05:14:02,685	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-20 05:14:03,713	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-20 05:14:07,103	[INFO]	424	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 05:14:07,104	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 05:14:07,104	[INFO]	425	SUCCESS	+2.0	
2020-12-20 05:14:07,105	[DEBUG]	
2020-12-20 05:14:08,133	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:14:09,171	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 05:14:10,179	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:14:11,204	[INFO]	429	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:14:14,573	[INFO]	430	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:14:14,574	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:14:14,575	[INFO]	431	SUCCESS	+2.0	
2020-12-20 05:14:14,575	[DEBUG]	
2020-12-20 05:14:15,613	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:14:18,943	[INFO]	433	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:14:18,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-20 05:14:19,934	[INFO]	434	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:14:35,004	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-20 05:14:35,836	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:14:36,722	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-20 05:14:36,723	[INFO]	438	SUCCESS	+2.0	
2020-12-20 05:14:36,723	[DEBUG]	
2020-12-20 05:14:39,795	[INFO]	439	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:14:39,796	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-20 05:14:40,751	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-20 05:14:41,771	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-20 05:14:42,788	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:14:43,823	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:14:44,868	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:14:45,871	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-20 05:14:45,872	[INFO]	446	SUCCESS	+2.0	
2020-12-20 05:14:45,872	[DEBUG]	
2020-12-20 05:14:46,902	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:14:47,972	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-20 05:14:48,897	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:14:49,917	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-20 05:14:53,308	[INFO]	451	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:14:53,309	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-20 05:14:54,360	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:14:54,361	[INFO]	453	SUCCESS	+2.0	
2020-12-20 05:14:54,361	[DEBUG]	
2020-12-20 05:14:55,449	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 05:14:56,462	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:14:57,491	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:14:58,510	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-20 05:15:01,932	[INFO]	458	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:15:01,933	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             minNode = node;
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-20 05:15:01,934	[INFO]	459	SUCCESS	+2.0	
2020-12-20 05:15:01,935	[DEBUG]	
2020-12-20 05:15:02,891	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 05:15:03,820	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-20 05:15:04,838	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-20 05:15:05,846	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-20 05:15:06,858	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:15:10,206	[INFO]	465	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-20 05:15:10,207	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-20 05:15:10,208	[INFO]	466	SUCCESS	+2.0	
2020-12-20 05:15:10,209	[DEBUG]	
2020-12-20 05:15:25,280	[INFO]	467	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:15:28,317	[INFO]	468	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:15:28,318	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 05:15:29,212	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-20 05:15:30,123	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-20 05:15:33,463	[INFO]	471	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:15:33,464	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 49,54 ****
--- 51,57 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 05:15:37,492	[INFO]	472	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-20 05:15:37,493	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-20 05:15:37,494	[INFO]	473	SUCCESS	+2.0	
2020-12-20 05:15:37,494	[DEBUG]	
2020-12-20 05:15:38,619	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-20 05:15:39,924	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-20 05:15:43,335	[INFO]	476	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-20 05:15:43,336	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-20 05:15:43,337	[INFO]	477	SUCCESS	+2.0	
2020-12-20 05:15:43,338	[DEBUG]	
2020-12-20 05:15:44,371	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-20 05:15:47,752	[INFO]	479	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-20 05:15:47,753	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-20 05:15:51,111	[INFO]	480	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:15:51,113	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 31,37 ****
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 05:15:54,416	[INFO]	481	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:15:54,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-20 05:15:54,418	[INFO]	482	SUCCESS	+2.0	
2020-12-20 05:15:54,419	[DEBUG]	
2020-12-20 05:15:55,442	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-20 05:15:56,485	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-20 05:15:57,482	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-20 05:15:58,531	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-20 05:15:59,540	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:16:02,957	[INFO]	488	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-20 05:16:02,958	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-20 05:16:02,959	[INFO]	489	SUCCESS	+2.0	
2020-12-20 05:16:02,959	[DEBUG]	
2020-12-20 05:16:03,985	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-20 05:16:03,988	[INFO]	491	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-20 05:16:03,989	[DEBUG]	
2020-12-20 05:16:03,991	[INFO]	492	SUCCESS	+2.0	
2020-12-20 05:16:03,991	[DEBUG]	
2020-12-20 05:16:07,375	[INFO]	493	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-20 05:16:07,376	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-20 05:16:07,377	[INFO]	494	SUCCESS	+2.0	
2020-12-20 05:16:07,377	[DEBUG]	
2020-12-20 05:16:08,388	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-20 05:16:09,383	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-20 05:16:10,406	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-20 05:16:11,455	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-20 05:16:12,465	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-20 05:16:13,458	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-20 05:16:13,458	[INFO]	==== END ====
2020-12-20 05:16:13,458	[INFO]	Reason: step budget
2020-12-20 05:16:13,459	[INFO]	
2020-12-20 05:16:13,459	[INFO]	========== REPORT ==========
2020-12-20 05:16:13,460	[INFO]	==== Epoch 1 ====
2020-12-20 05:16:13,460	[INFO]	Termination: step budget
2020-12-20 05:16:13,460	[INFO]	Number of interations: 500
2020-12-20 05:16:13,460	[INFO]	==== Epoch 2 ====
2020-12-20 05:16:13,460	[INFO]	Termination: step budget
2020-12-20 05:16:13,460	[INFO]	Number of interations: 500
2020-12-20 05:16:13,460	[INFO]	==== Epoch 3 ====
2020-12-20 05:16:13,461	[INFO]	Termination: step budget
2020-12-20 05:16:13,462	[INFO]	Number of interations: 500
2020-12-20 05:16:13,462	[INFO]	==== Epoch 4 ====
2020-12-20 05:16:13,462	[INFO]	Termination: step budget
2020-12-20 05:16:13,462	[INFO]	Number of interations: 500
2020-12-20 05:16:13,462	[INFO]	==== Epoch 5 ====
2020-12-20 05:16:13,462	[INFO]	Termination: step budget
2020-12-20 05:16:13,462	[INFO]	Number of interations: 500
2020-12-20 05:16:13,463	[INFO]	==== Epoch 6 ====
2020-12-20 05:16:13,463	[INFO]	Termination: step budget
2020-12-20 05:16:13,463	[INFO]	Number of interations: 500
2020-12-20 05:16:13,463	[INFO]	==== Epoch 7 ====
2020-12-20 05:16:13,463	[INFO]	Termination: step budget
2020-12-20 05:16:13,463	[INFO]	Number of interations: 500
2020-12-20 05:16:13,463	[INFO]	==== Epoch 8 ====
2020-12-20 05:16:13,463	[INFO]	Termination: step budget
2020-12-20 05:16:13,463	[INFO]	Number of interations: 500
2020-12-20 05:16:13,464	[INFO]	==== Epoch 9 ====
2020-12-20 05:16:13,464	[INFO]	Termination: step budget
2020-12-20 05:16:13,464	[INFO]	Number of interations: 500
2020-12-20 05:16:13,464	[INFO]	==== Epoch 10 ====
2020-12-20 05:16:13,464	[INFO]	Termination: step budget
2020-12-20 05:16:13,464	[INFO]	Number of interations: 500
2020-12-20 05:16:13,464	[INFO]	==== Epoch 11 ====
2020-12-20 05:16:13,464	[INFO]	Termination: step budget
2020-12-20 05:16:13,465	[INFO]	Number of interations: 500
2020-12-20 05:16:13,465	[INFO]	==== Epoch 12 ====
2020-12-20 05:16:13,465	[INFO]	Termination: step budget
2020-12-20 05:16:13,465	[INFO]	Number of interations: 500
2020-12-20 05:16:13,465	[INFO]	==== Epoch 13 ====
2020-12-20 05:16:13,465	[INFO]	Termination: step budget
2020-12-20 05:16:13,465	[INFO]	Number of interations: 500
2020-12-20 05:16:13,465	[INFO]	==== Epoch 14 ====
2020-12-20 05:16:13,465	[INFO]	Termination: step budget
2020-12-20 05:16:13,465	[INFO]	Number of interations: 500
2020-12-20 05:16:13,465	[INFO]	==== Epoch 15 ====
2020-12-20 05:16:13,466	[INFO]	Termination: step budget
2020-12-20 05:16:13,466	[INFO]	Number of interations: 500
2020-12-20 05:16:13,466	[INFO]	==== Epoch 16 ====
2020-12-20 05:16:13,466	[INFO]	Termination: step budget
2020-12-20 05:16:13,466	[INFO]	Number of interations: 500
2020-12-20 05:16:13,466	[INFO]	==== Epoch 17 ====
2020-12-20 05:16:13,466	[INFO]	Termination: step budget
2020-12-20 05:16:13,466	[INFO]	Number of interations: 500
2020-12-20 05:16:13,466	[INFO]	==== Epoch 18 ====
2020-12-20 05:16:13,466	[INFO]	Termination: step budget
2020-12-20 05:16:13,466	[INFO]	Number of interations: 500
2020-12-20 05:16:13,466	[INFO]	==== Epoch 19 ====
2020-12-20 05:16:13,467	[INFO]	Termination: step budget
2020-12-20 05:16:13,467	[INFO]	Number of interations: 500
2020-12-20 05:16:13,467	[INFO]	==== Epoch 20 ====
2020-12-20 05:16:13,467	[INFO]	Termination: step budget
2020-12-20 05:16:13,467	[INFO]	Number of interations: 500
2020-12-20 05:16:13,474	[INFO]	Experiment duration: 13990.180759429932
